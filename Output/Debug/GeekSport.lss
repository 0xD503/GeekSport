
GeekSport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00002988  00002a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a6  00800130  00800130  00002a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e236  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000216d  00000000  00000000  0001116a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f8b  00000000  00000000  000132d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bdc  00000000  00000000  00016264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001871  00000000  00000000  00016e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000039ee  00000000  00000000  000186b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  0001c09f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__ctors_end>
       4:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__vector_1>
       8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
       c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      10:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      18:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      24:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      2c:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__vector_11>
      30:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__vector_12>
      34:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      38:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__vector_14>
      3c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      44:	0c 94 98 13 	jmp	0x2730	; 0x2730 <__vector_17>
      48:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__vector_18>
      4c:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__vector_19>
      50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      60:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_24>
      64:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      68:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      6c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      70:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      74:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      78:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      7c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      80:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      84:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      88:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      8c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      90:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      94:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      98:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      9c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	4f 66       	ori	r20, 0x6F	; 111
      b6:	66 00       	.word	0x0066	; ????

000000b8 <bluetoothOnString>:
      b8:	4f 6e 00                                            On.

000000bb <bluetoothString>:
      bb:	42 6c 75 65 74 6f 6f 74 68 3a 20 00                 Bluetooth: .

000000c7 <__c.2778>:
      c7:	2c 20 00                                            , .

000000ca <timeSettings>:
      ca:	54 69 6d 65 20 73 65 74 74 69 6e 67 73 3a 00        Time settings:.

000000d9 <weekdaySettingString>:
      d9:	57 65 65 6b 64 61 79 20 2d 20 00                    Weekday - .

000000e4 <dateSettingString>:
      e4:	44 61 74 65 3a 20 30 30 2e 30 30 2e 30 30 00        Date: 00.00.00.

000000f3 <timeSettingString>:
      f3:	54 69 6d 65 3a 20 30 30 3a 30 30 00                 Time: 00:00.

000000ff <December>:
      ff:	44 65 63 00                                         Dec.

00000103 <November>:
     103:	4e 6f 76 00                                         Nov.

00000107 <October>:
     107:	4f 63 74 00                                         Oct.

0000010b <Septemper>:
     10b:	53 65 70 00                                         Sep.

0000010f <August>:
     10f:	41 75 67 00                                         Aug.

00000113 <Jule>:
     113:	4a 75 6c 65 00                                      Jule.

00000118 <June>:
     118:	4a 75 6e 65 00                                      June.

0000011d <May>:
     11d:	4d 61 79 00                                         May.

00000121 <April>:
     121:	41 70 72 00                                         Apr.

00000125 <March>:
     125:	4d 61 72 00                                         Mar.

00000129 <February>:
     129:	46 65 62 00                                         Feb.

0000012d <January>:
     12d:	4a 61 6e 00                                         Jan.

00000131 <Saturday>:
     131:	53 61 74 00                                         Sat.

00000135 <Friday>:
     135:	46 72 69 00                                         Fri.

00000139 <Thursday>:
     139:	54 68 75 00                                         Thu.

0000013d <Wednesday>:
     13d:	57 65 64 00                                         Wed.

00000141 <Tuesday>:
     141:	54 75 65 00                                         Tue.

00000145 <Monday>:
     145:	4d 6f 6e 00                                         Mon.

00000149 <Sunday>:
     149:	53 75 6e 00                                         Sun.

0000014d <setWheelLength>:
     14d:	57 68 65 65 6c 20 28 6d 6d 29 3a 20 30 30 30 30     Wheel (mm): 0000
	...

0000015e <settings>:
     15e:	53 65 74 74 69 6e 67 73 00                          Settings.

00000167 <developerInfo2>:
     167:	32 30 31 38 00                                      2018.

0000016c <developerInfo1>:
     16c:	52 56 20 45 6c 65 63 74 72 6f 6e 69 63 73 00        RV Electronics.

0000017b <developerInfo0>:
     17b:	44 65 76 65 6c 6f 70 65 72 3a 00                    Developer:.

00000186 <GeekSportString>:
     186:	47 65 65 6b 53 70 6f 72 74 00                       GeekSport.

00000190 <weekdaySettingString>:
     190:	57 65 65 6b 64 61 79 20 2d 20 00                    Weekday - .

0000019b <dateSettingString>:
     19b:	44 61 74 65 3a 20 30 30 2e 30 30 2e 30 30 00        Date: 00.00.00.

000001aa <timeSettingString>:
     1aa:	54 69 6d 65 3a 20 30 30 3a 30 30 00                 Time: 00:00.

000001b6 <LCD_Nokia_MediumFont12x16>:
     1b6:	00 00 00 80 80 80 80 80 80 00 00 00 00 00 01 03     ................
     1c6:	03 03 03 03 03 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     1de:	00 c0 c0 00 00 00 00 00 00 00 02 86 86 86 86 86     ................
     1ee:	86 02 00 00 00 00 81 c3 c3 c3 c3 c3 c3 81 00 00     ................
     1fe:	00 fc 7a 06 06 06 06 06 06 7a fc 00 00 7e bc c0     ..z......z...~..
     20e:	c0 c0 c0 c0 c0 bc 7e 00 00 00 00 00 00 00 00 00     ......~.........
     21e:	00 78 fc 00 00 00 00 00 00 00 00 00 00 3c 7e 00     .x...........<~.
     22e:	00 00 02 86 86 86 86 86 86 7a fc 00 00 7e bd c3     .........z...~..
     23e:	c3 c3 c3 c3 c3 81 00 00 00 00 02 86 86 86 86 86     ................
     24e:	86 7a fc 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     .z............~.
     25e:	00 fc 78 80 80 80 80 80 80 78 fc 00 00 00 01 03     ..x......x......
     26e:	03 03 03 03 03 3d 7e 00 00 fc 7a 86 86 86 86 86     .....=~...z.....
     27e:	86 02 00 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     ..............~.
     28e:	00 fc 7a 86 86 86 86 86 86 02 00 00 00 7e bd c3     ..z..........~..
     29e:	c3 c3 c3 c3 c3 bd 7e 00 00 00 02 06 06 06 06 06     ......~.........
     2ae:	06 7a fc 00 00 00 00 00 00 00 00 00 00 3c 7e 00     .z...........<~.
     2be:	00 fc 7a 86 86 86 86 86 86 7a fc 00 00 7e bd c3     ..z......z...~..
     2ce:	c3 c3 c3 c3 c3 bd 7e 00 00 fc 7a 86 86 86 86 86     ......~...z.....
     2de:	86 7a fc 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     .z............~.
     2ee:	00 00 00 00 7c 7c 7c 7c 00 00 00 00 00 00 00 00     ....||||........
     2fe:	3e 3e 3e 3e 00 00 00 00                             >>>>....

00000306 <LCD_Nokia_SmallFont6x8>:
	...
     30e:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
     31e:	00 24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 55     .$*.*..#..db.6IU
     32e:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
     33e:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     34e:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
     35e:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     36e:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     37e:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     38e:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     39e:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     3ae:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     3be:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     3ce:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     3de:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     3ee:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     3fe:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     40e:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     41e:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     42e:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     43e:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     44e:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     45e:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     46e:	aa 55 aa 55 aa 55 00 00 41 41 7f 00 00 04 02 01     .U.U.U..AA......
     47e:	02 04 00 40 40 40 40 40 00 00 03 05 00 00 00 20     ...@@@@@....... 
     48e:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     49e:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     4ae:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     4be:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     4ce:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     4de:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     4ee:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     4fe:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     50e:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     51e:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 10 7c 82 00     ...|.DdTLD...|..
     52e:	00 00 00 ff 00 00 00 00 82 7c 10 00 00 00 06 09     .........|......
     53e:	09 06                                               ..

00000540 <LCD_Nokia_ASCII_Charset5>:
     540:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     550:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     560:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     570:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     580:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     590:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     5a0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     5b0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     5c0:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     5d0:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     5e0:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     5f0:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     600:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     610:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     620:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     630:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     640:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     650:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     660:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     670:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     680:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     690:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     6a0:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     6b0:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     6c0:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     6d0:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     6e0:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     6f0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     700:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     710:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

00000720 <__c.2686>:
     720:	30 30 00                                            00.

00000723 <dstString>:
     723:	44 73 74 3a 20 00                                   Dst: .

00000729 <averageVelocityString>:
     729:	41 76 65 3a 20 00                                   Ave: .

0000072f <maxVelocityString>:
     72f:	4d 61 78 3a 20 00                                   Max: .

00000735 <timeString>:
     735:	54 69 6d 65 3a 20 00                                Time: .

0000073c <odoString>:
     73c:	4f 64 6f 3a 20 00                                   Odo: .

00000742 <kmh>:
     742:	20 6b 6d 2f 68 00                                    km/h.

00000748 <km>:
     748:	20 6b 6d 00                                          km.

0000074c <setWheelLength>:
     74c:	57 68 65 65 6c 20 28 6d 6d 29 3a 20 30 30 30 30     Wheel (mm): 0000
	...

0000075e <__ctors_end>:
     75e:	11 24       	eor	r1, r1
     760:	1f be       	out	0x3f, r1	; 63
     762:	cf ef       	ldi	r28, 0xFF	; 255
     764:	d8 e0       	ldi	r29, 0x08	; 8
     766:	de bf       	out	0x3e, r29	; 62
     768:	cd bf       	out	0x3d, r28	; 61

0000076a <__do_copy_data>:
     76a:	11 e0       	ldi	r17, 0x01	; 1
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b1 e0       	ldi	r27, 0x01	; 1
     770:	e8 e8       	ldi	r30, 0x88	; 136
     772:	f9 e2       	ldi	r31, 0x29	; 41
     774:	02 c0       	rjmp	.+4      	; 0x77a <__do_copy_data+0x10>
     776:	05 90       	lpm	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	a0 33       	cpi	r26, 0x30	; 48
     77c:	b1 07       	cpc	r27, r17
     77e:	d9 f7       	brne	.-10     	; 0x776 <__do_copy_data+0xc>

00000780 <__do_clear_bss>:
     780:	22 e0       	ldi	r18, 0x02	; 2
     782:	a0 e3       	ldi	r26, 0x30	; 48
     784:	b1 e0       	ldi	r27, 0x01	; 1
     786:	01 c0       	rjmp	.+2      	; 0x78a <.do_clear_bss_start>

00000788 <.do_clear_bss_loop>:
     788:	1d 92       	st	X+, r1

0000078a <.do_clear_bss_start>:
     78a:	a6 3d       	cpi	r26, 0xD6	; 214
     78c:	b2 07       	cpc	r27, r18
     78e:	e1 f7       	brne	.-8      	; 0x788 <.do_clear_bss_loop>
     790:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <main>
     794:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <_exit>

00000798 <__bad_interrupt>:
     798:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000079c <BLuetooth_LCD_Nokia_Main>:
		default:	break;
	}
}

void BLuetooth_LCD_Nokia_Main (void)
{
     79c:	cf 93       	push	r28
	static bool Bluetooth_LastState = false;
	
	switch(Bluetooth_Mode)
     79e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <Bluetooth_Mode>
     7a2:	88 23       	and	r24, r24
     7a4:	09 f4       	brne	.+2      	; 0x7a8 <BLuetooth_LCD_Nokia_Main+0xc>
     7a6:	45 c0       	rjmp	.+138    	; 0x832 <BLuetooth_LCD_Nokia_Main+0x96>
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	e1 f5       	brne	.+120    	; 0x824 <BLuetooth_LCD_Nokia_Main+0x88>
			break;
		}
		
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
     7ac:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			
			Buttons_SetPressed = false;
     7b0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <Buttons_SetPressed>
			while (!Buttons_SetPressed)
     7b4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Buttons_SetPressed>
     7b8:	81 11       	cpse	r24, r1
     7ba:	31 c0       	rjmp	.+98     	; 0x81e <BLuetooth_LCD_Nokia_Main+0x82>
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
     7bc:	c1 e0       	ldi	r28, 0x01	; 1
     7be:	0e c0       	rjmp	.+28     	; 0x7dc <BLuetooth_LCD_Nokia_Main+0x40>
				LCD_Nokia_SetPixelPosition(0, 4);
				LCD_Nokia_Send6CharString_P((int8_t *) bluetoothString);
				
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
     7c0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     7c4:	88 23       	and	r24, r24
     7c6:	81 f1       	breq	.+96     	; 0x828 <BLuetooth_LCD_Nokia_Main+0x8c>
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOnString);
     7c8:	88 eb       	ldi	r24, 0xB8	; 184
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
						Bluetooth_Off();
						Bluetooth_LastState = false;
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
				}
				LCD_Nokia_UpdateFullScreen();
     7d0:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetPressed = false;
			while (!Buttons_SetPressed)
     7d4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Buttons_SetPressed>
     7d8:	81 11       	cpse	r24, r1
     7da:	21 c0       	rjmp	.+66     	; 0x81e <BLuetooth_LCD_Nokia_Main+0x82>
			{
				LCD_Nokia_SetPixelPosition(0, 4);
     7dc:	64 e0       	ldi	r22, 0x04	; 4
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) bluetoothString);
     7e4:	8b eb       	ldi	r24, 0xBB	; 187
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				
				if (Bluetooth_State)
     7ec:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Bluetooth_State>
     7f0:	81 11       	cpse	r24, r1
     7f2:	e6 cf       	rjmp	.-52     	; 0x7c0 <BLuetooth_LCD_Nokia_Main+0x24>
// 					LCD_Nokia_SetPixelPosition(45, 0);
// 					LCD_Nokia_Put6Symbol_P(GeekSportSymbols[1]);
				}
				else
				{
					if (Bluetooth_LastState)
     7f4:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__data_end>
     7f8:	88 23       	and	r24, r24
     7fa:	39 f0       	breq	.+14     	; 0x80a <BLuetooth_LCD_Nokia_Main+0x6e>
	USART_Init();
}

void Bluetooth_Off (void)
{
	UCSR0B &= ~(1 << RXCIE0 | 1 << RXEN0 | 1 << TXEN0);									//	Turn off transceiver, receiver; disable Rx Complete Interrupt (when there are unread data in the receive buffer detected)
     7fc:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     800:	87 76       	andi	r24, 0x67	; 103
     802:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				else
				{
					if (Bluetooth_LastState)
					{
						Bluetooth_Off();
						Bluetooth_LastState = false;
     806:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
     80a:	84 eb       	ldi	r24, 0xB4	; 180
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				}
				LCD_Nokia_UpdateFullScreen();
     812:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetPressed = false;
			while (!Buttons_SetPressed)
     816:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Buttons_SetPressed>
     81a:	88 23       	and	r24, r24
     81c:	f9 f2       	breq	.-66     	; 0x7dc <BLuetooth_LCD_Nokia_Main+0x40>
			break;
		}
		
		default:	break;
	}
     81e:	cf 91       	pop	r28
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
				}
				LCD_Nokia_UpdateFullScreen();
			}
			
			LCD_Nokia_ClearBuffer();
     820:	0c 94 85 09 	jmp	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			break;
		}
		
		default:	break;
	}
     824:	cf 91       	pop	r28
     826:	08 95       	ret
int8_t Bluetooth_ReceiveBuffer[BLUETOOTH_BUFFER_SIZE] = {0};


void Bluetooth_On (void)
{
	USART_Init();
     828:	0e 94 cb 13 	call	0x2796	; 0x2796 <USART_Init>
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
     82c:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <__data_end>
     830:	cb cf       	rjmp	.-106    	; 0x7c8 <BLuetooth_LCD_Nokia_Main+0x2c>
	
	switch(Bluetooth_Mode)
	{
		case BLUETOOTH_VIEW_MESSAGE_MODE:
		{
			LCD_Nokia_SetPixelPosition(0, 0);
     832:	60 e0       	ldi	r22, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString(Bluetooth_ReceiveBuffer);
     83a:	81 e3       	ldi	r24, 0x31	; 49
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <LCD_Nokia_Send6CharString>
			break;
		}
		
		default:	break;
	}
     842:	cf 91       	pop	r28
	{
		case BLUETOOTH_VIEW_MESSAGE_MODE:
		{
			LCD_Nokia_SetPixelPosition(0, 0);
			LCD_Nokia_Send6CharString(Bluetooth_ReceiveBuffer);
			LCD_Nokia_UpdateFullScreen();
     844:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>

00000848 <Buttons_Init>:
	return ((pins & (1 << pin)));
}

void Buttons_IO_Init (void)
{
	BUTTONS_DDR_1 &= ~(1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN);
     848:	87 b1       	in	r24, 0x07	; 7
     84a:	83 7f       	andi	r24, 0xF3	; 243
     84c:	87 b9       	out	0x07, r24	; 7
	BUTTONS_DDR_2 &= ~(1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN);
     84e:	8a b1       	in	r24, 0x0a	; 10
     850:	8f 76       	andi	r24, 0x6F	; 111
     852:	8a b9       	out	0x0a, r24	; 10
	BUTTONS_PORT_1 |= 1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN;
     854:	88 b1       	in	r24, 0x08	; 8
     856:	8c 60       	ori	r24, 0x0C	; 12
     858:	88 b9       	out	0x08, r24	; 8
	BUTTONS_PORT_2 |= 1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN;
     85a:	8b b1       	in	r24, 0x0b	; 11
     85c:	80 69       	ori	r24, 0x90	; 144
     85e:	8b b9       	out	0x0b, r24	; 11
}

void Buttons_Init (void)
{
	Buttons_IO_Init();
	TCCR0A |= 1 << WGM01;																		//	Set CTC mode for button's state polling and set LCD LED pin
     860:	84 b5       	in	r24, 0x24	; 36
     862:	82 60       	ori	r24, 0x02	; 2
     864:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS02 | 0 << CS01 | 0 << CS00;												//	Set Timer 0 Prescaler = F_CPU / 256
     866:	85 b5       	in	r24, 0x25	; 37
     868:	84 60       	ori	r24, 0x04	; 4
     86a:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 1 << OCIE0A;																		//	Enable Interrupts on compare
     86c:	ee e6       	ldi	r30, 0x6E	; 110
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	80 81       	ld	r24, Z
     872:	82 60       	ori	r24, 0x02	; 2
     874:	80 83       	st	Z, r24
	OCR0A = (BUTTONS_DELAY_US / BUTTONS_PRESCALER);												//	Set OCR value()
     876:	8b e3       	ldi	r24, 0x3B	; 59
     878:	87 bd       	out	0x27, r24	; 39
     87a:	08 95       	ret

0000087c <__vector_14>:
}


ISR (TIMER0_COMPA_vect)													//	Button's state polling
{
     87c:	1f 92       	push	r1
     87e:	0f 92       	push	r0
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	0f 92       	push	r0
     884:	11 24       	eor	r1, r1
     886:	2f 93       	push	r18
     888:	3f 93       	push	r19
     88a:	4f 93       	push	r20
     88c:	5f 93       	push	r21
     88e:	6f 93       	push	r22
     890:	7f 93       	push	r23
     892:	8f 93       	push	r24
     894:	9f 93       	push	r25
     896:	af 93       	push	r26
     898:	bf 93       	push	r27
     89a:	ef 93       	push	r30
     89c:	ff 93       	push	r31
	uint8_t mode = GeekSport_Mode;
     89e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <GeekSport_Mode>
	
	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_1_PIN)))							//	Mode button
     8a2:	32 99       	sbic	0x06, 2	; 6
     8a4:	38 c0       	rjmp	.+112    	; 0x916 <__stack+0x17>
	{
		if (!Buttons_Button1WasPushed)
     8a6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <Buttons_Button1WasPushed>
     8aa:	99 23       	and	r25, r25
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <__vector_14+0x34>
     8ae:	58 c0       	rjmp	.+176    	; 0x960 <__stack+0x61>
	}
	else	Buttons_Button1WasPushed = false;

//	###########################################################################################################################################

	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_2_PIN)))							//	Select button
     8b0:	33 99       	sbic	0x06, 3	; 6
     8b2:	2e c0       	rjmp	.+92     	; 0x910 <__stack+0x11>
	{
		if (!Buttons_Button2WasPushed)
     8b4:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <Buttons_Button2WasPushed>
     8b8:	99 23       	and	r25, r25
     8ba:	d9 f1       	breq	.+118    	; 0x932 <__stack+0x33>
	}
	else	Buttons_Button2WasPushed = false;
	
//	###############################################################################################################################################

	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_1_PIN)))							//	Set button
     8bc:	4c 99       	sbic	0x09, 4	; 9
     8be:	25 c0       	rjmp	.+74     	; 0x90a <__stack+0xb>
	{
		if (!Buttons_Button3WasPushed)
     8c0:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Buttons_Button3WasPushed>
     8c4:	99 23       	and	r25, r25
     8c6:	51 f1       	breq	.+84     	; 0x91c <__stack+0x1d>
	}
	else	Buttons_Button3WasPushed = false;
	
//	###############################################################################################################################################
	
	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_2_PIN)))							//	LED Button
     8c8:	4f 99       	sbic	0x09, 7	; 9
     8ca:	1c c0       	rjmp	.+56     	; 0x904 <__stack+0x5>
	{
		if (!Buttons_Button4WasPushed)
     8cc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Buttons_Button4WasPushed>
     8d0:	81 11       	cpse	r24, r1
     8d2:	07 c0       	rjmp	.+14     	; 0x8e2 <__vector_14+0x66>
		{
			Buttons_Button4WasPushed = true;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Buttons_Button4WasPushed>
			
			LCD_NOKIA_LED_PORT ^= 1 << LCD_NOKIA_LED_PIN;																//	Turn on LED
     8da:	9b b1       	in	r25, 0x0b	; 11
     8dc:	80 e4       	ldi	r24, 0x40	; 64
     8de:	89 27       	eor	r24, r25
     8e0:	8b b9       	out	0x0b, r24	; 11
		}
	}
	else	Buttons_Button4WasPushed = false;
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti
			Buttons_Button4WasPushed = true;
			
			LCD_NOKIA_LED_PORT ^= 1 << LCD_NOKIA_LED_PIN;																//	Turn on LED
		}
	}
	else	Buttons_Button4WasPushed = false;
     904:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Buttons_Button4WasPushed>
     908:	ec cf       	rjmp	.-40     	; 0x8e2 <__vector_14+0x66>
				
				default:	break;
			}
		}
	}
	else	Buttons_Button3WasPushed = false;
     90a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Buttons_Button3WasPushed>
     90e:	dc cf       	rjmp	.-72     	; 0x8c8 <__vector_14+0x4c>
				}
			}
			else	Buttons_SetButtonState = true;
		}
	}
	else	Buttons_Button2WasPushed = false;
     910:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Buttons_Button2WasPushed>
     914:	d3 cf       	rjmp	.-90     	; 0x8bc <__vector_14+0x40>
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
			else if (mode == GEEKSPORT_START);
			else	GeekSport_Mode = GEEKSPORT_WATCH_MODE;
		}
	}
	else	Buttons_Button1WasPushed = false;
     916:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Buttons_Button1WasPushed>
     91a:	ca cf       	rjmp	.-108    	; 0x8b0 <__vector_14+0x34>

	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_1_PIN)))							//	Set button
	{
		if (!Buttons_Button3WasPushed)
		{
			Buttons_Button3WasPushed = true;
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <Buttons_Button3WasPushed>
			
			switch (mode)
     922:	83 30       	cpi	r24, 0x03	; 3
     924:	99 f1       	breq	.+102    	; 0x98c <__stack+0x8d>
     926:	10 f0       	brcs	.+4      	; 0x92c <__stack+0x2d>
     928:	84 30       	cpi	r24, 0x04	; 4
     92a:	71 f6       	brne	.-100    	; 0x8c8 <__vector_14+0x4c>
				case GEEKSPORT_WATCH_MODE:
				case GEEKSPORT_SPEEDOMETER_MODE:
				
				case GEEKSPORT_SETTINGS_MENU:
				{
					GeekSport_ChangeSettingDigit();
     92c:	0e 94 8a 07 	call	0xf14	; 0xf14 <GeekSport_ChangeSettingDigit>
					
					break;
     930:	cb cf       	rjmp	.-106    	; 0x8c8 <__vector_14+0x4c>

	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_2_PIN)))							//	Select button
	{
		if (!Buttons_Button2WasPushed)
		{
			Buttons_Button2WasPushed = true;
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Buttons_Button2WasPushed>
			
			if (Buttons_SetButtonState)
     938:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Buttons_SetButtonState>
     93c:	22 23       	and	r18, r18
     93e:	e9 f0       	breq	.+58     	; 0x97a <__stack+0x7b>
			{
				switch (mode)
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	09 f4       	brne	.+2      	; 0x946 <__stack+0x47>
     944:	53 c0       	rjmp	.+166    	; 0x9ec <__stack+0xed>
     946:	d8 f1       	brcs	.+118    	; 0x9be <__stack+0xbf>
     948:	83 30       	cpi	r24, 0x03	; 3
     94a:	79 f1       	breq	.+94     	; 0x9aa <__stack+0xab>
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
     950:	b5 cf       	rjmp	.-150    	; 0x8bc <__vector_14+0x40>
						break;
					}
					
					case GEEKSPORT_SETTINGS_MENU:
					{
						if (Settings_Mode == SETTINGS_INFO_MODE)	Settings_Mode = SETTINGS_MODE;
     952:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Settings_Mode>
     956:	21 11       	cpse	r18, r1
     958:	10 c0       	rjmp	.+32     	; 0x97a <__stack+0x7b>
     95a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Settings_Mode>
     95e:	ae cf       	rjmp	.-164    	; 0x8bc <__vector_14+0x40>
	
	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_1_PIN)))							//	Mode button
	{
		if (!Buttons_Button1WasPushed)
		{
			Buttons_Button1WasPushed = true;
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <Buttons_Button1WasPushed>
			
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	28 0f       	add	r18, r24
     96a:	23 30       	cpi	r18, 0x03	; 3
     96c:	48 f0       	brcs	.+18     	; 0x980 <__stack+0x81>
			else if (mode == GEEKSPORT_START);
     96e:	88 23       	and	r24, r24
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
     972:	9e cf       	rjmp	.-196    	; 0x8b0 <__vector_14+0x34>
			else	GeekSport_Mode = GEEKSPORT_WATCH_MODE;
     974:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <GeekSport_Mode>
     978:	9b cf       	rjmp	.-202    	; 0x8b0 <__vector_14+0x34>
					}
					
					default:	break;
				}
			}
			else	Buttons_SetButtonState = true;
     97a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <Buttons_SetButtonState>
     97e:	9e cf       	rjmp	.-196    	; 0x8bc <__vector_14+0x40>
	{
		if (!Buttons_Button1WasPushed)
		{
			Buttons_Button1WasPushed = true;
			
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
     980:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <GeekSport_Mode>
     984:	9f 5f       	subi	r25, 0xFF	; 255
     986:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <GeekSport_Mode>
     98a:	92 cf       	rjmp	.-220    	; 0x8b0 <__vector_14+0x34>
					break;
				}
				
				case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
				{
					subMode = Bluetooth_Mode;
     98c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <Bluetooth_Mode>
					switch (subMode)
     990:	88 23       	and	r24, r24
     992:	11 f1       	breq	.+68     	; 0x9d8 <__stack+0xd9>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <__stack+0x9b>
     998:	97 cf       	rjmp	.-210    	; 0x8c8 <__vector_14+0x4c>
							break;
						}
						
						case BLUETOOTH_ON_OFF_COMMAND_MODE:
						{
							Bluetooth_State = !Bluetooth_State;
     99a:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <Bluetooth_State>
     99e:	98 27       	eor	r25, r24
     9a0:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <Bluetooth_State>
							Buttons_SetPressed = true;
     9a4:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Buttons_SetPressed>
							
							break;
     9a8:	8f cf       	rjmp	.-226    	; 0x8c8 <__vector_14+0x4c>
						break;
					}
					
					case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
					{
						if (Bluetooth_Mode == BLUETOOTH_VIEW_MESSAGE_MODE)	Bluetooth_Mode++;
     9aa:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Bluetooth_Mode>
     9ae:	91 11       	cpse	r25, r1
     9b0:	27 c0       	rjmp	.+78     	; 0xa00 <__stack+0x101>
     9b2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <Bluetooth_Mode>
     9b6:	9f 5f       	subi	r25, 0xFF	; 255
     9b8:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <Bluetooth_Mode>
     9bc:	7f cf       	rjmp	.-258    	; 0x8bc <__vector_14+0x40>
		{
			Buttons_Button2WasPushed = true;
			
			if (Buttons_SetButtonState)
			{
				switch (mode)
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <__stack+0xc5>
     9c2:	7c cf       	rjmp	.-264    	; 0x8bc <__vector_14+0x40>
				{
					case GEEKSPORT_START:	break;
					
					case GEEKSPORT_WATCH_MODE:
					{
						if (DS1307_Mode < DS1307_TIME_SETTING_MODE)	DS1307_Mode++;
     9c4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <DS1307_Mode>
     9c8:	91 11       	cpse	r25, r1
     9ca:	17 c0       	rjmp	.+46     	; 0x9fa <__stack+0xfb>
     9cc:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <DS1307_Mode>
     9d0:	9f 5f       	subi	r25, 0xFF	; 255
     9d2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <DS1307_Mode>
     9d6:	72 cf       	rjmp	.-284    	; 0x8bc <__vector_14+0x40>
					subMode = Bluetooth_Mode;
					switch (subMode)
					{
						case BLUETOOTH_VIEW_MESSAGE_MODE:
						{
							if (Bluetooth_State)
     9d8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <Bluetooth_State>
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <__stack+0xe3>
     9e0:	73 cf       	rjmp	.-282    	; 0x8c8 <__vector_14+0x4c>
							{
								USART_ReceiveString(Bluetooth_ReceiveBuffer);
     9e2:	81 e3       	ldi	r24, 0x31	; 49
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <USART_ReceiveString>
     9ea:	6e cf       	rjmp	.-292    	; 0x8c8 <__vector_14+0x4c>
						break;
					}
					
					case GEEKSPORT_SPEEDOMETER_MODE:
					{
						if (Speedometer_Mode < (SPEEDOMETER_LAST_MODE - 1))	Speedometer_Mode++;
     9ec:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Speedometer_Mode>
     9f0:	92 30       	cpi	r25, 0x02	; 2
     9f2:	48 f0       	brcs	.+18     	; 0xa06 <__stack+0x107>
						else Speedometer_Mode = SPEEDOMETER_SPEED_MEASUREMENT_MODE;
     9f4:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <Speedometer_Mode>
     9f8:	61 cf       	rjmp	.-318    	; 0x8bc <__vector_14+0x40>
					case GEEKSPORT_START:	break;
					
					case GEEKSPORT_WATCH_MODE:
					{
						if (DS1307_Mode < DS1307_TIME_SETTING_MODE)	DS1307_Mode++;
						else	DS1307_Mode = DS1307_WATCH_MODE;
     9fa:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <DS1307_Mode>
     9fe:	5e cf       	rjmp	.-324    	; 0x8bc <__vector_14+0x40>
					}
					
					case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
					{
						if (Bluetooth_Mode == BLUETOOTH_VIEW_MESSAGE_MODE)	Bluetooth_Mode++;
						else	Bluetooth_Mode = BLUETOOTH_VIEW_MESSAGE_MODE;
     a00:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <Bluetooth_Mode>
     a04:	5b cf       	rjmp	.-330    	; 0x8bc <__vector_14+0x40>
						break;
					}
					
					case GEEKSPORT_SPEEDOMETER_MODE:
					{
						if (Speedometer_Mode < (SPEEDOMETER_LAST_MODE - 1))	Speedometer_Mode++;
     a06:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Speedometer_Mode>
     a0a:	9f 5f       	subi	r25, 0xFF	; 255
     a0c:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Speedometer_Mode>
     a10:	55 cf       	rjmp	.-342    	; 0x8bc <__vector_14+0x40>

00000a12 <DS1307_SendBCDTimeStructData_WithoutSeconds_24>:
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(xPos + 6, yPos);
	
	tempWatchDigit |= GeekSport_SettingsDigit;
	timeRegister = tempWatchDigit;
}
     a12:	80 ed       	ldi	r24, 0xD0	; 208
     a14:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
     a18:	10 92 01 00 	sts	0x0001, r1	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
     a1c:	10 92 02 00 	sts	0x0002, r1	; 0x800002 <__TEXT_REGION_LENGTH__+0x7e0002>
     a20:	e1 e8       	ldi	r30, 0x81	; 129
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	81 81       	ldd	r24, Z+1	; 0x01
     a26:	80 93 03 00 	sts	0x0003, r24	; 0x800003 <__TEXT_REGION_LENGTH__+0x7e0003>
     a2a:	82 81       	ldd	r24, Z+2	; 0x02
     a2c:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
     a30:	83 81       	ldd	r24, Z+3	; 0x03
     a32:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
     a36:	84 81       	ldd	r24, Z+4	; 0x04
     a38:	80 93 06 00 	sts	0x0006, r24	; 0x800006 <__TEXT_REGION_LENGTH__+0x7e0006>
     a3c:	85 81       	ldd	r24, Z+5	; 0x05
     a3e:	80 93 07 00 	sts	0x0007, r24	; 0x800007 <__TEXT_REGION_LENGTH__+0x7e0007>
     a42:	86 81       	ldd	r24, Z+6	; 0x06
     a44:	80 93 08 00 	sts	0x0008, r24	; 0x800008 <__TEXT_REGION_LENGTH__+0x7e0008>
     a48:	69 e0       	ldi	r22, 0x09	; 9
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	0c 94 97 08 	jmp	0x112e	; 0x112e <I2C_MT_TransmitData>

00000a52 <DS1307_ReceiveData>:
     a52:	ef 92       	push	r14
     a54:	ff 92       	push	r15
     a56:	1f 93       	push	r17
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	7c 01       	movw	r14, r24
     a5e:	14 2f       	mov	r17, r20
     a60:	c0 e0       	ldi	r28, 0x00	; 0
     a62:	d0 e0       	ldi	r29, 0x00	; 0
     a64:	80 ed       	ldi	r24, 0xD0	; 208
     a66:	88 83       	st	Y, r24
     a68:	69 83       	std	Y+1, r22	; 0x01
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 97 08 	call	0x112e	; 0x112e <I2C_MT_TransmitData>
     a74:	81 ed       	ldi	r24, 0xD1	; 209
     a76:	88 83       	st	Y, r24
     a78:	61 2f       	mov	r22, r17
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 97 08 	call	0x112e	; 0x112e <I2C_MT_TransmitData>
     a82:	61 2f       	mov	r22, r17
     a84:	c7 01       	movw	r24, r14
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	ff 90       	pop	r15
     a8e:	ef 90       	pop	r14
     a90:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <I2C_MR_ReceiveData>

00000a94 <DS1307_ReceiveTimeData>:
     a94:	8a e7       	ldi	r24, 0x7A	; 122
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <TimeRegPointer+0x1>
     a9c:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <TimeRegPointer>
     aa0:	48 e0       	ldi	r20, 0x08	; 8
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	0e 94 29 05 	call	0xa52	; 0xa52 <DS1307_ReceiveData>
     aa8:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     aac:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     ab0:	80 81       	ld	r24, Z
     ab2:	98 2f       	mov	r25, r24
     ab4:	92 95       	swap	r25
     ab6:	9f 70       	andi	r25, 0x0F	; 15
     ab8:	8f 70       	andi	r24, 0x0F	; 15
     aba:	2a e0       	ldi	r18, 0x0A	; 10
     abc:	92 9f       	mul	r25, r18
     abe:	80 0d       	add	r24, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	80 83       	st	Z, r24
     ac4:	81 81       	ldd	r24, Z+1	; 0x01
     ac6:	98 2f       	mov	r25, r24
     ac8:	92 95       	swap	r25
     aca:	9f 70       	andi	r25, 0x0F	; 15
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	2a e0       	ldi	r18, 0x0A	; 10
     ad0:	92 9f       	mul	r25, r18
     ad2:	80 0d       	add	r24, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	81 83       	std	Z+1, r24	; 0x01
     ad8:	82 81       	ldd	r24, Z+2	; 0x02
     ada:	98 2f       	mov	r25, r24
     adc:	92 95       	swap	r25
     ade:	9f 70       	andi	r25, 0x0F	; 15
     ae0:	8f 70       	andi	r24, 0x0F	; 15
     ae2:	2a e0       	ldi	r18, 0x0A	; 10
     ae4:	92 9f       	mul	r25, r18
     ae6:	80 0d       	add	r24, r0
     ae8:	11 24       	eor	r1, r1
     aea:	82 83       	std	Z+2, r24	; 0x02
     aec:	83 81       	ldd	r24, Z+3	; 0x03
     aee:	98 2f       	mov	r25, r24
     af0:	92 95       	swap	r25
     af2:	9f 70       	andi	r25, 0x0F	; 15
     af4:	8f 70       	andi	r24, 0x0F	; 15
     af6:	2a e0       	ldi	r18, 0x0A	; 10
     af8:	92 9f       	mul	r25, r18
     afa:	80 0d       	add	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	83 83       	std	Z+3, r24	; 0x03
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	98 2f       	mov	r25, r24
     b04:	92 95       	swap	r25
     b06:	9f 70       	andi	r25, 0x0F	; 15
     b08:	8f 70       	andi	r24, 0x0F	; 15
     b0a:	2a e0       	ldi	r18, 0x0A	; 10
     b0c:	92 9f       	mul	r25, r18
     b0e:	80 0d       	add	r24, r0
     b10:	11 24       	eor	r1, r1
     b12:	84 83       	std	Z+4, r24	; 0x04
     b14:	85 81       	ldd	r24, Z+5	; 0x05
     b16:	98 2f       	mov	r25, r24
     b18:	92 95       	swap	r25
     b1a:	9f 70       	andi	r25, 0x0F	; 15
     b1c:	8f 70       	andi	r24, 0x0F	; 15
     b1e:	2a e0       	ldi	r18, 0x0A	; 10
     b20:	92 9f       	mul	r25, r18
     b22:	80 0d       	add	r24, r0
     b24:	11 24       	eor	r1, r1
     b26:	85 83       	std	Z+5, r24	; 0x05
     b28:	86 81       	ldd	r24, Z+6	; 0x06
     b2a:	98 2f       	mov	r25, r24
     b2c:	92 95       	swap	r25
     b2e:	9f 70       	andi	r25, 0x0F	; 15
     b30:	8f 70       	andi	r24, 0x0F	; 15
     b32:	2a e0       	ldi	r18, 0x0A	; 10
     b34:	92 9f       	mul	r25, r18
     b36:	80 0d       	add	r24, r0
     b38:	11 24       	eor	r1, r1
     b3a:	86 83       	std	Z+6, r24	; 0x06
     b3c:	08 95       	ret

00000b3e <DS1307_Settings>:



void DS1307_Settings (void)
{
     b3e:	cf 93       	push	r28
// 	DS1307_LCD_Nokia_SetTimeRegisterInline(54, 30, TimeRegistersTransmitBuffer.month);
// 	DS1307_LCD_Nokia_SetTimeRegisterInline(72, 30, TimeRegistersTransmitBuffer.year);
 	
	 uint8_t tempWatchDigit;
	
	GeekSport_SettingsDigit = 0;
     b40:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     b44:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	Buttons_SetButtonState = false;
     b48:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	while (!Buttons_SetButtonState)
     b4c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     b50:	81 11       	cpse	r24, r1
     b52:	12 c0       	rjmp	.+36     	; 0xb78 <DS1307_Settings+0x3a>
	{
		if (GeekSport_SettingsDigit > 2)	GeekSport_SettingsDigit = 0;
     b54:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     b58:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     b5c:	03 97       	sbiw	r24, 0x03	; 3
     b5e:	20 f0       	brcs	.+8      	; 0xb68 <DS1307_Settings+0x2a>
     b60:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     b64:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateScreen(37, 21);
     b68:	65 e1       	ldi	r22, 0x15	; 21
     b6a:	85 e2       	ldi	r24, 0x25	; 37
     b6c:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
 	
	 uint8_t tempWatchDigit;
	
	GeekSport_SettingsDigit = 0;
	Buttons_SetButtonState = false;
	while (!Buttons_SetButtonState)
     b70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     b74:	88 23       	and	r24, r24
     b76:	71 f3       	breq	.-36     	; 0xb54 <DS1307_Settings+0x16>
	{
		if (GeekSport_SettingsDigit > 2)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateScreen(37, 21);
	}
	Buttons_SetButtonState = false;
     b78:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     b7c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     b80:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     b84:	c8 2f       	mov	r28, r24
     b86:	c2 95       	swap	r28
     b88:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     b8a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     b8e:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(43, 21);
     b92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     b96:	81 11       	cpse	r24, r1
     b98:	08 c0       	rjmp	.+16     	; 0xbaa <DS1307_Settings+0x6c>
     b9a:	65 e1       	ldi	r22, 0x15	; 21
     b9c:	8b e2       	ldi	r24, 0x2B	; 43
     b9e:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     ba2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     ba6:	88 23       	and	r24, r24
     ba8:	c1 f3       	breq	.-16     	; 0xb9a <DS1307_Settings+0x5c>
	
	Buttons_SetButtonState = false;
     baa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     bae:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     bb2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.hours = tempWatchDigit;										//	Set hours
     bb6:	8c 2b       	or	r24, r28
     bb8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <TimeRegistersTransmitBuffer+0x2>
	
	GeekSport_SettingsDigit = 0;
     bbc:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     bc0:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     bc4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     bc8:	81 11       	cpse	r24, r1
     bca:	12 c0       	rjmp	.+36     	; 0xbf0 <DS1307_Settings+0xb2>
	{
		if (GeekSport_SettingsDigit > 5)	GeekSport_SettingsDigit = 0;
     bcc:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     bd0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     bd4:	06 97       	sbiw	r24, 0x06	; 6
     bd6:	20 f0       	brcs	.+8      	; 0xbe0 <DS1307_Settings+0xa2>
     bd8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     bdc:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateScreen(55, 21);
     be0:	65 e1       	ldi	r22, 0x15	; 21
     be2:	87 e3       	ldi	r24, 0x37	; 55
     be4:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.hours = tempWatchDigit;										//	Set hours
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     be8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     bec:	88 23       	and	r24, r24
     bee:	71 f3       	breq	.-36     	; 0xbcc <DS1307_Settings+0x8e>
	{
		if (GeekSport_SettingsDigit > 5)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateScreen(55, 21);
	}
	Buttons_SetButtonState = false;
     bf0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     bf4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     bf8:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     bfc:	c8 2f       	mov	r28, r24
     bfe:	c2 95       	swap	r28
     c00:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     c02:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c06:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(61, 21);
     c0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c0e:	81 11       	cpse	r24, r1
     c10:	08 c0       	rjmp	.+16     	; 0xc22 <DS1307_Settings+0xe4>
     c12:	65 e1       	ldi	r22, 0x15	; 21
     c14:	8d e3       	ldi	r24, 0x3D	; 61
     c16:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     c1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c1e:	88 23       	and	r24, r24
     c20:	c1 f3       	breq	.-16     	; 0xc12 <DS1307_Settings+0xd4>
	
	Buttons_SetButtonState = false;
     c22:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     c26:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     c2a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.minutes = tempWatchDigit;									//	Set minutes
     c2e:	8c 2b       	or	r24, r28
     c30:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <TimeRegistersTransmitBuffer+0x1>
	
	GeekSport_SettingsDigit = 0;
     c34:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c38:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     c3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c40:	81 11       	cpse	r24, r1
     c42:	12 c0       	rjmp	.+36     	; 0xc68 <DS1307_Settings+0x12a>
	{
		if (GeekSport_SettingsDigit > 3)	GeekSport_SettingsDigit = 0;
     c44:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     c48:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c4c:	04 97       	sbiw	r24, 0x04	; 4
     c4e:	20 f0       	brcs	.+8      	; 0xc58 <DS1307_Settings+0x11a>
     c50:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c54:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateScreen(37, 30);
     c58:	6e e1       	ldi	r22, 0x1E	; 30
     c5a:	85 e2       	ldi	r24, 0x25	; 37
     c5c:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.minutes = tempWatchDigit;									//	Set minutes
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     c60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c64:	88 23       	and	r24, r24
     c66:	71 f3       	breq	.-36     	; 0xc44 <DS1307_Settings+0x106>
	{
		if (GeekSport_SettingsDigit > 3)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateScreen(37, 30);
	}
	Buttons_SetButtonState = false;
     c68:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     c6c:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     c70:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c74:	c8 2f       	mov	r28, r24
     c76:	c2 95       	swap	r28
     c78:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     c7a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     c7e:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(43, 30);
     c82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c86:	81 11       	cpse	r24, r1
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <DS1307_Settings+0x15c>
     c8a:	6e e1       	ldi	r22, 0x1E	; 30
     c8c:	8b e2       	ldi	r24, 0x2B	; 43
     c8e:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     c92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c96:	88 23       	and	r24, r24
     c98:	c1 f3       	breq	.-16     	; 0xc8a <DS1307_Settings+0x14c>
	
	Buttons_SetButtonState = false;
     c9a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     c9e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     ca2:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.date = tempWatchDigit;										//	Set	date
     ca6:	8c 2b       	or	r24, r28
     ca8:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <TimeRegistersTransmitBuffer+0x4>
	
	GeekSport_SettingsDigit = 0;
     cac:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     cb0:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     cb4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     cb8:	81 11       	cpse	r24, r1
     cba:	12 c0       	rjmp	.+36     	; 0xce0 <DS1307_Settings+0x1a2>
	{
		if (GeekSport_SettingsDigit > 1)	GeekSport_SettingsDigit = 0;
     cbc:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     cc0:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     cc4:	02 97       	sbiw	r24, 0x02	; 2
     cc6:	20 f0       	brcs	.+8      	; 0xcd0 <DS1307_Settings+0x192>
     cc8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     ccc:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateScreen(55, 30);
     cd0:	6e e1       	ldi	r22, 0x1E	; 30
     cd2:	87 e3       	ldi	r24, 0x37	; 55
     cd4:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.date = tempWatchDigit;										//	Set	date
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     cd8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     cdc:	88 23       	and	r24, r24
     cde:	71 f3       	breq	.-36     	; 0xcbc <DS1307_Settings+0x17e>
	{
		if (GeekSport_SettingsDigit > 1)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateScreen(55, 30);
	}
	Buttons_SetButtonState = false;
     ce0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     ce4:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     ce8:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     cec:	c8 2f       	mov	r28, r24
     cee:	c2 95       	swap	r28
     cf0:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     cf2:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     cf6:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(61, 30);
     cfa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     cfe:	81 11       	cpse	r24, r1
     d00:	08 c0       	rjmp	.+16     	; 0xd12 <DS1307_Settings+0x1d4>
     d02:	6e e1       	ldi	r22, 0x1E	; 30
     d04:	8d e3       	ldi	r24, 0x3D	; 61
     d06:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     d0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d0e:	88 23       	and	r24, r24
     d10:	c1 f3       	breq	.-16     	; 0xd02 <DS1307_Settings+0x1c4>
	
	Buttons_SetButtonState = false;
     d12:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     d16:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     d1a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.month = tempWatchDigit;											//	Set	month
     d1e:	8c 2b       	or	r24, r28
     d20:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <TimeRegistersTransmitBuffer+0x5>
	
	GeekSport_SettingsDigit = 0;
     d24:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     d28:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(73, 30);
     d2c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d30:	81 11       	cpse	r24, r1
     d32:	08 c0       	rjmp	.+16     	; 0xd44 <DS1307_Settings+0x206>
     d34:	6e e1       	ldi	r22, 0x1E	; 30
     d36:	89 e4       	ldi	r24, 0x49	; 73
     d38:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     d3c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d40:	88 23       	and	r24, r24
     d42:	c1 f3       	breq	.-16     	; 0xd34 <DS1307_Settings+0x1f6>
	
	Buttons_SetButtonState = false;
     d44:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     d48:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     d4c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     d50:	c8 2f       	mov	r28, r24
     d52:	c2 95       	swap	r28
     d54:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     d56:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     d5a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(79, 30);
     d5e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d62:	81 11       	cpse	r24, r1
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <DS1307_Settings+0x238>
     d66:	6e e1       	ldi	r22, 0x1E	; 30
     d68:	8f e4       	ldi	r24, 0x4F	; 79
     d6a:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
     d6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d72:	88 23       	and	r24, r24
     d74:	c1 f3       	breq	.-16     	; 0xd66 <DS1307_Settings+0x228>
	
	Buttons_SetButtonState = false;
     d76:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     d7a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     d7e:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.year = tempWatchDigit;											//	Set	year
     d82:	8c 2b       	or	r24, r28
     d84:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <TimeRegistersTransmitBuffer+0x6>
	

	GeekSport_SettingsDigit = 0;
     d88:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     d8c:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     d90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d94:	81 11       	cpse	r24, r1
     d96:	20 c0       	rjmp	.+64     	; 0xdd8 <DS1307_Settings+0x29a>
	{
		if (GeekSport_SettingsDigit > 6)	GeekSport_SettingsDigit = 0;
     d98:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     d9c:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     da0:	07 97       	sbiw	r24, 0x07	; 7
     da2:	20 f0       	brcs	.+8      	; 0xdac <DS1307_Settings+0x26e>
     da4:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     da8:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
		LCD_Nokia_SetPixelPosition(60, 39);
     dac:	67 e2       	ldi	r22, 0x27	; 39
     dae:	8c e3       	ldi	r24, 0x3C	; 60
     db0:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
		LCD_Nokia_Send6CharString_P((int8_t *) WeekdaysPointer[GeekSport_SettingsDigit]);
     db4:	e0 91 d3 01 	lds	r30, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     db8:	f0 91 d4 01 	lds	r31, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	e3 5e       	subi	r30, 0xE3	; 227
     dc2:	fe 4f       	sbci	r31, 0xFE	; 254
     dc4:	80 81       	ld	r24, Z
     dc6:	91 81       	ldd	r25, Z+1	; 0x01
     dc8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
		LCD_Nokia_UpdateFullScreen();
     dcc:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.year = tempWatchDigit;											//	Set	year
	

	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     dd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     dd4:	88 23       	and	r24, r24
     dd6:	01 f3       	breq	.-64     	; 0xd98 <DS1307_Settings+0x25a>
		LCD_Nokia_SetPixelPosition(60, 39);
		LCD_Nokia_Send6CharString_P((int8_t *) WeekdaysPointer[GeekSport_SettingsDigit]);
		LCD_Nokia_UpdateFullScreen();
	}
	
	tempWatchDigit = GeekSport_SettingsDigit + 1;
     dd8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     ddc:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.weekday = tempWatchDigit;										//	Set	the day of week
     de0:	8f 5f       	subi	r24, 0xFF	; 255
     de2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <TimeRegistersTransmitBuffer+0x3>
	
	DS1307_SendBCDTimeStructData_WithoutSeconds_24();
}
     de6:	cf 91       	pop	r28
	}
	
	tempWatchDigit = GeekSport_SettingsDigit + 1;
	TimeRegistersTransmitBuffer.weekday = tempWatchDigit;										//	Set	the day of week
	
	DS1307_SendBCDTimeStructData_WithoutSeconds_24();
     de8:	0c 94 09 05 	jmp	0xa12	; 0xa12 <DS1307_SendBCDTimeStructData_WithoutSeconds_24>

00000dec <DS1307_LCD_Nokia_Main>:
}

void DS1307_LCD_Nokia_Main (void)
{
     dec:	0f 93       	push	r16
	switch (DS1307_Mode)
     dee:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <DS1307_Mode>
     df2:	88 23       	and	r24, r24
     df4:	61 f1       	breq	.+88     	; 0xe4e <DS1307_LCD_Nokia_Main+0x62>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	41 f5       	brne	.+80     	; 0xe4a <DS1307_LCD_Nokia_Main+0x5e>
			
			break;
		}
		case DS1307_TIME_SETTING_MODE:
		{
			LCD_Nokia_ClearBuffer();
     dfa:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			
			LCD_Nokia_SetPixelPosition(0, 0);
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) timeSettings);
     e06:	8a ec       	ldi	r24, 0xCA	; 202
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 21);
     e0e:	65 e1       	ldi	r22, 0x15	; 21
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) timeSettingString);
     e16:	83 ef       	ldi	r24, 0xF3	; 243
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 30);
     e1e:	6e e1       	ldi	r22, 0x1E	; 30
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dateSettingString);
     e26:	84 ee       	ldi	r24, 0xE4	; 228
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 39);
     e2e:	67 e2       	ldi	r22, 0x27	; 39
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) weekdaySettingString);
     e36:	89 ed       	ldi	r24, 0xD9	; 217
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			DS1307_Settings();
     e3e:	0e 94 9f 05 	call	0xb3e	; 0xb3e <DS1307_Settings>
			
			LCD_Nokia_ClearBuffer();
     e42:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			DS1307_Mode = DS1307_WATCH_MODE;
     e46:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <DS1307_Mode>
			break;
		}
		
		default:	break;
	}
}
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret
{
	switch (DS1307_Mode)
	{
		case DS1307_WATCH_MODE:
		{
			DS1307_ReceiveTimeData();
     e4e:	0e 94 4a 05 	call	0xa94	; 0xa94 <DS1307_ReceiveTimeData>
			
			LCD_Nokia_DrawUnfilledRectangle(0, 7, 83, 47, 4);
     e52:	04 e0       	ldi	r16, 0x04	; 4
     e54:	2f e2       	ldi	r18, 0x2F	; 47
     e56:	43 e5       	ldi	r20, 0x53	; 83
     e58:	67 e0       	ldi	r22, 0x07	; 7
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <LCD_Nokia_DrawUnfilledRectangle>
			LCD_Nokia_SetPixelPosition(12, 12);
     e60:	6c e0       	ldi	r22, 0x0C	; 12
     e62:	8c e0       	ldi	r24, 0x0C	; 12
     e64:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send12Integer(TimeRegPointer->hours);
     e68:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     e6c:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     e70:	62 81       	ldd	r22, Z+2	; 0x02
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <LCD_Nokia_Send12Integer>
			LCD_Nokia_Put12Char(':');
     e7c:	8a e3       	ldi	r24, 0x3A	; 58
     e7e:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
			LCD_Nokia_Send12Integer(TimeRegPointer->minutes);
     e82:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     e86:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     e8a:	61 81       	ldd	r22, Z+1	; 0x01
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <LCD_Nokia_Send12Integer>
			LCD_Nokia_SetPixelPosition(6, 30);
     e96:	6e e1       	ldi	r22, 0x1E	; 30
     e98:	86 e0       	ldi	r24, 0x06	; 6
     e9a:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) WeekdaysPointer[TimeRegPointer->weekday - 1]);
     e9e:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     ea2:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     ea6:	e3 81       	ldd	r30, Z+3	; 0x03
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e5 5e       	subi	r30, 0xE5	; 229
     eb0:	fe 4f       	sbci	r31, 0xFE	; 254
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6CharString_P((int8_t* ) PSTR (", "));
     eba:	87 ec       	ldi	r24, 0xC7	; 199
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6CharString_P((int8_t* ) MonthsPointer[TimeRegPointer->month - 1]);
     ec2:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     ec6:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     eca:	e5 81       	ldd	r30, Z+5	; 0x05
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	ed 5f       	subi	r30, 0xFD	; 253
     ed4:	fe 4f       	sbci	r31, 0xFE	; 254
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Put6Char(' ');
     ede:	80 e2       	ldi	r24, 0x20	; 32
     ee0:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
			LCD_Nokia_Send5Integer(TimeRegPointer->date);
     ee4:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
     ee8:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
     eec:	64 81       	ldd	r22, Z+4	; 0x04
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Nokia_Send5Integer>
			break;
		}
		
		default:	break;
	}
}
     ef8:	0f 91       	pop	r16
			LCD_Nokia_Send6CharString_P((int8_t* ) WeekdaysPointer[TimeRegPointer->weekday - 1]);
			LCD_Nokia_Send6CharString_P((int8_t* ) PSTR (", "));
			LCD_Nokia_Send6CharString_P((int8_t* ) MonthsPointer[TimeRegPointer->month - 1]);
			LCD_Nokia_Put6Char(' ');
			LCD_Nokia_Send5Integer(TimeRegPointer->date);
			LCD_Nokia_UpdateFullScreen();
     efa:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>

00000efe <GeekSport_LCD_Nokia_UpdateScreen>:

volatile uint8_t Settings_Mode = SETTINGS_MODE;//SETTINGS_INFO_MODE;

void GeekSport_LCD_Nokia_UpdateScreen (uint8_t xPos, uint8_t yPos)
{
	LCD_Nokia_SetPixelPosition(xPos, yPos);
     efe:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
	LCD_Nokia_Put5Char((int8_t) (GeekSport_SettingsDigit + ASCII_NULL));
     f02:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     f06:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     f0a:	80 5d       	subi	r24, 0xD0	; 208
     f0c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
	LCD_Nokia_UpdateFullScreen();
     f10:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>

00000f14 <GeekSport_ChangeSettingDigit>:
}

void GeekSport_ChangeSettingDigit (void)
{
	uint8_t tempDigit = GeekSport_SettingsDigit;
     f14:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
     f18:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
	if (tempDigit < 9)	tempDigit++;
     f1c:	89 30       	cpi	r24, 0x09	; 9
     f1e:	38 f4       	brcc	.+14     	; 0xf2e <GeekSport_ChangeSettingDigit+0x1a>
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	90 e0       	ldi	r25, 0x00	; 0
	else	tempDigit = 0;
	GeekSport_SettingsDigit = tempDigit;
     f24:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     f28:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <GeekSport_SettingsDigit>
     f2c:	08 95       	ret
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
     f36:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <GeekSport_SettingsDigit>
     f3a:	08 95       	ret

00000f3c <GeekSport_SettingsMenu>:
}

void GeekSport_SettingsMenu (void)
{
     f3c:	cf 93       	push	r28
	uint8_t mode = Settings_Mode;
     f3e:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <Settings_Mode>
	
	switch (mode)
     f42:	cc 23       	and	r28, r28
     f44:	d1 f1       	breq	.+116    	; 0xfba <GeekSport_SettingsMenu+0x7e>
     f46:	c1 30       	cpi	r28, 0x01	; 1
     f48:	b1 f5       	brne	.+108    	; 0xfb6 <GeekSport_SettingsMenu+0x7a>
			break;
		}
		
		case SETTINGS_MODE:
		{
			LCD_Nokia_ClearBuffer();
     f4a:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			LCD_Nokia_SetPixelPosition(19, 0);
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	83 e1       	ldi	r24, 0x13	; 19
     f52:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) settings);
     f56:	8e e5       	ldi	r24, 0x5E	; 94
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(3, 11);
     f5e:	6b e0       	ldi	r22, 0x0B	; 11
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5CharString_P((int8_t *) setWheelLength);							//	Wheel length setting string
     f66:	8d e4       	ldi	r24, 0x4D	; 77
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 21);
     f6e:	65 e1       	ldi	r22, 0x15	; 21
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) timeSettingString);
     f76:	8a ea       	ldi	r24, 0xAA	; 170
     f78:	91 e0       	ldi	r25, 0x01	; 1
     f7a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 30);
     f7e:	6e e1       	ldi	r22, 0x1E	; 30
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dateSettingString);
     f86:	8b e9       	ldi	r24, 0x9B	; 155
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 39);
     f8e:	67 e2       	ldi	r22, 0x27	; 39
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) weekdaySettingString);
     f96:	80 e9       	ldi	r24, 0x90	; 144
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			Speedometer_Settings();
     f9e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <Speedometer_Settings>
			DS1307_Settings();
     fa2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <DS1307_Settings>
			
			LCD_Nokia_ClearBuffer();
     fa6:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			LCD_Nokia_UpdateFullScreen();
     faa:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
			Settings_Mode = SETTINGS_INFO_MODE;
     fae:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Settings_Mode>
			GeekSport_Mode = GEEKSPORT_WATCH_MODE;
     fb2:	c0 93 8a 01 	sts	0x018A, r28	; 0x80018a <GeekSport_Mode>
			
			break;
		}
	}
	
}
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret
	
	switch (mode)
	{
		case SETTINGS_INFO_MODE:
		{
			LCD_Nokia_SetPixelPosition(20, 2);
     fba:	62 e0       	ldi	r22, 0x02	; 2
     fbc:	84 e1       	ldi	r24, 0x14	; 20
     fbe:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) GeekSportString);
     fc2:	86 e8       	ldi	r24, 0x86	; 134
     fc4:	91 e0       	ldi	r25, 0x01	; 1
     fc6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(2, 12);
     fca:	6c e0       	ldi	r22, 0x0C	; 12
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo0);
     fd2:	8b e7       	ldi	r24, 0x7B	; 123
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(0, 21);
     fda:	65 e1       	ldi	r22, 0x15	; 21
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo1);
     fe2:	8c e6       	ldi	r24, 0x6C	; 108
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(54, 40);
     fea:	68 e2       	ldi	r22, 0x28	; 40
     fec:	86 e3       	ldi	r24, 0x36	; 54
     fee:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo2);
     ff2:	87 e6       	ldi	r24, 0x67	; 103
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			break;
		}
	}
	
}
     ffa:	cf 91       	pop	r28
			LCD_Nokia_SetPixelPosition(0, 21);
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo1);
			LCD_Nokia_SetPixelPosition(54, 40);
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo2);
			
			LCD_Nokia_UpdateFullScreen();
     ffc:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>

00001000 <GeekSport_SetMode>:
	}
	
}

void GeekSport_SetMode (uint8_t mode)
{
    1000:	cf 93       	push	r28
    1002:	c8 2f       	mov	r28, r24
	static uint8_t lastBuffer = GEEKSPORT_START;
	
	switch (mode)
    1004:	82 30       	cpi	r24, 0x02	; 2
    1006:	09 f4       	brne	.+2      	; 0x100a <GeekSport_SetMode+0xa>
    1008:	4c c0       	rjmp	.+152    	; 0x10a2 <GeekSport_SetMode+0xa2>
    100a:	b0 f4       	brcc	.+44     	; 0x1038 <GeekSport_SetMode+0x38>
    100c:	88 23       	and	r24, r24
    100e:	59 f1       	breq	.+86     	; 0x1066 <GeekSport_SetMode+0x66>
    1010:	81 30       	cpi	r24, 0x01	; 1
    1012:	39 f5       	brne	.+78     	; 0x1062 <GeekSport_SetMode+0x62>
			GeekSport_SettingsMenu();
		}
		
		case GEEKSPORT_WATCH_MODE:
		{
			if (GeekSport_LastMode != GEEKSPORT_WATCH_MODE)
    1014:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <GeekSport_LastMode>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	59 f0       	breq	.+22     	; 0x1032 <GeekSport_SetMode+0x32>
			{
				GeekSport_LastMode = GEEKSPORT_WATCH_MODE;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <GeekSport_LastMode>
				if (lastBuffer != GeekSport_LastMode)		//?????????????????????????
    1022:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lastBuffer.2672>
    1026:	81 30       	cpi	r24, 0x01	; 1
    1028:	21 f0       	breq	.+8      	; 0x1032 <GeekSport_SetMode+0x32>
				{
					lastBuffer = mode;
    102a:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <lastBuffer.2672>
					LCD_Nokia_ClearBuffer();
    102e:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			//	Error code
			
			break;
		}
	}
    1032:	cf 91       	pop	r28
				{
					lastBuffer = mode;
					LCD_Nokia_ClearBuffer();
				}
			}
			DS1307_LCD_Nokia_Main();
    1034:	0c 94 f6 06 	jmp	0xdec	; 0xdec <DS1307_LCD_Nokia_Main>

void GeekSport_SetMode (uint8_t mode)
{
	static uint8_t lastBuffer = GEEKSPORT_START;
	
	switch (mode)
    1038:	83 30       	cpi	r24, 0x03	; 3
    103a:	11 f1       	breq	.+68     	; 0x1080 <GeekSport_SetMode+0x80>
    103c:	84 30       	cpi	r24, 0x04	; 4
    103e:	89 f4       	brne	.+34     	; 0x1062 <GeekSport_SetMode+0x62>
			break;
		}
		
		case GEEKSPORT_SETTINGS_MENU:
		{
			if (GeekSport_LastMode != GEEKSPORT_SETTINGS_MENU)
    1040:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <GeekSport_LastMode>
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	51 f0       	breq	.+20     	; 0x105c <GeekSport_SetMode+0x5c>
			{
				GeekSport_LastMode = GEEKSPORT_SETTINGS_MENU;
    1048:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <GeekSport_LastMode>
				if (lastBuffer != GeekSport_LastMode)
    104c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lastBuffer.2672>
    1050:	84 30       	cpi	r24, 0x04	; 4
    1052:	21 f0       	breq	.+8      	; 0x105c <GeekSport_SetMode+0x5c>
				{
					lastBuffer = mode;
    1054:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <lastBuffer.2672>
					LCD_Nokia_ClearBuffer();
    1058:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			//	Error code
			
			break;
		}
	}
    105c:	cf 91       	pop	r28
				{
					lastBuffer = mode;
					LCD_Nokia_ClearBuffer();
				}
			}
			GeekSport_SettingsMenu();
    105e:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <GeekSport_SettingsMenu>
			//	Error code
			
			break;
		}
	}
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret
	
	switch (mode)
	{
		case GEEKSPORT_START:
		{
			if (GeekSport_LastMode != GEEKSPORT_START)//GEEKSPORT_WATCH_MODE)
    1066:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <GeekSport_LastMode>
    106a:	88 23       	and	r24, r24
    106c:	31 f0       	breq	.+12     	; 0x107a <GeekSport_SetMode+0x7a>
			{
				GeekSport_LastMode = GEEKSPORT_START;//GEEKSPORT_WATCH_MODE;
    106e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <GeekSport_LastMode>
				if (lastBuffer != GeekSport_LastMode)		//?????????????????????????
    1072:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lastBuffer.2672>
    1076:	81 11       	cpse	r24, r1
    1078:	25 c0       	rjmp	.+74     	; 0x10c4 <GeekSport_SetMode+0xc4>
				{
					lastBuffer = mode;
					LCD_Nokia_ClearBuffer();
				}
			}
			GeekSport_SettingsMenu();
    107a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GeekSport_SettingsMenu>
    107e:	ca cf       	rjmp	.-108    	; 0x1014 <GeekSport_SetMode+0x14>
			break;
		}
		
		case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
		{
			if (GeekSport_LastMode != GEEKSPORT_BLUETOOTH_SCREEN_MODE)
    1080:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <GeekSport_LastMode>
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	51 f0       	breq	.+20     	; 0x109c <GeekSport_SetMode+0x9c>
			{
				GeekSport_LastMode = GEEKSPORT_BLUETOOTH_SCREEN_MODE;
    1088:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <GeekSport_LastMode>
				if (lastBuffer != GeekSport_LastMode)
    108c:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lastBuffer.2672>
    1090:	83 30       	cpi	r24, 0x03	; 3
    1092:	21 f0       	breq	.+8      	; 0x109c <GeekSport_SetMode+0x9c>
				{
					lastBuffer = mode;
    1094:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <lastBuffer.2672>
					LCD_Nokia_ClearBuffer();
    1098:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			//	Error code
			
			break;
		}
	}
    109c:	cf 91       	pop	r28
				{
					lastBuffer = mode;
					LCD_Nokia_ClearBuffer();
				}
			}
			BLuetooth_LCD_Nokia_Main();
    109e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <BLuetooth_LCD_Nokia_Main>
			break;
		}
		
		case GEEKSPORT_SPEEDOMETER_MODE:
		{
			if (GeekSport_LastMode != GEEKSPORT_SPEEDOMETER_MODE)
    10a2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <GeekSport_LastMode>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	51 f0       	breq	.+20     	; 0x10be <GeekSport_SetMode+0xbe>
			{
 				GeekSport_LastMode = GEEKSPORT_SPEEDOMETER_MODE;
    10aa:	c0 93 89 01 	sts	0x0189, r28	; 0x800189 <GeekSport_LastMode>
 				if (lastBuffer != GeekSport_LastMode)		//?????????????????????????
    10ae:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <lastBuffer.2672>
    10b2:	82 30       	cpi	r24, 0x02	; 2
    10b4:	21 f0       	breq	.+8      	; 0x10be <GeekSport_SetMode+0xbe>
				{
					lastBuffer = mode;
    10b6:	c0 93 88 01 	sts	0x0188, r28	; 0x800188 <lastBuffer.2672>
					LCD_Nokia_ClearBuffer();
    10ba:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			//	Error code
			
			break;
		}
	}
    10be:	cf 91       	pop	r28
				{
					lastBuffer = mode;
					LCD_Nokia_ClearBuffer();
				}
			}
			Speedometer_LCD_Nokia_Main();
    10c0:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <Speedometer_LCD_Nokia_Main>
			if (GeekSport_LastMode != GEEKSPORT_START)//GEEKSPORT_WATCH_MODE)
			{
				GeekSport_LastMode = GEEKSPORT_START;//GEEKSPORT_WATCH_MODE;
				if (lastBuffer != GeekSport_LastMode)		//?????????????????????????
				{
					lastBuffer = mode;
    10c4:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <lastBuffer.2672>
					LCD_Nokia_ClearBuffer();
    10c8:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
    10cc:	d6 cf       	rjmp	.-84     	; 0x107a <GeekSport_SetMode+0x7a>

000010ce <I2C_Init>:
		timeStructPointer->month = I2C_ReceiveBuffer[6];
		timeStructPointer->year = I2C_ReceiveBuffer[7];
	}
	
	return (I2C_StatusFlags.transfer);
}
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	8b 01       	movw	r16, r22
    10d6:	9c 01       	movw	r18, r24
    10d8:	c4 2f       	mov	r28, r20
    10da:	87 b1       	in	r24, 0x07	; 7
    10dc:	8f 7c       	andi	r24, 0xCF	; 207
    10de:	87 b9       	out	0x07, r24	; 7
    10e0:	88 b1       	in	r24, 0x08	; 8
    10e2:	80 63       	ori	r24, 0x30	; 48
    10e4:	88 b9       	out	0x08, r24	; 8
    10e6:	60 e4       	ldi	r22, 0x40	; 64
    10e8:	72 e4       	ldi	r23, 0x42	; 66
    10ea:	8f e0       	ldi	r24, 0x0F	; 15
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a9 01       	movw	r20, r18
    10f0:	98 01       	movw	r18, r16
    10f2:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    10f6:	ca 01       	movw	r24, r20
    10f8:	b9 01       	movw	r22, r18
    10fa:	60 51       	subi	r22, 0x10	; 16
    10fc:	71 09       	sbc	r23, r1
    10fe:	81 09       	sbc	r24, r1
    1100:	91 09       	sbc	r25, r1
    1102:	4c 2f       	mov	r20, r28
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	9a 01       	movw	r18, r20
    1108:	22 0f       	add	r18, r18
    110a:	33 1f       	adc	r19, r19
    110c:	03 2e       	mov	r0, r19
    110e:	00 0c       	add	r0, r0
    1110:	44 0b       	sbc	r20, r20
    1112:	55 0b       	sbc	r21, r21
    1114:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    1118:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    111c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1120:	84 e0       	ldi	r24, 0x04	; 4
    1122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <I2C_MT_TransmitData>:
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	ec 01       	movw	r28, r24
    1134:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1138:	90 fd       	sbrc	r25, 0
    113a:	fc cf       	rjmp	.-8      	; 0x1134 <I2C_MT_TransmitData+0x6>
    113c:	60 93 8c 01 	sts	0x018C, r22	; 0x80018c <I2C_MessageSize>
    1140:	88 81       	ld	r24, Y
    1142:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <I2C_TransmitBuffer>
    1146:	88 81       	ld	r24, Y
    1148:	80 fd       	sbrc	r24, 0
    114a:	15 c0       	rjmp	.+42     	; 0x1176 <I2C_MT_TransmitData+0x48>
    114c:	62 30       	cpi	r22, 0x02	; 2
    114e:	98 f0       	brcs	.+38     	; 0x1176 <I2C_MT_TransmitData+0x48>
    1150:	fe 01       	movw	r30, r28
    1152:	31 96       	adiw	r30, 0x01	; 1
    1154:	62 50       	subi	r22, 0x02	; 2
    1156:	26 2f       	mov	r18, r22
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	2e 5f       	subi	r18, 0xFE	; 254
    115c:	3f 4f       	sbci	r19, 0xFF	; 255
    115e:	2c 0f       	add	r18, r28
    1160:	3d 1f       	adc	r19, r29
    1162:	df 01       	movw	r26, r30
    1164:	ac 1b       	sub	r26, r28
    1166:	bd 0b       	sbc	r27, r29
    1168:	91 91       	ld	r25, Z+
    116a:	a3 56       	subi	r26, 0x63	; 99
    116c:	be 4f       	sbci	r27, 0xFE	; 254
    116e:	9c 93       	st	X, r25
    1170:	e2 17       	cp	r30, r18
    1172:	f3 07       	cpc	r31, r19
    1174:	b1 f7       	brne	.-20     	; 0x1162 <I2C_MT_TransmitData+0x34>
    1176:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <I2C_StatusFlags>
    117a:	85 ea       	ldi	r24, 0xA5	; 165
    117c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <I2C_MR_ReceiveData>:
    1186:	dc 01       	movw	r26, r24
    1188:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    118c:	90 fd       	sbrc	r25, 0
    118e:	fc cf       	rjmp	.-8      	; 0x1188 <I2C_MR_ReceiveData+0x2>
    1190:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <I2C_StatusFlags>
    1194:	80 ff       	sbrs	r24, 0
    1196:	13 c0       	rjmp	.+38     	; 0x11be <I2C_MR_ReceiveData+0x38>
    1198:	66 23       	and	r22, r22
    119a:	89 f0       	breq	.+34     	; 0x11be <I2C_MR_ReceiveData+0x38>
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	29 2f       	mov	r18, r25
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	f9 01       	movw	r30, r18
    11a4:	e3 57       	subi	r30, 0x73	; 115
    11a6:	fe 4f       	sbci	r31, 0xFE	; 254
    11a8:	40 81       	ld	r20, Z
    11aa:	2a 0f       	add	r18, r26
    11ac:	3b 1f       	adc	r19, r27
    11ae:	f9 01       	movw	r30, r18
    11b0:	31 97       	sbiw	r30, 0x01	; 1
    11b2:	40 83       	st	Z, r20
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	69 17       	cp	r22, r25
    11b8:	90 f7       	brcc	.-28     	; 0x119e <I2C_MR_ReceiveData+0x18>
    11ba:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <I2C_StatusFlags>
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	08 95       	ret

000011c2 <__vector_24>:

ISR (TWI0_vect)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	ef 93       	push	r30
    11d2:	ff 93       	push	r31
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    11d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    11d8:	88 7f       	andi	r24, 0xF8	; 248
    11da:	80 33       	cpi	r24, 0x30	; 48
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <__vector_24+0x1e>
    11de:	5d c0       	rjmp	.+186    	; 0x129a <__vector_24+0xd8>
    11e0:	38 f1       	brcs	.+78     	; 0x1230 <__vector_24+0x6e>
    11e2:	88 34       	cpi	r24, 0x48	; 72
    11e4:	a1 f1       	breq	.+104    	; 0x124e <__vector_24+0x8c>
    11e6:	a0 f0       	brcs	.+40     	; 0x1210 <__vector_24+0x4e>
    11e8:	88 35       	cpi	r24, 0x58	; 88
    11ea:	61 f1       	breq	.+88     	; 0x1244 <__vector_24+0x82>
    11ec:	88 3f       	cpi	r24, 0xF8	; 248
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <__vector_24+0x30>
    11f0:	58 c0       	rjmp	.+176    	; 0x12a2 <__vector_24+0xe0>
    11f2:	80 35       	cpi	r24, 0x50	; 80
    11f4:	79 f5       	brne	.+94     	; 0x1254 <__vector_24+0x92>
			I2C_Start();
			
			break;
		}

        case MR_DATA_ACK:   I2C_ReceiveBuffer[bufferPointer++] = TWDR0;
    11f6:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <bufferPointer.2704>
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	8e 0f       	add	r24, r30
    11fe:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <bufferPointer.2704>
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1208:	e3 57       	subi	r30, 0x73	; 115
    120a:	fe 4f       	sbci	r31, 0xFE	; 254
    120c:	90 83       	st	Z, r25
    120e:	07 c0       	rjmp	.+14     	; 0x121e <__vector_24+0x5c>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    1210:	88 33       	cpi	r24, 0x38	; 56
    1212:	09 f4       	brne	.+2      	; 0x1216 <__vector_24+0x54>
    1214:	42 c0       	rjmp	.+132    	; 0x129a <__vector_24+0xd8>
    1216:	80 34       	cpi	r24, 0x40	; 64
    1218:	e9 f4       	brne	.+58     	; 0x1254 <__vector_24+0x92>
    121a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <bufferPointer.2704>
		}

        case MR_DATA_ACK:   I2C_ReceiveBuffer[bufferPointer++] = TWDR0;
        case MR_SLA_ACK:
        {
            if (bufferPointer < I2C_MessageSize)
    121e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <I2C_MessageSize>
    1222:	89 17       	cp	r24, r25
    1224:	08 f0       	brcs	.+2      	; 0x1228 <__vector_24+0x66>
    1226:	41 c0       	rjmp	.+130    	; 0x12aa <__vector_24+0xe8>
            {
                TWCR0 =	(1 << TWEN) |															// 
    1228:	85 ec       	ldi	r24, 0xC5	; 197
    122a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    122e:	12 c0       	rjmp	.+36     	; 0x1254 <__vector_24+0x92>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    1230:	80 31       	cpi	r24, 0x10	; 16
    1232:	09 f4       	brne	.+2      	; 0x1236 <__vector_24+0x74>
    1234:	40 c0       	rjmp	.+128    	; 0x12b6 <__vector_24+0xf4>
    1236:	b8 f4       	brcc	.+46     	; 0x1266 <__vector_24+0xa4>
    1238:	81 11       	cpse	r24, r1
    123a:	3b c0       	rjmp	.+118    	; 0x12b2 <__vector_24+0xf0>
			(0 << TWWC);															//	Clear Write Collision flag
}

void I2C_Stop (void)
{
	TWCR0 =	(1 << TWEN) |															// 
    123c:	85 e9       	ldi	r24, 0x95	; 149
    123e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1242:	08 c0       	rjmp	.+16     	; 0x1254 <__vector_24+0x92>
		
		case MR_DATA_NACK:
		{
			//  Send stop/start or stop followed by a start
			//I2C_ReceiveBuffer[bufferPointer++] = TWDR0;	//???????????????????
			I2C_StatusFlags.transfer = 1;
    1244:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <I2C_StatusFlags>
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <I2C_StatusFlags>
			TWCR0 =  (1 << TWEN) |													// Enable TWI-interface and release TWI pins.
    124e:	84 e9       	ldi	r24, 0x94	; 148
    1250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		}

		default:    break;
	}
}
    1254:	ff 91       	pop	r31
    1256:	ef 91       	pop	r30
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	0f 90       	pop	r0
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	0f 90       	pop	r0
    1262:	1f 90       	pop	r1
    1264:	18 95       	reti

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    1266:	80 32       	cpi	r24, 0x20	; 32
    1268:	c1 f0       	breq	.+48     	; 0x129a <__vector_24+0xd8>
    126a:	88 32       	cpi	r24, 0x28	; 40
    126c:	11 f0       	breq	.+4      	; 0x1272 <__vector_24+0xb0>
    126e:	88 31       	cpi	r24, 0x18	; 24
    1270:	89 f7       	brne	.-30     	; 0x1254 <__vector_24+0x92>
    1272:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <bufferPointer.2704>
		case I2C_START:
		case I2C_REPEATED_START:	bufferPointer = 0;									//	
		case MT_SLA_ACK:
		case MT_DATA_ACK:
		{
			if (bufferPointer < I2C_MessageSize)
    1276:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <I2C_MessageSize>
    127a:	e8 17       	cp	r30, r24
    127c:	18 f7       	brcc	.-58     	; 0x1244 <__vector_24+0x82>
			{
				TWDR0 = I2C_TransmitBuffer[bufferPointer++];
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	8e 0f       	add	r24, r30
    1282:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <bufferPointer.2704>
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	e3 56       	subi	r30, 0x63	; 99
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	80 81       	ld	r24, Z
    128e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR0 =	(1 << TWEN) |												// 
    1292:	85 e8       	ldi	r24, 0x85	; 133
    1294:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1298:	dd cf       	rjmp	.-70     	; 0x1254 <__vector_24+0x92>
			(0 << TWWC);															//	Clear Write Collision flag
}

void I2C_Start (void)
{
	TWCR0 =	(1 << TWEN) |															//	Enable I2C
    129a:	85 ea       	ldi	r24, 0xA5	; 165
    129c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12a0:	d9 cf       	rjmp	.-78     	; 0x1254 <__vector_24+0x92>
			break;
		}

		case I2C_NO_RELEVANT_STATE_INFORMATION:
		{
			TWCR0 =	(1 << TWEN) |															//
    12a2:	84 e0       	ldi	r24, 0x04	; 4
    12a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		}

		default:    break;
	}
}
    12a8:	d5 cf       	rjmp	.-86     	; 0x1254 <__vector_24+0x92>
			            (1 << TWEA) | (0 << TWSTA) | (0 << TWSTO) |								// 
			            (0 << TWWC);															//	Clear Write Collision flag
            }
            else
            {
                TWCR0 =	(1 << TWEN) |															// 
    12aa:	85 e8       	ldi	r24, 0x85	; 133
    12ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12b0:	d1 cf       	rjmp	.-94     	; 0x1254 <__vector_24+0x92>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    12b2:	88 30       	cpi	r24, 0x08	; 8
    12b4:	79 f6       	brne	.-98     	; 0x1254 <__vector_24+0x92>
	{
		case I2C_START:
		case I2C_REPEATED_START:	bufferPointer = 0;									//	
    12b6:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <bufferPointer.2704>
    12ba:	e0 e0       	ldi	r30, 0x00	; 0
    12bc:	dc cf       	rjmp	.-72     	; 0x1276 <__vector_24+0xb4>

000012be <LCD_Nokia_PutPixel.part.0>:
{
	LCD_Nokia_DrawRectangle(xLeft, yHigh, xRight, yLow, 1);
}

void LCD_Nokia_DrawUnfilledCircle (uint8_t xO, uint8_t yO, uint8_t radius)
{
    12be:	96 2f       	mov	r25, r22
    12c0:	96 95       	lsr	r25
    12c2:	96 95       	lsr	r25
    12c4:	96 95       	lsr	r25
    12c6:	e8 2f       	mov	r30, r24
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	84 e5       	ldi	r24, 0x54	; 84
    12cc:	98 9f       	mul	r25, r24
    12ce:	e0 0d       	add	r30, r0
    12d0:	f1 1d       	adc	r31, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	e0 55       	subi	r30, 0x50	; 80
    12d6:	fe 4f       	sbci	r31, 0xFE	; 254
    12d8:	67 70       	andi	r22, 0x07	; 7
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <LCD_Nokia_PutPixel.part.0+0x24>
    12e0:	88 0f       	add	r24, r24
    12e2:	6a 95       	dec	r22
    12e4:	ea f7       	brpl	.-6      	; 0x12e0 <LCD_Nokia_PutPixel.part.0+0x22>
    12e6:	92 81       	ldd	r25, Z+2	; 0x02
    12e8:	89 2b       	or	r24, r25
    12ea:	82 83       	std	Z+2, r24	; 0x02
    12ec:	08 95       	ret

000012ee <LCD_Nokia_PutByte>:
    12ee:	61 11       	cpse	r22, r1
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <LCD_Nokia_PutByte+0x10>
    12f2:	28 98       	cbi	0x05, 0	; 5
    12f4:	2a 98       	cbi	0x05, 2	; 5
    12f6:	0e 94 93 13 	call	0x2726	; 0x2726 <SPI_PutByte>
    12fa:	2a 9a       	sbi	0x05, 2	; 5
    12fc:	08 95       	ret
    12fe:	28 9a       	sbi	0x05, 0	; 5
    1300:	2a 98       	cbi	0x05, 2	; 5
    1302:	0e 94 93 13 	call	0x2726	; 0x2726 <SPI_PutByte>
    1306:	2a 9a       	sbi	0x05, 2	; 5
    1308:	08 95       	ret

0000130a <LCD_Nokia_ClearBuffer>:
    130a:	e2 eb       	ldi	r30, 0xB2	; 178
    130c:	f1 e0       	ldi	r31, 0x01	; 1
    130e:	11 92       	st	Z+, r1
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	ea 3a       	cpi	r30, 0xAA	; 170
    1314:	f8 07       	cpc	r31, r24
    1316:	d9 f7       	brne	.-10     	; 0x130e <LCD_Nokia_ClearBuffer+0x4>
    1318:	08 95       	ret

0000131a <LCD_Nokia_Init>:
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	84 b1       	in	r24, 0x04	; 4
    1320:	83 60       	ori	r24, 0x03	; 3
    1322:	84 b9       	out	0x04, r24	; 4
    1324:	56 9a       	sbi	0x0a, 6	; 10
    1326:	29 9a       	sbi	0x05, 1	; 5
    1328:	2a 9a       	sbi	0x05, 2	; 5
    132a:	29 98       	cbi	0x05, 1	; 5
    132c:	83 ec       	ldi	r24, 0xC3	; 195
    132e:	99 e0       	ldi	r25, 0x09	; 9
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <LCD_Nokia_Init+0x16>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <LCD_Nokia_Init+0x1c>
    1336:	00 00       	nop
    1338:	29 9a       	sbi	0x05, 1	; 5
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	81 e2       	ldi	r24, 0x21	; 33
    133e:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	80 e9       	ldi	r24, 0x90	; 144
    1346:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	87 e0       	ldi	r24, 0x07	; 7
    134e:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	81 e1       	ldi	r24, 0x11	; 17
    1356:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	8c e0       	ldi	r24, 0x0C	; 12
    1366:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    136a:	c8 ef       	ldi	r28, 0xF8	; 248
    136c:	d1 e0       	ldi	r29, 0x01	; 1
    136e:	61 e0       	ldi	r22, 0x01	; 1
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    1376:	21 97       	sbiw	r28, 0x01	; 1
    1378:	d1 f7       	brne	.-12     	; 0x136e <LCD_Nokia_Init+0x54>
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <LCD_Nokia_SetPosition>:
    1380:	cf 93       	push	r28
    1382:	c6 2f       	mov	r28, r22
    1384:	2a 98       	cbi	0x05, 2	; 5
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	80 68       	ori	r24, 0x80	; 128
    138a:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	8c 2f       	mov	r24, r28
    1392:	80 64       	ori	r24, 0x40	; 64
    1394:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
    1398:	2a 9a       	sbi	0x05, 2	; 5
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

0000139e <LCD_Nokia_SetPixelPosition>:
    139e:	e0 eb       	ldi	r30, 0xB0	; 176
    13a0:	f1 e0       	ldi	r31, 0x01	; 1
    13a2:	80 83       	st	Z, r24
    13a4:	61 83       	std	Z+1, r22	; 0x01
    13a6:	08 95       	ret

000013a8 <LCD_Nokia_PutSmallChar>:
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	28 2f       	mov	r18, r24
    13b8:	65 30       	cpi	r22, 0x05	; 5
    13ba:	09 f4       	brne	.+2      	; 0x13be <LCD_Nokia_PutSmallChar+0x16>
    13bc:	81 c0       	rjmp	.+258    	; 0x14c0 <LCD_Nokia_PutSmallChar+0x118>
    13be:	66 30       	cpi	r22, 0x06	; 6
    13c0:	09 f0       	breq	.+2      	; 0x13c4 <LCD_Nokia_PutSmallChar+0x1c>
    13c2:	68 c0       	rjmp	.+208    	; 0x1494 <LCD_Nokia_PutSmallChar+0xec>
    13c4:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    13c8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    13cc:	02 2e       	mov	r0, r18
    13ce:	00 0c       	add	r0, r0
    13d0:	33 0b       	sbc	r19, r19
    13d2:	20 52       	subi	r18, 0x20	; 32
    13d4:	31 09       	sbc	r19, r1
    13d6:	e9 01       	movw	r28, r18
    13d8:	cc 0f       	add	r28, r28
    13da:	dd 1f       	adc	r29, r29
    13dc:	c2 0f       	add	r28, r18
    13de:	d3 1f       	adc	r29, r19
    13e0:	cc 0f       	add	r28, r28
    13e2:	dd 1f       	adc	r29, r29
    13e4:	ca 5f       	subi	r28, 0xFA	; 250
    13e6:	dc 4f       	sbci	r29, 0xFC	; 252
    13e8:	36 e0       	ldi	r19, 0x06	; 6
    13ea:	d3 2e       	mov	r13, r19
    13ec:	01 e0       	ldi	r16, 0x01	; 1
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	fe 01       	movw	r30, r28
    13f2:	24 91       	lpm	r18, Z
    13f4:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <byte.2719>
    13f8:	e1 2c       	mov	r14, r1
    13fa:	f1 2c       	mov	r15, r1
    13fc:	26 c0       	rjmp	.+76     	; 0x144a <LCD_Nokia_PutSmallChar+0xa2>
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	46 0f       	add	r20, r22
    1402:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1406:	96 2f       	mov	r25, r22
    1408:	96 95       	lsr	r25
    140a:	96 95       	lsr	r25
    140c:	96 95       	lsr	r25
    140e:	e8 2f       	mov	r30, r24
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	24 e5       	ldi	r18, 0x54	; 84
    1414:	92 9f       	mul	r25, r18
    1416:	e0 0d       	add	r30, r0
    1418:	f1 1d       	adc	r31, r1
    141a:	11 24       	eor	r1, r1
    141c:	e0 55       	subi	r30, 0x50	; 80
    141e:	fe 4f       	sbci	r31, 0xFE	; 254
    1420:	67 70       	andi	r22, 0x07	; 7
    1422:	98 01       	movw	r18, r16
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <LCD_Nokia_PutSmallChar+0x80>
    1426:	22 0f       	add	r18, r18
    1428:	6a 95       	dec	r22
    142a:	ea f7       	brpl	.-6      	; 0x1426 <LCD_Nokia_PutSmallChar+0x7e>
    142c:	92 2f       	mov	r25, r18
    142e:	90 95       	com	r25
    1430:	22 81       	ldd	r18, Z+2	; 0x02
    1432:	92 23       	and	r25, r18
    1434:	92 83       	std	Z+2, r25	; 0x02
    1436:	64 2f       	mov	r22, r20
    1438:	9f ef       	ldi	r25, 0xFF	; 255
    143a:	e9 1a       	sub	r14, r25
    143c:	f9 0a       	sbc	r15, r25
    143e:	e8 e0       	ldi	r30, 0x08	; 8
    1440:	ee 16       	cp	r14, r30
    1442:	f1 04       	cpc	r15, r1
    1444:	e1 f0       	breq	.+56     	; 0x147e <LCD_Nokia_PutSmallChar+0xd6>
    1446:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <byte.2719>
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	0e 2c       	mov	r0, r14
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <LCD_Nokia_PutSmallChar+0xac>
    1450:	35 95       	asr	r19
    1452:	27 95       	ror	r18
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <LCD_Nokia_PutSmallChar+0xa8>
    1458:	20 ff       	sbrs	r18, 0
    145a:	d1 cf       	rjmp	.-94     	; 0x13fe <LCD_Nokia_PutSmallChar+0x56>
    145c:	91 e0       	ldi	r25, 0x01	; 1
    145e:	96 0f       	add	r25, r22
    1460:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1464:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1468:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    146c:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1470:	9f ef       	ldi	r25, 0xFF	; 255
    1472:	e9 1a       	sub	r14, r25
    1474:	f9 0a       	sbc	r15, r25
    1476:	e8 e0       	ldi	r30, 0x08	; 8
    1478:	ee 16       	cp	r14, r30
    147a:	f1 04       	cpc	r15, r1
    147c:	21 f7       	brne	.-56     	; 0x1446 <LCD_Nokia_PutSmallChar+0x9e>
    147e:	8f 5f       	subi	r24, 0xFF	; 255
    1480:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <nokiaDisplayPixels>
    1484:	68 50       	subi	r22, 0x08	; 8
    1486:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <nokiaDisplayPixels+0x1>
    148a:	da 94       	dec	r13
    148c:	21 96       	adiw	r28, 0x01	; 1
    148e:	d1 10       	cpse	r13, r1
    1490:	af cf       	rjmp	.-162    	; 0x13f0 <LCD_Nokia_PutSmallChar+0x48>
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <LCD_Nokia_PutSmallChar+0xf0>
    1494:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    1498:	80 35       	cpi	r24, 0x50	; 80
    149a:	50 f0       	brcs	.+20     	; 0x14b0 <LCD_Nokia_PutSmallChar+0x108>
    149c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <nokiaDisplayPixels>
    14a0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    14a4:	88 5f       	subi	r24, 0xF8	; 248
    14a6:	80 33       	cpi	r24, 0x30	; 48
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <LCD_Nokia_PutSmallChar+0x104>
    14aa:	72 c0       	rjmp	.+228    	; 0x1590 <LCD_Nokia_PutSmallChar+0x1e8>
    14ac:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	ef 90       	pop	r14
    14bc:	df 90       	pop	r13
    14be:	08 95       	ret
    14c0:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    14c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    14c8:	02 2e       	mov	r0, r18
    14ca:	00 0c       	add	r0, r0
    14cc:	33 0b       	sbc	r19, r19
    14ce:	20 52       	subi	r18, 0x20	; 32
    14d0:	31 09       	sbc	r19, r1
    14d2:	e9 01       	movw	r28, r18
    14d4:	cc 0f       	add	r28, r28
    14d6:	dd 1f       	adc	r29, r29
    14d8:	cc 0f       	add	r28, r28
    14da:	dd 1f       	adc	r29, r29
    14dc:	c2 0f       	add	r28, r18
    14de:	d3 1f       	adc	r29, r19
    14e0:	c0 5c       	subi	r28, 0xC0	; 192
    14e2:	da 4f       	sbci	r29, 0xFA	; 250
    14e4:	55 e0       	ldi	r21, 0x05	; 5
    14e6:	d5 2e       	mov	r13, r21
    14e8:	01 e0       	ldi	r16, 0x01	; 1
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	fe 01       	movw	r30, r28
    14ee:	24 91       	lpm	r18, Z
    14f0:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <byte.2719>
    14f4:	e1 2c       	mov	r14, r1
    14f6:	f1 2c       	mov	r15, r1
    14f8:	26 c0       	rjmp	.+76     	; 0x1546 <LCD_Nokia_PutSmallChar+0x19e>
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	46 0f       	add	r20, r22
    14fe:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1502:	96 2f       	mov	r25, r22
    1504:	96 95       	lsr	r25
    1506:	96 95       	lsr	r25
    1508:	96 95       	lsr	r25
    150a:	e8 2f       	mov	r30, r24
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	24 e5       	ldi	r18, 0x54	; 84
    1510:	92 9f       	mul	r25, r18
    1512:	e0 0d       	add	r30, r0
    1514:	f1 1d       	adc	r31, r1
    1516:	11 24       	eor	r1, r1
    1518:	e0 55       	subi	r30, 0x50	; 80
    151a:	fe 4f       	sbci	r31, 0xFE	; 254
    151c:	67 70       	andi	r22, 0x07	; 7
    151e:	98 01       	movw	r18, r16
    1520:	01 c0       	rjmp	.+2      	; 0x1524 <LCD_Nokia_PutSmallChar+0x17c>
    1522:	22 0f       	add	r18, r18
    1524:	6a 95       	dec	r22
    1526:	ea f7       	brpl	.-6      	; 0x1522 <LCD_Nokia_PutSmallChar+0x17a>
    1528:	92 2f       	mov	r25, r18
    152a:	90 95       	com	r25
    152c:	22 81       	ldd	r18, Z+2	; 0x02
    152e:	92 23       	and	r25, r18
    1530:	92 83       	std	Z+2, r25	; 0x02
    1532:	64 2f       	mov	r22, r20
    1534:	9f ef       	ldi	r25, 0xFF	; 255
    1536:	e9 1a       	sub	r14, r25
    1538:	f9 0a       	sbc	r15, r25
    153a:	e8 e0       	ldi	r30, 0x08	; 8
    153c:	ee 16       	cp	r14, r30
    153e:	f1 04       	cpc	r15, r1
    1540:	e1 f0       	breq	.+56     	; 0x157a <LCD_Nokia_PutSmallChar+0x1d2>
    1542:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <byte.2719>
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	0e 2c       	mov	r0, r14
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <LCD_Nokia_PutSmallChar+0x1a8>
    154c:	35 95       	asr	r19
    154e:	27 95       	ror	r18
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <LCD_Nokia_PutSmallChar+0x1a4>
    1554:	20 ff       	sbrs	r18, 0
    1556:	d1 cf       	rjmp	.-94     	; 0x14fa <LCD_Nokia_PutSmallChar+0x152>
    1558:	91 e0       	ldi	r25, 0x01	; 1
    155a:	96 0f       	add	r25, r22
    155c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1560:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1564:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    1568:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	e9 1a       	sub	r14, r25
    1570:	f9 0a       	sbc	r15, r25
    1572:	e8 e0       	ldi	r30, 0x08	; 8
    1574:	ee 16       	cp	r14, r30
    1576:	f1 04       	cpc	r15, r1
    1578:	21 f7       	brne	.-56     	; 0x1542 <LCD_Nokia_PutSmallChar+0x19a>
    157a:	8f 5f       	subi	r24, 0xFF	; 255
    157c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <nokiaDisplayPixels>
    1580:	68 50       	subi	r22, 0x08	; 8
    1582:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1586:	da 94       	dec	r13
    1588:	21 96       	adiw	r28, 0x01	; 1
    158a:	d1 10       	cpse	r13, r1
    158c:	af cf       	rjmp	.-162    	; 0x14ec <LCD_Nokia_PutSmallChar+0x144>
    158e:	84 cf       	rjmp	.-248    	; 0x1498 <LCD_Nokia_PutSmallChar+0xf0>
    1590:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	df 90       	pop	r13
    15a2:	08 95       	ret

000015a4 <LCD_Nokia_Put5Char>:
    15a4:	65 e0       	ldi	r22, 0x05	; 5
    15a6:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>

000015aa <LCD_Nokia_Put6Char>:
    15aa:	66 e0       	ldi	r22, 0x06	; 6
    15ac:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>

000015b0 <LCD_Nokia_Send5CharString_P>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ec 01       	movw	r28, r24
    15b6:	fc 01       	movw	r30, r24
    15b8:	84 91       	lpm	r24, Z
    15ba:	88 23       	and	r24, r24
    15bc:	51 f0       	breq	.+20     	; 0x15d2 <LCD_Nokia_Send5CharString_P+0x22>
    15be:	fe 01       	movw	r30, r28
    15c0:	21 96       	adiw	r28, 0x01	; 1
    15c2:	84 91       	lpm	r24, Z
    15c4:	65 e0       	ldi	r22, 0x05	; 5
    15c6:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    15ca:	fe 01       	movw	r30, r28
    15cc:	84 91       	lpm	r24, Z
    15ce:	81 11       	cpse	r24, r1
    15d0:	f6 cf       	rjmp	.-20     	; 0x15be <LCD_Nokia_Send5CharString_P+0xe>
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	08 95       	ret

000015d8 <LCD_Nokia_Send6CharString>:
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	ec 01       	movw	r28, r24
    15de:	88 81       	ld	r24, Y
    15e0:	88 23       	and	r24, r24
    15e2:	39 f0       	breq	.+14     	; 0x15f2 <LCD_Nokia_Send6CharString+0x1a>
    15e4:	21 96       	adiw	r28, 0x01	; 1
    15e6:	66 e0       	ldi	r22, 0x06	; 6
    15e8:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    15ec:	89 91       	ld	r24, Y+
    15ee:	81 11       	cpse	r24, r1
    15f0:	fa cf       	rjmp	.-12     	; 0x15e6 <LCD_Nokia_Send6CharString+0xe>
    15f2:	df 91       	pop	r29
    15f4:	cf 91       	pop	r28
    15f6:	08 95       	ret

000015f8 <LCD_Nokia_Send6CharString_P>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
    15fe:	fc 01       	movw	r30, r24
    1600:	84 91       	lpm	r24, Z
    1602:	88 23       	and	r24, r24
    1604:	51 f0       	breq	.+20     	; 0x161a <LCD_Nokia_Send6CharString_P+0x22>
    1606:	fe 01       	movw	r30, r28
    1608:	21 96       	adiw	r28, 0x01	; 1
    160a:	84 91       	lpm	r24, Z
    160c:	66 e0       	ldi	r22, 0x06	; 6
    160e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1612:	fe 01       	movw	r30, r28
    1614:	84 91       	lpm	r24, Z
    1616:	81 11       	cpse	r24, r1
    1618:	f6 cf       	rjmp	.-20     	; 0x1606 <LCD_Nokia_Send6CharString_P+0xe>
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <LCD_Nokia_Put12Char>:
    1620:	bf 92       	push	r11
    1622:	cf 92       	push	r12
    1624:	df 92       	push	r13
    1626:	ef 92       	push	r14
    1628:	ff 92       	push	r15
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1636:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    163a:	48 e1       	ldi	r20, 0x18	; 24
    163c:	84 02       	muls	r24, r20
    163e:	90 01       	movw	r18, r0
    1640:	11 24       	eor	r1, r1
    1642:	f9 01       	movw	r30, r18
    1644:	e6 57       	subi	r30, 0x76	; 118
    1646:	f2 40       	sbci	r31, 0x02	; 2
    1648:	6f 01       	movw	r12, r30
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	b8 2e       	mov	r11, r24
    164e:	01 e0       	ldi	r16, 0x01	; 1
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	76 01       	movw	r14, r12
    1654:	8c e0       	ldi	r24, 0x0C	; 12
    1656:	e8 1a       	sub	r14, r24
    1658:	f1 08       	sbc	r15, r1
    165a:	39 2f       	mov	r19, r25
    165c:	96 2f       	mov	r25, r22
    165e:	f7 01       	movw	r30, r14
    1660:	24 91       	lpm	r18, Z
    1662:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <byte.2829>
    1666:	83 2f       	mov	r24, r19
    1668:	69 2f       	mov	r22, r25
    166a:	c0 e0       	ldi	r28, 0x00	; 0
    166c:	d0 e0       	ldi	r29, 0x00	; 0
    166e:	23 c0       	rjmp	.+70     	; 0x16b6 <LCD_Nokia_Put12Char+0x96>
    1670:	41 e0       	ldi	r20, 0x01	; 1
    1672:	46 0f       	add	r20, r22
    1674:	40 93 b1 01 	sts	0x01B1, r20	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1678:	96 2f       	mov	r25, r22
    167a:	96 95       	lsr	r25
    167c:	96 95       	lsr	r25
    167e:	96 95       	lsr	r25
    1680:	e8 2f       	mov	r30, r24
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	24 e5       	ldi	r18, 0x54	; 84
    1686:	92 9f       	mul	r25, r18
    1688:	e0 0d       	add	r30, r0
    168a:	f1 1d       	adc	r31, r1
    168c:	11 24       	eor	r1, r1
    168e:	e0 55       	subi	r30, 0x50	; 80
    1690:	fe 4f       	sbci	r31, 0xFE	; 254
    1692:	67 70       	andi	r22, 0x07	; 7
    1694:	98 01       	movw	r18, r16
    1696:	01 c0       	rjmp	.+2      	; 0x169a <LCD_Nokia_Put12Char+0x7a>
    1698:	22 0f       	add	r18, r18
    169a:	6a 95       	dec	r22
    169c:	ea f7       	brpl	.-6      	; 0x1698 <LCD_Nokia_Put12Char+0x78>
    169e:	92 2f       	mov	r25, r18
    16a0:	90 95       	com	r25
    16a2:	22 81       	ldd	r18, Z+2	; 0x02
    16a4:	92 23       	and	r25, r18
    16a6:	92 83       	std	Z+2, r25	; 0x02
    16a8:	64 2f       	mov	r22, r20
    16aa:	21 96       	adiw	r28, 0x01	; 1
    16ac:	c8 30       	cpi	r28, 0x08	; 8
    16ae:	d1 05       	cpc	r29, r1
    16b0:	c9 f0       	breq	.+50     	; 0x16e4 <LCD_Nokia_Put12Char+0xc4>
    16b2:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <byte.2829>
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	0c 2e       	mov	r0, r28
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <LCD_Nokia_Put12Char+0xa0>
    16bc:	35 95       	asr	r19
    16be:	27 95       	ror	r18
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <LCD_Nokia_Put12Char+0x9c>
    16c4:	20 ff       	sbrs	r18, 0
    16c6:	d4 cf       	rjmp	.-88     	; 0x1670 <LCD_Nokia_Put12Char+0x50>
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	96 0f       	add	r25, r22
    16cc:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <nokiaDisplayPixels+0x1>
    16d0:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    16d4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <nokiaDisplayPixels>
    16d8:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    16dc:	21 96       	adiw	r28, 0x01	; 1
    16de:	c8 30       	cpi	r28, 0x08	; 8
    16e0:	d1 05       	cpc	r29, r1
    16e2:	39 f7       	brne	.-50     	; 0x16b2 <LCD_Nokia_Put12Char+0x92>
    16e4:	31 e0       	ldi	r19, 0x01	; 1
    16e6:	38 0f       	add	r19, r24
    16e8:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <nokiaDisplayPixels>
    16ec:	98 ef       	ldi	r25, 0xF8	; 248
    16ee:	96 0f       	add	r25, r22
    16f0:	4f ef       	ldi	r20, 0xFF	; 255
    16f2:	e4 1a       	sub	r14, r20
    16f4:	f4 0a       	sbc	r15, r20
    16f6:	ec 14       	cp	r14, r12
    16f8:	fd 04       	cpc	r15, r13
    16fa:	09 f0       	breq	.+2      	; 0x16fe <LCD_Nokia_Put12Char+0xde>
    16fc:	b0 cf       	rjmp	.-160    	; 0x165e <LCD_Nokia_Put12Char+0x3e>
    16fe:	95 ef       	ldi	r25, 0xF5	; 245
    1700:	98 0f       	add	r25, r24
    1702:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <nokiaDisplayPixels>
    1706:	ba 94       	dec	r11
    1708:	67 01       	movw	r12, r14
    170a:	5c e0       	ldi	r21, 0x0C	; 12
    170c:	c5 0e       	add	r12, r21
    170e:	d1 1c       	adc	r13, r1
    1710:	b1 10       	cpse	r11, r1
    1712:	9f cf       	rjmp	.-194    	; 0x1652 <LCD_Nokia_Put12Char+0x32>
    1714:	30 93 b0 01 	sts	0x01B0, r19	; 0x8001b0 <nokiaDisplayPixels>
    1718:	80 ef       	ldi	r24, 0xF0	; 240
    171a:	86 0f       	add	r24, r22
    171c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1720:	33 35       	cpi	r19, 0x53	; 83
    1722:	30 f0       	brcs	.+12     	; 0x1730 <LCD_Nokia_Put12Char+0x110>
    1724:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <nokiaDisplayPixels>
    1728:	6f 32       	cpi	r22, 0x2F	; 47
    172a:	60 f0       	brcs	.+24     	; 0x1744 <LCD_Nokia_Put12Char+0x124>
    172c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	cf 90       	pop	r12
    1740:	bf 90       	pop	r11
    1742:	08 95       	ret
    1744:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <nokiaDisplayPixels+0x1>
    1748:	f3 cf       	rjmp	.-26     	; 0x1730 <LCD_Nokia_Put12Char+0x110>

0000174a <LCD_Nokia_Send12CharString_P>:
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	ec 01       	movw	r28, r24
    1750:	fc 01       	movw	r30, r24
    1752:	84 91       	lpm	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	49 f0       	breq	.+18     	; 0x176a <LCD_Nokia_Send12CharString_P+0x20>
    1758:	fe 01       	movw	r30, r28
    175a:	21 96       	adiw	r28, 0x01	; 1
    175c:	84 91       	lpm	r24, Z
    175e:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    1762:	fe 01       	movw	r30, r28
    1764:	84 91       	lpm	r24, Z
    1766:	81 11       	cpse	r24, r1
    1768:	f7 cf       	rjmp	.-18     	; 0x1758 <LCD_Nokia_Send12CharString_P+0xe>
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <LCD_Nokia_SendInteger>:
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	6b 01       	movw	r12, r22
    177e:	7c 01       	movw	r14, r24
    1780:	46 30       	cpi	r20, 0x06	; 6
    1782:	09 f4       	brne	.+2      	; 0x1786 <LCD_Nokia_SendInteger+0x16>
    1784:	b1 c0       	rjmp	.+354    	; 0x18e8 <LCD_Nokia_SendInteger+0x178>
    1786:	4c 30       	cpi	r20, 0x0C	; 12
    1788:	09 f4       	brne	.+2      	; 0x178c <LCD_Nokia_SendInteger+0x1c>
    178a:	55 c0       	rjmp	.+170    	; 0x1836 <LCD_Nokia_SendInteger+0xc6>
    178c:	45 30       	cpi	r20, 0x05	; 5
    178e:	39 f0       	breq	.+14     	; 0x179e <LCD_Nokia_SendInteger+0x2e>
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	08 95       	ret
    179e:	97 fd       	sbrc	r25, 7
    17a0:	db c1       	rjmp	.+950    	; 0x1b58 <LCD_Nokia_SendInteger+0x3e8>
    17a2:	d7 01       	movw	r26, r14
    17a4:	c6 01       	movw	r24, r12
    17a6:	0a 97       	sbiw	r24, 0x0a	; 10
    17a8:	a1 09       	sbc	r26, r1
    17aa:	b1 09       	sbc	r27, r1
    17ac:	8a 35       	cpi	r24, 0x5A	; 90
    17ae:	91 05       	cpc	r25, r1
    17b0:	a1 05       	cpc	r26, r1
    17b2:	b1 05       	cpc	r27, r1
    17b4:	08 f4       	brcc	.+2      	; 0x17b8 <LCD_Nokia_SendInteger+0x48>
    17b6:	e8 c0       	rjmp	.+464    	; 0x1988 <LCD_Nokia_SendInteger+0x218>
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	9a e0       	ldi	r25, 0x0A	; 10
    17bc:	c9 16       	cp	r12, r25
    17be:	d1 04       	cpc	r13, r1
    17c0:	e1 04       	cpc	r14, r1
    17c2:	f1 04       	cpc	r15, r1
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <LCD_Nokia_SendInteger+0x58>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	b7 01       	movw	r22, r14
    17ca:	a6 01       	movw	r20, r12
    17cc:	44 56       	subi	r20, 0x64	; 100
    17ce:	51 09       	sbc	r21, r1
    17d0:	61 09       	sbc	r22, r1
    17d2:	71 09       	sbc	r23, r1
    17d4:	44 38       	cpi	r20, 0x84	; 132
    17d6:	53 40       	sbci	r21, 0x03	; 3
    17d8:	61 05       	cpc	r22, r1
    17da:	71 05       	cpc	r23, r1
    17dc:	08 f4       	brcc	.+2      	; 0x17e0 <LCD_Nokia_SendInteger+0x70>
    17de:	83 e0       	ldi	r24, 0x03	; 3
    17e0:	b7 01       	movw	r22, r14
    17e2:	a6 01       	movw	r20, r12
    17e4:	48 5e       	subi	r20, 0xE8	; 232
    17e6:	53 40       	sbci	r21, 0x03	; 3
    17e8:	61 09       	sbc	r22, r1
    17ea:	71 09       	sbc	r23, r1
    17ec:	48 32       	cpi	r20, 0x28	; 40
    17ee:	53 42       	sbci	r21, 0x23	; 35
    17f0:	61 05       	cpc	r22, r1
    17f2:	71 05       	cpc	r23, r1
    17f4:	08 f4       	brcc	.+2      	; 0x17f8 <LCD_Nokia_SendInteger+0x88>
    17f6:	6e c1       	rjmp	.+732    	; 0x1ad4 <LCD_Nokia_SendInteger+0x364>
    17f8:	b7 01       	movw	r22, r14
    17fa:	a6 01       	movw	r20, r12
    17fc:	40 51       	subi	r20, 0x10	; 16
    17fe:	57 42       	sbci	r21, 0x27	; 39
    1800:	61 09       	sbc	r22, r1
    1802:	71 09       	sbc	r23, r1
    1804:	40 39       	cpi	r20, 0x90	; 144
    1806:	5f 45       	sbci	r21, 0x5F	; 95
    1808:	61 40       	sbci	r22, 0x01	; 1
    180a:	71 05       	cpc	r23, r1
    180c:	08 f4       	brcc	.+2      	; 0x1810 <LCD_Nokia_SendInteger+0xa0>
    180e:	53 c1       	rjmp	.+678    	; 0x1ab6 <LCD_Nokia_SendInteger+0x346>
    1810:	82 30       	cpi	r24, 0x02	; 2
    1812:	09 f4       	brne	.+2      	; 0x1816 <LCD_Nokia_SendInteger+0xa6>
    1814:	7d c1       	rjmp	.+762    	; 0x1b10 <LCD_Nokia_SendInteger+0x3a0>
    1816:	83 30       	cpi	r24, 0x03	; 3
    1818:	09 f4       	brne	.+2      	; 0x181c <LCD_Nokia_SendInteger+0xac>
    181a:	6b c1       	rjmp	.+726    	; 0x1af2 <LCD_Nokia_SendInteger+0x382>
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	09 f4       	brne	.+2      	; 0x1822 <LCD_Nokia_SendInteger+0xb2>
    1820:	87 c1       	rjmp	.+782    	; 0x1b30 <LCD_Nokia_SendInteger+0x3c0>
    1822:	cc e2       	ldi	r28, 0x2C	; 44
    1824:	d1 e0       	ldi	r29, 0x01	; 1
    1826:	83 e2       	ldi	r24, 0x23	; 35
    1828:	65 e0       	ldi	r22, 0x05	; 5
    182a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    182e:	89 91       	ld	r24, Y+
    1830:	81 11       	cpse	r24, r1
    1832:	fa cf       	rjmp	.-12     	; 0x1828 <LCD_Nokia_SendInteger+0xb8>
    1834:	ad cf       	rjmp	.-166    	; 0x1790 <LCD_Nokia_SendInteger+0x20>
    1836:	97 fd       	sbrc	r25, 7
    1838:	9b c1       	rjmp	.+822    	; 0x1b70 <LCD_Nokia_SendInteger+0x400>
    183a:	d7 01       	movw	r26, r14
    183c:	c6 01       	movw	r24, r12
    183e:	0a 97       	sbiw	r24, 0x0a	; 10
    1840:	a1 09       	sbc	r26, r1
    1842:	b1 09       	sbc	r27, r1
    1844:	8a 35       	cpi	r24, 0x5A	; 90
    1846:	91 05       	cpc	r25, r1
    1848:	a1 05       	cpc	r26, r1
    184a:	b1 05       	cpc	r27, r1
    184c:	08 f4       	brcc	.+2      	; 0x1850 <LCD_Nokia_SendInteger+0xe0>
    184e:	9a c0       	rjmp	.+308    	; 0x1984 <LCD_Nokia_SendInteger+0x214>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	9a e0       	ldi	r25, 0x0A	; 10
    1854:	c9 16       	cp	r12, r25
    1856:	d1 04       	cpc	r13, r1
    1858:	e1 04       	cpc	r14, r1
    185a:	f1 04       	cpc	r15, r1
    185c:	0c f0       	brlt	.+2      	; 0x1860 <LCD_Nokia_SendInteger+0xf0>
    185e:	80 e0       	ldi	r24, 0x00	; 0
    1860:	b7 01       	movw	r22, r14
    1862:	a6 01       	movw	r20, r12
    1864:	44 56       	subi	r20, 0x64	; 100
    1866:	51 09       	sbc	r21, r1
    1868:	61 09       	sbc	r22, r1
    186a:	71 09       	sbc	r23, r1
    186c:	44 38       	cpi	r20, 0x84	; 132
    186e:	53 40       	sbci	r21, 0x03	; 3
    1870:	61 05       	cpc	r22, r1
    1872:	71 05       	cpc	r23, r1
    1874:	08 f4       	brcc	.+2      	; 0x1878 <LCD_Nokia_SendInteger+0x108>
    1876:	83 e0       	ldi	r24, 0x03	; 3
    1878:	b7 01       	movw	r22, r14
    187a:	a6 01       	movw	r20, r12
    187c:	48 5e       	subi	r20, 0xE8	; 232
    187e:	53 40       	sbci	r21, 0x03	; 3
    1880:	61 09       	sbc	r22, r1
    1882:	71 09       	sbc	r23, r1
    1884:	48 32       	cpi	r20, 0x28	; 40
    1886:	53 42       	sbci	r21, 0x23	; 35
    1888:	61 05       	cpc	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	08 f4       	brcc	.+2      	; 0x1890 <LCD_Nokia_SendInteger+0x120>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	b7 01       	movw	r22, r14
    1892:	a6 01       	movw	r20, r12
    1894:	40 51       	subi	r20, 0x10	; 16
    1896:	57 42       	sbci	r21, 0x27	; 39
    1898:	61 09       	sbc	r22, r1
    189a:	71 09       	sbc	r23, r1
    189c:	40 39       	cpi	r20, 0x90	; 144
    189e:	5f 45       	sbci	r21, 0x5F	; 95
    18a0:	61 40       	sbci	r22, 0x01	; 1
    18a2:	71 05       	cpc	r23, r1
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <LCD_Nokia_SendInteger+0x138>
    18a6:	80 c0       	rjmp	.+256    	; 0x19a8 <LCD_Nokia_SendInteger+0x238>
    18a8:	b7 01       	movw	r22, r14
    18aa:	a6 01       	movw	r20, r12
    18ac:	40 5a       	subi	r20, 0xA0	; 160
    18ae:	56 48       	sbci	r21, 0x86	; 134
    18b0:	61 40       	sbci	r22, 0x01	; 1
    18b2:	71 09       	sbc	r23, r1
    18b4:	40 3a       	cpi	r20, 0xA0	; 160
    18b6:	5b 4b       	sbci	r21, 0xBB	; 187
    18b8:	6d 40       	sbci	r22, 0x0D	; 13
    18ba:	71 05       	cpc	r23, r1
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <LCD_Nokia_SendInteger+0x150>
    18be:	66 c0       	rjmp	.+204    	; 0x198c <LCD_Nokia_SendInteger+0x21c>
    18c0:	82 30       	cpi	r24, 0x02	; 2
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <LCD_Nokia_SendInteger+0x156>
    18c4:	9b c0       	rjmp	.+310    	; 0x19fc <LCD_Nokia_SendInteger+0x28c>
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <LCD_Nokia_SendInteger+0x15a>
    18c8:	5e c1       	rjmp	.+700    	; 0x1b86 <LCD_Nokia_SendInteger+0x416>
    18ca:	83 30       	cpi	r24, 0x03	; 3
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <LCD_Nokia_SendInteger+0x160>
    18ce:	88 c0       	rjmp	.+272    	; 0x19e0 <LCD_Nokia_SendInteger+0x270>
    18d0:	84 30       	cpi	r24, 0x04	; 4
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <LCD_Nokia_SendInteger+0x166>
    18d4:	77 c0       	rjmp	.+238    	; 0x19c4 <LCD_Nokia_SendInteger+0x254>
    18d6:	cc e2       	ldi	r28, 0x2C	; 44
    18d8:	d1 e0       	ldi	r29, 0x01	; 1
    18da:	83 e2       	ldi	r24, 0x23	; 35
    18dc:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    18e0:	89 91       	ld	r24, Y+
    18e2:	81 11       	cpse	r24, r1
    18e4:	fb cf       	rjmp	.-10     	; 0x18dc <LCD_Nokia_SendInteger+0x16c>
    18e6:	54 cf       	rjmp	.-344    	; 0x1790 <LCD_Nokia_SendInteger+0x20>
    18e8:	97 fd       	sbrc	r25, 7
    18ea:	2a c1       	rjmp	.+596    	; 0x1b40 <LCD_Nokia_SendInteger+0x3d0>
    18ec:	d7 01       	movw	r26, r14
    18ee:	c6 01       	movw	r24, r12
    18f0:	0a 97       	sbiw	r24, 0x0a	; 10
    18f2:	a1 09       	sbc	r26, r1
    18f4:	b1 09       	sbc	r27, r1
    18f6:	8a 35       	cpi	r24, 0x5A	; 90
    18f8:	91 05       	cpc	r25, r1
    18fa:	a1 05       	cpc	r26, r1
    18fc:	b1 05       	cpc	r27, r1
    18fe:	08 f4       	brcc	.+2      	; 0x1902 <LCD_Nokia_SendInteger+0x192>
    1900:	3f c0       	rjmp	.+126    	; 0x1980 <LCD_Nokia_SendInteger+0x210>
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	9a e0       	ldi	r25, 0x0A	; 10
    1906:	c9 16       	cp	r12, r25
    1908:	d1 04       	cpc	r13, r1
    190a:	e1 04       	cpc	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	0c f0       	brlt	.+2      	; 0x1912 <LCD_Nokia_SendInteger+0x1a2>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	b7 01       	movw	r22, r14
    1914:	a6 01       	movw	r20, r12
    1916:	44 56       	subi	r20, 0x64	; 100
    1918:	51 09       	sbc	r21, r1
    191a:	61 09       	sbc	r22, r1
    191c:	71 09       	sbc	r23, r1
    191e:	44 38       	cpi	r20, 0x84	; 132
    1920:	53 40       	sbci	r21, 0x03	; 3
    1922:	61 05       	cpc	r22, r1
    1924:	71 05       	cpc	r23, r1
    1926:	08 f4       	brcc	.+2      	; 0x192a <LCD_Nokia_SendInteger+0x1ba>
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	b7 01       	movw	r22, r14
    192c:	a6 01       	movw	r20, r12
    192e:	48 5e       	subi	r20, 0xE8	; 232
    1930:	53 40       	sbci	r21, 0x03	; 3
    1932:	61 09       	sbc	r22, r1
    1934:	71 09       	sbc	r23, r1
    1936:	48 32       	cpi	r20, 0x28	; 40
    1938:	53 42       	sbci	r21, 0x23	; 35
    193a:	61 05       	cpc	r22, r1
    193c:	71 05       	cpc	r23, r1
    193e:	08 f4       	brcc	.+2      	; 0x1942 <LCD_Nokia_SendInteger+0x1d2>
    1940:	83 c0       	rjmp	.+262    	; 0x1a48 <LCD_Nokia_SendInteger+0x2d8>
    1942:	b7 01       	movw	r22, r14
    1944:	a6 01       	movw	r20, r12
    1946:	40 51       	subi	r20, 0x10	; 16
    1948:	57 42       	sbci	r21, 0x27	; 39
    194a:	61 09       	sbc	r22, r1
    194c:	71 09       	sbc	r23, r1
    194e:	40 39       	cpi	r20, 0x90	; 144
    1950:	5f 45       	sbci	r21, 0x5F	; 95
    1952:	61 40       	sbci	r22, 0x01	; 1
    1954:	71 05       	cpc	r23, r1
    1956:	08 f4       	brcc	.+2      	; 0x195a <LCD_Nokia_SendInteger+0x1ea>
    1958:	68 c0       	rjmp	.+208    	; 0x1a2a <LCD_Nokia_SendInteger+0x2ba>
    195a:	82 30       	cpi	r24, 0x02	; 2
    195c:	09 f4       	brne	.+2      	; 0x1960 <LCD_Nokia_SendInteger+0x1f0>
    195e:	92 c0       	rjmp	.+292    	; 0x1a84 <LCD_Nokia_SendInteger+0x314>
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	09 f4       	brne	.+2      	; 0x1966 <LCD_Nokia_SendInteger+0x1f6>
    1964:	80 c0       	rjmp	.+256    	; 0x1a66 <LCD_Nokia_SendInteger+0x2f6>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	09 f4       	brne	.+2      	; 0x196c <LCD_Nokia_SendInteger+0x1fc>
    196a:	e6 c0       	rjmp	.+460    	; 0x1b38 <LCD_Nokia_SendInteger+0x3c8>
    196c:	cc e2       	ldi	r28, 0x2C	; 44
    196e:	d1 e0       	ldi	r29, 0x01	; 1
    1970:	83 e2       	ldi	r24, 0x23	; 35
    1972:	66 e0       	ldi	r22, 0x06	; 6
    1974:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1978:	89 91       	ld	r24, Y+
    197a:	81 11       	cpse	r24, r1
    197c:	fa cf       	rjmp	.-12     	; 0x1972 <LCD_Nokia_SendInteger+0x202>
    197e:	08 cf       	rjmp	.-496    	; 0x1790 <LCD_Nokia_SendInteger+0x20>
    1980:	82 e0       	ldi	r24, 0x02	; 2
    1982:	c7 cf       	rjmp	.-114    	; 0x1912 <LCD_Nokia_SendInteger+0x1a2>
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	6c cf       	rjmp	.-296    	; 0x1860 <LCD_Nokia_SendInteger+0xf0>
    1988:	82 e0       	ldi	r24, 0x02	; 2
    198a:	1e cf       	rjmp	.-452    	; 0x17c8 <LCD_Nokia_SendInteger+0x58>
    198c:	c7 01       	movw	r24, r14
    198e:	b6 01       	movw	r22, r12
    1990:	20 ea       	ldi	r18, 0xA0	; 160
    1992:	36 e8       	ldi	r19, 0x86	; 134
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	50 e0       	ldi	r21, 0x00	; 0
    1998:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    199c:	6b 01       	movw	r12, r22
    199e:	7c 01       	movw	r14, r24
    19a0:	80 e3       	ldi	r24, 0x30	; 48
    19a2:	82 0f       	add	r24, r18
    19a4:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    19a8:	c7 01       	movw	r24, r14
    19aa:	b6 01       	movw	r22, r12
    19ac:	20 e1       	ldi	r18, 0x10	; 16
    19ae:	37 e2       	ldi	r19, 0x27	; 39
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	50 e0       	ldi	r21, 0x00	; 0
    19b4:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    19b8:	6b 01       	movw	r12, r22
    19ba:	7c 01       	movw	r14, r24
    19bc:	80 e3       	ldi	r24, 0x30	; 48
    19be:	82 0f       	add	r24, r18
    19c0:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
    19c8:	28 ee       	ldi	r18, 0xE8	; 232
    19ca:	33 e0       	ldi	r19, 0x03	; 3
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    19d4:	6b 01       	movw	r12, r22
    19d6:	7c 01       	movw	r14, r24
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	82 0f       	add	r24, r18
    19dc:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    19e0:	c7 01       	movw	r24, r14
    19e2:	b6 01       	movw	r22, r12
    19e4:	24 e6       	ldi	r18, 0x64	; 100
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
    19f4:	80 e3       	ldi	r24, 0x30	; 48
    19f6:	82 0f       	add	r24, r18
    19f8:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    19fc:	c7 01       	movw	r24, r14
    19fe:	b6 01       	movw	r22, r12
    1a00:	2a e0       	ldi	r18, 0x0A	; 10
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e0       	ldi	r20, 0x00	; 0
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1a0c:	c6 2f       	mov	r28, r22
    1a0e:	80 e3       	ldi	r24, 0x30	; 48
    1a10:	82 0f       	add	r24, r18
    1a12:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    1a16:	80 e3       	ldi	r24, 0x30	; 48
    1a18:	8c 0f       	add	r24, r28
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	ff 90       	pop	r15
    1a20:	ef 90       	pop	r14
    1a22:	df 90       	pop	r13
    1a24:	cf 90       	pop	r12
    1a26:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    1a2a:	c7 01       	movw	r24, r14
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	20 e1       	ldi	r18, 0x10	; 16
    1a30:	37 e2       	ldi	r19, 0x27	; 39
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1a3a:	6b 01       	movw	r12, r22
    1a3c:	7c 01       	movw	r14, r24
    1a3e:	66 e0       	ldi	r22, 0x06	; 6
    1a40:	80 e3       	ldi	r24, 0x30	; 48
    1a42:	82 0f       	add	r24, r18
    1a44:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b6 01       	movw	r22, r12
    1a4c:	28 ee       	ldi	r18, 0xE8	; 232
    1a4e:	33 e0       	ldi	r19, 0x03	; 3
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	50 e0       	ldi	r21, 0x00	; 0
    1a54:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1a58:	6b 01       	movw	r12, r22
    1a5a:	7c 01       	movw	r14, r24
    1a5c:	66 e0       	ldi	r22, 0x06	; 6
    1a5e:	80 e3       	ldi	r24, 0x30	; 48
    1a60:	82 0f       	add	r24, r18
    1a62:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	24 e6       	ldi	r18, 0x64	; 100
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1a76:	6b 01       	movw	r12, r22
    1a78:	7c 01       	movw	r14, r24
    1a7a:	66 e0       	ldi	r22, 0x06	; 6
    1a7c:	80 e3       	ldi	r24, 0x30	; 48
    1a7e:	82 0f       	add	r24, r18
    1a80:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1a84:	c7 01       	movw	r24, r14
    1a86:	b6 01       	movw	r22, r12
    1a88:	2a e0       	ldi	r18, 0x0A	; 10
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e0       	ldi	r20, 0x00	; 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1a94:	c6 2f       	mov	r28, r22
    1a96:	66 e0       	ldi	r22, 0x06	; 6
    1a98:	80 e3       	ldi	r24, 0x30	; 48
    1a9a:	82 0f       	add	r24, r18
    1a9c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1aa0:	66 e0       	ldi	r22, 0x06	; 6
    1aa2:	80 e3       	ldi	r24, 0x30	; 48
    1aa4:	8c 0f       	add	r24, r28
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1ab6:	c7 01       	movw	r24, r14
    1ab8:	b6 01       	movw	r22, r12
    1aba:	20 e1       	ldi	r18, 0x10	; 16
    1abc:	37 e2       	ldi	r19, 0x27	; 39
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1ac6:	6b 01       	movw	r12, r22
    1ac8:	7c 01       	movw	r14, r24
    1aca:	65 e0       	ldi	r22, 0x05	; 5
    1acc:	80 e3       	ldi	r24, 0x30	; 48
    1ace:	82 0f       	add	r24, r18
    1ad0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	28 ee       	ldi	r18, 0xE8	; 232
    1ada:	33 e0       	ldi	r19, 0x03	; 3
    1adc:	40 e0       	ldi	r20, 0x00	; 0
    1ade:	50 e0       	ldi	r21, 0x00	; 0
    1ae0:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1ae4:	6b 01       	movw	r12, r22
    1ae6:	7c 01       	movw	r14, r24
    1ae8:	65 e0       	ldi	r22, 0x05	; 5
    1aea:	80 e3       	ldi	r24, 0x30	; 48
    1aec:	82 0f       	add	r24, r18
    1aee:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1af2:	c7 01       	movw	r24, r14
    1af4:	b6 01       	movw	r22, r12
    1af6:	24 e6       	ldi	r18, 0x64	; 100
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	50 e0       	ldi	r21, 0x00	; 0
    1afe:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1b02:	6b 01       	movw	r12, r22
    1b04:	7c 01       	movw	r14, r24
    1b06:	65 e0       	ldi	r22, 0x05	; 5
    1b08:	80 e3       	ldi	r24, 0x30	; 48
    1b0a:	82 0f       	add	r24, r18
    1b0c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1b10:	c7 01       	movw	r24, r14
    1b12:	b6 01       	movw	r22, r12
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	50 e0       	ldi	r21, 0x00	; 0
    1b1c:	0e 94 89 14 	call	0x2912	; 0x2912 <__divmodsi4>
    1b20:	c6 2f       	mov	r28, r22
    1b22:	65 e0       	ldi	r22, 0x05	; 5
    1b24:	80 e3       	ldi	r24, 0x30	; 48
    1b26:	82 0f       	add	r24, r18
    1b28:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1b2c:	65 e0       	ldi	r22, 0x05	; 5
    1b2e:	b9 cf       	rjmp	.-142    	; 0x1aa2 <LCD_Nokia_SendInteger+0x332>
    1b30:	65 e0       	ldi	r22, 0x05	; 5
    1b32:	80 e3       	ldi	r24, 0x30	; 48
    1b34:	8c 0d       	add	r24, r12
    1b36:	b7 cf       	rjmp	.-146    	; 0x1aa6 <LCD_Nokia_SendInteger+0x336>
    1b38:	66 e0       	ldi	r22, 0x06	; 6
    1b3a:	80 e3       	ldi	r24, 0x30	; 48
    1b3c:	8c 0d       	add	r24, r12
    1b3e:	b3 cf       	rjmp	.-154    	; 0x1aa6 <LCD_Nokia_SendInteger+0x336>
    1b40:	66 e0       	ldi	r22, 0x06	; 6
    1b42:	8d e2       	ldi	r24, 0x2D	; 45
    1b44:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1b48:	c6 01       	movw	r24, r12
    1b4a:	d7 fc       	sbrc	r13, 7
    1b4c:	27 c0       	rjmp	.+78     	; 0x1b9c <LCD_Nokia_SendInteger+0x42c>
    1b4e:	6c 01       	movw	r12, r24
    1b50:	99 0f       	add	r25, r25
    1b52:	ee 08       	sbc	r14, r14
    1b54:	ff 08       	sbc	r15, r15
    1b56:	ca ce       	rjmp	.-620    	; 0x18ec <LCD_Nokia_SendInteger+0x17c>
    1b58:	65 e0       	ldi	r22, 0x05	; 5
    1b5a:	8d e2       	ldi	r24, 0x2D	; 45
    1b5c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <LCD_Nokia_PutSmallChar>
    1b60:	c6 01       	movw	r24, r12
    1b62:	d7 fc       	sbrc	r13, 7
    1b64:	20 c0       	rjmp	.+64     	; 0x1ba6 <LCD_Nokia_SendInteger+0x436>
    1b66:	6c 01       	movw	r12, r24
    1b68:	99 0f       	add	r25, r25
    1b6a:	ee 08       	sbc	r14, r14
    1b6c:	ff 08       	sbc	r15, r15
    1b6e:	19 ce       	rjmp	.-974    	; 0x17a2 <LCD_Nokia_SendInteger+0x32>
    1b70:	8d e2       	ldi	r24, 0x2D	; 45
    1b72:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    1b76:	c6 01       	movw	r24, r12
    1b78:	d7 fc       	sbrc	r13, 7
    1b7a:	0b c0       	rjmp	.+22     	; 0x1b92 <LCD_Nokia_SendInteger+0x422>
    1b7c:	6c 01       	movw	r12, r24
    1b7e:	99 0f       	add	r25, r25
    1b80:	ee 08       	sbc	r14, r14
    1b82:	ff 08       	sbc	r15, r15
    1b84:	5a ce       	rjmp	.-844    	; 0x183a <LCD_Nokia_SendInteger+0xca>
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <LCD_Nokia_SendInteger+0x41c>
    1b8a:	a5 ce       	rjmp	.-694    	; 0x18d6 <LCD_Nokia_SendInteger+0x166>
    1b8c:	80 e3       	ldi	r24, 0x30	; 48
    1b8e:	8c 0d       	add	r24, r12
    1b90:	44 cf       	rjmp	.-376    	; 0x1a1a <LCD_Nokia_SendInteger+0x2aa>
    1b92:	88 27       	eor	r24, r24
    1b94:	99 27       	eor	r25, r25
    1b96:	8c 19       	sub	r24, r12
    1b98:	9d 09       	sbc	r25, r13
    1b9a:	f0 cf       	rjmp	.-32     	; 0x1b7c <LCD_Nokia_SendInteger+0x40c>
    1b9c:	88 27       	eor	r24, r24
    1b9e:	99 27       	eor	r25, r25
    1ba0:	8c 19       	sub	r24, r12
    1ba2:	9d 09       	sbc	r25, r13
    1ba4:	d4 cf       	rjmp	.-88     	; 0x1b4e <LCD_Nokia_SendInteger+0x3de>
    1ba6:	88 27       	eor	r24, r24
    1ba8:	99 27       	eor	r25, r25
    1baa:	8c 19       	sub	r24, r12
    1bac:	9d 09       	sbc	r25, r13
    1bae:	db cf       	rjmp	.-74     	; 0x1b66 <LCD_Nokia_SendInteger+0x3f6>

00001bb0 <LCD_Nokia_Send5Integer>:
    1bb0:	45 e0       	ldi	r20, 0x05	; 5
    1bb2:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <LCD_Nokia_SendInteger>

00001bb6 <LCD_Nokia_Send12Integer>:
    1bb6:	4c e0       	ldi	r20, 0x0C	; 12
    1bb8:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <LCD_Nokia_SendInteger>

00001bbc <LCD_Nokia_Send6Integer>:
    1bbc:	46 e0       	ldi	r20, 0x06	; 6
    1bbe:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <LCD_Nokia_SendInteger>

00001bc2 <LCD_Nokia_DrawRectangle>:
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	e8 2e       	mov	r14, r24
    1bd0:	d6 2f       	mov	r29, r22
    1bd2:	14 2f       	mov	r17, r20
    1bd4:	f2 2e       	mov	r15, r18
    1bd6:	48 17       	cp	r20, r24
    1bd8:	10 f4       	brcc	.+4      	; 0x1bde <LCD_Nokia_DrawRectangle+0x1c>
    1bda:	e4 2e       	mov	r14, r20
    1bdc:	18 2f       	mov	r17, r24
    1bde:	fd 16       	cp	r15, r29
    1be0:	18 f4       	brcc	.+6      	; 0x1be8 <LCD_Nokia_DrawRectangle+0x26>
    1be2:	8d 2f       	mov	r24, r29
    1be4:	df 2d       	mov	r29, r15
    1be6:	f8 2e       	mov	r15, r24
    1be8:	01 11       	cpse	r16, r1
    1bea:	2d c0       	rjmp	.+90     	; 0x1c46 <LCD_Nokia_DrawRectangle+0x84>
    1bec:	1e 15       	cp	r17, r14
    1bee:	80 f0       	brcs	.+32     	; 0x1c10 <LCD_Nokia_DrawRectangle+0x4e>
    1bf0:	ce 2d       	mov	r28, r14
    1bf2:	6d 2f       	mov	r22, r29
    1bf4:	8c 2f       	mov	r24, r28
    1bf6:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1bfa:	cf 5f       	subi	r28, 0xFF	; 255
    1bfc:	1c 17       	cp	r17, r28
    1bfe:	c8 f7       	brcc	.-14     	; 0x1bf2 <LCD_Nokia_DrawRectangle+0x30>
    1c00:	ce 2d       	mov	r28, r14
    1c02:	6f 2d       	mov	r22, r15
    1c04:	8c 2f       	mov	r24, r28
    1c06:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1c0a:	cf 5f       	subi	r28, 0xFF	; 255
    1c0c:	1c 17       	cp	r17, r28
    1c0e:	c8 f7       	brcc	.-14     	; 0x1c02 <LCD_Nokia_DrawRectangle+0x40>
    1c10:	fd 16       	cp	r15, r29
    1c12:	78 f0       	brcs	.+30     	; 0x1c32 <LCD_Nokia_DrawRectangle+0x70>
    1c14:	cd 2f       	mov	r28, r29
    1c16:	6c 2f       	mov	r22, r28
    1c18:	8e 2d       	mov	r24, r14
    1c1a:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1c1e:	cf 5f       	subi	r28, 0xFF	; 255
    1c20:	fc 16       	cp	r15, r28
    1c22:	c8 f7       	brcc	.-14     	; 0x1c16 <LCD_Nokia_DrawRectangle+0x54>
    1c24:	6d 2f       	mov	r22, r29
    1c26:	81 2f       	mov	r24, r17
    1c28:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1c2c:	df 5f       	subi	r29, 0xFF	; 255
    1c2e:	fd 16       	cp	r15, r29
    1c30:	c8 f7       	brcc	.-14     	; 0x1c24 <LCD_Nokia_DrawRectangle+0x62>
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	ff 90       	pop	r15
    1c3c:	ef 90       	pop	r14
    1c3e:	08 95       	ret
    1c40:	df 5f       	subi	r29, 0xFF	; 255
    1c42:	fd 16       	cp	r15, r29
    1c44:	b0 f3       	brcs	.-20     	; 0x1c32 <LCD_Nokia_DrawRectangle+0x70>
    1c46:	1e 15       	cp	r17, r14
    1c48:	d8 f3       	brcs	.-10     	; 0x1c40 <LCD_Nokia_DrawRectangle+0x7e>
    1c4a:	ce 2d       	mov	r28, r14
    1c4c:	6d 2f       	mov	r22, r29
    1c4e:	8c 2f       	mov	r24, r28
    1c50:	0e 94 5f 09 	call	0x12be	; 0x12be <LCD_Nokia_PutPixel.part.0>
    1c54:	cf 5f       	subi	r28, 0xFF	; 255
    1c56:	1c 17       	cp	r17, r28
    1c58:	c8 f7       	brcc	.-14     	; 0x1c4c <LCD_Nokia_DrawRectangle+0x8a>
    1c5a:	df 5f       	subi	r29, 0xFF	; 255
    1c5c:	fd 16       	cp	r15, r29
    1c5e:	98 f7       	brcc	.-26     	; 0x1c46 <LCD_Nokia_DrawRectangle+0x84>
    1c60:	e8 cf       	rjmp	.-48     	; 0x1c32 <LCD_Nokia_DrawRectangle+0x70>

00001c62 <LCD_Nokia_DrawUnfilledRectangle>:
    1c62:	ef 92       	push	r14
    1c64:	ff 92       	push	r15
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	00 23       	and	r16, r16
    1c70:	a1 f0       	breq	.+40     	; 0x1c9a <LCD_Nokia_DrawUnfilledRectangle+0x38>
    1c72:	e8 2e       	mov	r14, r24
    1c74:	e0 0e       	add	r14, r16
    1c76:	cf ef       	ldi	r28, 0xFF	; 255
    1c78:	c2 0f       	add	r28, r18
    1c7a:	df ef       	ldi	r29, 0xFF	; 255
    1c7c:	d4 0f       	add	r29, r20
    1c7e:	11 e0       	ldi	r17, 0x01	; 1
    1c80:	16 0f       	add	r17, r22
    1c82:	ff 24       	eor	r15, r15
    1c84:	f3 94       	inc	r15
    1c86:	f8 0e       	add	r15, r24
    1c88:	00 e0       	ldi	r16, 0x00	; 0
    1c8a:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LCD_Nokia_DrawRectangle>
    1c8e:	8f 2d       	mov	r24, r15
    1c90:	61 2f       	mov	r22, r17
    1c92:	4d 2f       	mov	r20, r29
    1c94:	2c 2f       	mov	r18, r28
    1c96:	ef 10       	cpse	r14, r15
    1c98:	ee cf       	rjmp	.-36     	; 0x1c76 <LCD_Nokia_DrawUnfilledRectangle+0x14>
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	1f 91       	pop	r17
    1ca0:	0f 91       	pop	r16
    1ca2:	ff 90       	pop	r15
    1ca4:	ef 90       	pop	r14
    1ca6:	08 95       	ret

00001ca8 <LCD_Nokia_UpdateFullScreen>:
// 		}
// 	}
// }

void LCD_Nokia_UpdateFullScreen (void)
{
    1ca8:	cf 93       	push	r28
    1caa:	df 93       	push	r29
	LCD_Nokia_SetPosition(0, 0);
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Nokia_SetPosition>
    1cb4:	c2 eb       	ldi	r28, 0xB2	; 178
    1cb6:	d1 e0       	ldi	r29, 0x01	; 1
	LCD_Nokia_PutByte(byte, 0);
}

void LCD_Nokia_PutDataByte(int8_t byte)
{
	LCD_Nokia_PutByte(byte, 1);
    1cb8:	61 e0       	ldi	r22, 0x01	; 1
    1cba:	89 91       	ld	r24, Y+
    1cbc:	0e 94 77 09 	call	0x12ee	; 0x12ee <LCD_Nokia_PutByte>
// }

void LCD_Nokia_UpdateFullScreen (void)
{
	LCD_Nokia_SetPosition(0, 0);
	for (uint16_t i = 0; i < LCD_NOKIA_BUFFER_SIZE; i++)	LCD_Nokia_PutDataByte(nokiaDisplayPixels.screen[i]);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	ca 3a       	cpi	r28, 0xAA	; 170
    1cc4:	d8 07       	cpc	r29, r24
    1cc6:	c1 f7       	brne	.-16     	; 0x1cb8 <LCD_Nokia_UpdateFullScreen+0x10>
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	08 95       	ret

00001cce <setup>:
}

void setup (void)
{
	IO_Init();
	Buttons_Init();											//	Inputs initialization; initialization of Timer 0 on OCR0A
    1cce:	0e 94 24 04 	call	0x848	; 0x848 <Buttons_Init>
	Speedometer_Init();										//	Inputs initialization; initialization of external interrupts on INT0 pin
    1cd2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <Speedometer_Init>
	
	I2C_Init(I2C_SCL_FREQUENCY, I2C_PRESCALER_BITS);
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	60 ea       	ldi	r22, 0xA0	; 160
    1cda:	76 e8       	ldi	r23, 0x86	; 134
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 67 08 	call	0x10ce	; 0x10ce <I2C_Init>
	SPI_Master_Init();
    1ce4:	0e 94 7f 13 	call	0x26fe	; 0x26fe <SPI_Master_Init>
//	Bluetooth_On();											//	USART initialization
	
	LCD_Nokia_Init();
    1ce8:	0e 94 8d 09 	call	0x131a	; 0x131a <LCD_Nokia_Init>
	
//	GeekSport_Init();										//	Setting time, length of the wheel in mm
	
	sei();
    1cec:	78 94       	sei
    1cee:	08 95       	ret

00001cf0 <main>:
}

int main (void)
{
	setup();
    1cf0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <setup>
	
	while (1)
	{
		GeekSport_SetMode(GeekSport_Mode);
    1cf4:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <GeekSport_Mode>
    1cf8:	0e 94 00 08 	call	0x1000	; 0x1000 <GeekSport_SetMode>
    1cfc:	fb cf       	rjmp	.-10     	; 0x1cf4 <main+0x4>

00001cfe <Speedometer_Init>:
// volatile uint32_t currentDistance = 0;


void Speedometer_IO_Init (void)
{
	SPEEDOMETER_HALL_SWITCH_DDR &= ~(1 << SPEEDOMETER_HALL_SWITCH_PIN);
    1cfe:	52 98       	cbi	0x0a, 2	; 10
	SPEEDOMETER_HALL_SWITCH_PORT |= 1 << SPEEDOMETER_HALL_SWITCH_PIN;
    1d00:	5a 9a       	sbi	0x0b, 2	; 11
}

void Speedometer_Init (void)
{
	Speedometer_IO_Init();
	EICRA |= 1 << ISC01 | 0 << ISC00;															//	Set interrupts on failing edge for the reed switch
    1d02:	e9 e6       	ldi	r30, 0x69	; 105
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	82 60       	ori	r24, 0x02	; 2
    1d0a:	80 83       	st	Z, r24
	EIMSK |= 1 << INT0;																			//	Enable interrupts
    1d0c:	e8 9a       	sbi	0x1d, 0	; 29
    1d0e:	08 95       	ret

00001d10 <Speedometer_Settings>:
}

void Speedometer_Settings (void)
{
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
	uint16_t tempLength;
	
//	Wheel length setting
	GeekSport_SettingsDigit = 0;
    1d18:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1d1c:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	Buttons_SetButtonState = false;
    1d20:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(63, 11);
    1d24:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1d28:	81 11       	cpse	r24, r1
    1d2a:	08 c0       	rjmp	.+16     	; 0x1d3c <Speedometer_Settings+0x2c>
    1d2c:	6b e0       	ldi	r22, 0x0B	; 11
    1d2e:	8f e3       	ldi	r24, 0x3F	; 63
    1d30:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
    1d34:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1d38:	88 23       	and	r24, r24
    1d3a:	c1 f3       	breq	.-16     	; 0x1d2c <Speedometer_Settings+0x1c>
	
	Buttons_SetButtonState = false;
    1d3c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength = (GeekSport_SettingsDigit * 1000);
    1d40:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
    1d44:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1d48:	88 ee       	ldi	r24, 0xE8	; 232
    1d4a:	93 e0       	ldi	r25, 0x03	; 3
    1d4c:	28 9f       	mul	r18, r24
    1d4e:	e0 01       	movw	r28, r0
    1d50:	29 9f       	mul	r18, r25
    1d52:	d0 0d       	add	r29, r0
    1d54:	38 9f       	mul	r19, r24
    1d56:	d0 0d       	add	r29, r0
    1d58:	11 24       	eor	r1, r1
	
	GeekSport_SettingsDigit = 0;
    1d5a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1d5e:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(68, 11);
    1d62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1d66:	81 11       	cpse	r24, r1
    1d68:	08 c0       	rjmp	.+16     	; 0x1d7a <Speedometer_Settings+0x6a>
    1d6a:	6b e0       	ldi	r22, 0x0B	; 11
    1d6c:	84 e4       	ldi	r24, 0x44	; 68
    1d6e:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
    1d72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1d76:	88 23       	and	r24, r24
    1d78:	c1 f3       	breq	.-16     	; 0x1d6a <Speedometer_Settings+0x5a>
	
	Buttons_SetButtonState = false;
    1d7a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength += (GeekSport_SettingsDigit * 100);
    1d7e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
    1d82:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1d86:	24 e6       	ldi	r18, 0x64	; 100
    1d88:	28 9f       	mul	r18, r24
    1d8a:	80 01       	movw	r16, r0
    1d8c:	29 9f       	mul	r18, r25
    1d8e:	10 0d       	add	r17, r0
    1d90:	11 24       	eor	r1, r1
    1d92:	0c 0f       	add	r16, r28
    1d94:	1d 1f       	adc	r17, r29
	
	GeekSport_SettingsDigit = 0;
    1d96:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1d9a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateScreen(73, 11);
    1d9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1da2:	81 11       	cpse	r24, r1
    1da4:	08 c0       	rjmp	.+16     	; 0x1db6 <Speedometer_Settings+0xa6>
    1da6:	6b e0       	ldi	r22, 0x0B	; 11
    1da8:	89 e4       	ldi	r24, 0x49	; 73
    1daa:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
    1dae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1db2:	88 23       	and	r24, r24
    1db4:	c1 f3       	breq	.-16     	; 0x1da6 <Speedometer_Settings+0x96>
	
	Buttons_SetButtonState = false;
    1db6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength += (GeekSport_SettingsDigit * 10);
    1dba:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
    1dbe:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	cc 0f       	add	r28, r28
    1dc6:	dd 1f       	adc	r29, r29
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	88 0f       	add	r24, r24
    1dd2:	99 1f       	adc	r25, r25
    1dd4:	c8 0f       	add	r28, r24
    1dd6:	d9 1f       	adc	r29, r25
	
	GeekSport_SettingsDigit = 0;
    1dd8:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1ddc:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState) GeekSport_LCD_Nokia_UpdateScreen(78, 11);
    1de0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1de4:	81 11       	cpse	r24, r1
    1de6:	08 c0       	rjmp	.+16     	; 0x1df8 <Speedometer_Settings+0xe8>
    1de8:	6b e0       	ldi	r22, 0x0B	; 11
    1dea:	8e e4       	ldi	r24, 0x4E	; 78
    1dec:	0e 94 7f 07 	call	0xefe	; 0xefe <GeekSport_LCD_Nokia_UpdateScreen>
    1df0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1df4:	88 23       	and	r24, r24
    1df6:	c1 f3       	breq	.-16     	; 0x1de8 <Speedometer_Settings+0xd8>
	
	tempLength += GeekSport_SettingsDigit;
    1df8:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <GeekSport_SettingsDigit>
    1dfc:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <GeekSport_SettingsDigit+0x1>
    1e00:	08 0f       	add	r16, r24
    1e02:	19 1f       	adc	r17, r25
    1e04:	c0 0f       	add	r28, r16
    1e06:	d1 1f       	adc	r29, r17
	
	Speedometer_WheelLength_mm = tempLength;
    1e08:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <Speedometer_WheelLength_mm+0x1>
    1e0c:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <Speedometer_WheelLength_mm>
}
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	08 95       	ret

00001e1a <Speedometer_LCD_Nokia_Main>:

void Speedometer_LCD_Nokia_Main (void)
{
    1e1a:	4f 92       	push	r4
    1e1c:	5f 92       	push	r5
    1e1e:	6f 92       	push	r6
    1e20:	7f 92       	push	r7
    1e22:	8f 92       	push	r8
    1e24:	9f 92       	push	r9
    1e26:	af 92       	push	r10
    1e28:	bf 92       	push	r11
    1e2a:	cf 92       	push	r12
    1e2c:	df 92       	push	r13
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
	switch (Speedometer_Mode)
    1e32:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Speedometer_Mode>
    1e36:	81 30       	cpi	r24, 0x01	; 1
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <Speedometer_LCD_Nokia_Main+0x22>
    1e3a:	dc c0       	rjmp	.+440    	; 0x1ff4 <Speedometer_LCD_Nokia_Main+0x1da>
    1e3c:	f8 f0       	brcs	.+62     	; 0x1e7c <Speedometer_LCD_Nokia_Main+0x62>
    1e3e:	82 30       	cpi	r24, 0x02	; 2
    1e40:	81 f4       	brne	.+32     	; 0x1e62 <Speedometer_LCD_Nokia_Main+0x48>
			break;
		}
		
		case SPEEDOMETER_WHEEL_LENGTH_SETING_MODE:
		{
			LCD_Nokia_ClearBuffer();
    1e42:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			
			LCD_Nokia_SetPixelPosition(3, 11);
    1e46:	6b e0       	ldi	r22, 0x0B	; 11
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5CharString_P((int8_t *) setWheelLength);							//	Wheel length setting string
    1e4e:	8c e4       	ldi	r24, 0x4C	; 76
    1e50:	97 e0       	ldi	r25, 0x07	; 7
    1e52:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
			
			Speedometer_Settings();
    1e56:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <Speedometer_Settings>
			
			LCD_Nokia_ClearBuffer();
    1e5a:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			Speedometer_Mode = SPEEDOMETER_SPEED_MEASUREMENT_MODE;
    1e5e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <Speedometer_Mode>
			break;
		}
		
		default:	break;
	}
}
    1e62:	ff 90       	pop	r15
    1e64:	ef 90       	pop	r14
    1e66:	df 90       	pop	r13
    1e68:	cf 90       	pop	r12
    1e6a:	bf 90       	pop	r11
    1e6c:	af 90       	pop	r10
    1e6e:	9f 90       	pop	r9
    1e70:	8f 90       	pop	r8
    1e72:	7f 90       	pop	r7
    1e74:	6f 90       	pop	r6
    1e76:	5f 90       	pop	r5
    1e78:	4f 90       	pop	r4
    1e7a:	08 95       	ret
	switch (Speedometer_Mode)
	{
		case SPEEDOMETER_SPEED_MEASUREMENT_MODE:
		{
			//LCD_Nokia_ClearBuffer();									/////////
			DS1307_ReceiveTimeData();
    1e7c:	0e 94 4a 05 	call	0xa94	; 0xa94 <DS1307_ReceiveTimeData>
			
			//	Out the time
			LCD_Nokia_SetPixelPosition(59, 0);
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	8b e3       	ldi	r24, 0x3B	; 59
    1e84:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5Integer(TimeRegPointer->hours);
    1e88:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
    1e8c:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
    1e90:	62 81       	ldd	r22, Z+2	; 0x02
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Nokia_Send5Integer>
			LCD_Nokia_Put5Char(':');
    1e9c:	8a e3       	ldi	r24, 0x3A	; 58
    1e9e:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
			LCD_Nokia_Send5Integer(TimeRegPointer->minutes);
    1ea2:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <TimeRegPointer>
    1ea6:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <TimeRegPointer+0x1>
    1eaa:	61 81       	ldd	r22, Z+1	; 0x01
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <LCD_Nokia_Send5Integer>
			
			//	Out the current speed
			uint32_t temp = Speedometer_Speed_mmps;
    1eb6:	c0 90 c8 01 	lds	r12, 0x01C8	; 0x8001c8 <Speedometer_Speed_mmps>
    1eba:	d0 90 c9 01 	lds	r13, 0x01C9	; 0x8001c9 <Speedometer_Speed_mmps+0x1>
    1ebe:	e0 90 ca 01 	lds	r14, 0x01CA	; 0x8001ca <Speedometer_Speed_mmps+0x2>
    1ec2:	f0 90 cb 01 	lds	r15, 0x01CB	; 0x8001cb <Speedometer_Speed_mmps+0x3>
			LCD_Nokia_SetPixelPosition(0, 12);
    1ec6:	6c e0       	ldi	r22, 0x0C	; 12
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			if (temp == 0)
    1ece:	c1 14       	cp	r12, r1
    1ed0:	d1 04       	cpc	r13, r1
    1ed2:	e1 04       	cpc	r14, r1
    1ed4:	f1 04       	cpc	r15, r1
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <Speedometer_LCD_Nokia_Main+0xc0>
    1ed8:	0a c2       	rjmp	.+1044   	; 0x22ee <Speedometer_LCD_Nokia_Main+0x4d4>
			{
				LCD_Nokia_Send12CharString_P((int8_t *) PSTR("00"));
			}
			else if (((temp * 36) / 10000) < 10)
    1eda:	d7 01       	movw	r26, r14
    1edc:	c6 01       	movw	r24, r12
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	aa 1f       	adc	r26, r26
    1ee4:	bb 1f       	adc	r27, r27
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	aa 1f       	adc	r26, r26
    1eec:	bb 1f       	adc	r27, r27
    1eee:	88 0f       	add	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	aa 1f       	adc	r26, r26
    1ef4:	bb 1f       	adc	r27, r27
    1ef6:	c8 0e       	add	r12, r24
    1ef8:	d9 1e       	adc	r13, r25
    1efa:	ea 1e       	adc	r14, r26
    1efc:	fb 1e       	adc	r15, r27
    1efe:	cc 0c       	add	r12, r12
    1f00:	dd 1c       	adc	r13, r13
    1f02:	ee 1c       	adc	r14, r14
    1f04:	ff 1c       	adc	r15, r15
    1f06:	cc 0c       	add	r12, r12
    1f08:	dd 1c       	adc	r13, r13
    1f0a:	ee 1c       	adc	r14, r14
    1f0c:	ff 1c       	adc	r15, r15
    1f0e:	20 ea       	ldi	r18, 0xA0	; 160
    1f10:	c2 16       	cp	r12, r18
    1f12:	26 e8       	ldi	r18, 0x86	; 134
    1f14:	d2 06       	cpc	r13, r18
    1f16:	21 e0       	ldi	r18, 0x01	; 1
    1f18:	e2 06       	cpc	r14, r18
    1f1a:	f1 04       	cpc	r15, r1
    1f1c:	08 f0       	brcs	.+2      	; 0x1f20 <Speedometer_LCD_Nokia_Main+0x106>
    1f1e:	66 c2       	rjmp	.+1228   	; 0x23ec <Speedometer_LCD_Nokia_Main+0x5d2>
			{
				LCD_Nokia_Put12Char('0');
    1f20:	80 e3       	ldi	r24, 0x30	; 48
    1f22:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
				LCD_Nokia_Put12Char(((temp * 36) / 10000) + ASCII_NULL);
    1f26:	c7 01       	movw	r24, r14
    1f28:	b6 01       	movw	r22, r12
    1f2a:	20 e1       	ldi	r18, 0x10	; 16
    1f2c:	37 e2       	ldi	r19, 0x27	; 39
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    1f36:	80 e3       	ldi	r24, 0x30	; 48
    1f38:	82 0f       	add	r24, r18
    1f3a:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
			}
			LCD_Nokia_SetPixelPosition(23, 21);
    1f3e:	65 e1       	ldi	r22, 0x15	; 21
    1f40:	87 e1       	ldi	r24, 0x17	; 23
    1f42:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    1f46:	8e e2       	ldi	r24, 0x2E	; 46
    1f48:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(26, 12);
    1f4c:	6c e0       	ldi	r22, 0x0C	; 12
    1f4e:	8a e1       	ldi	r24, 0x1A	; 26
    1f50:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	20 e1       	ldi	r18, 0x10	; 16
    1f5a:	37 e2       	ldi	r19, 0x27	; 39
    1f5c:	40 e0       	ldi	r20, 0x00	; 0
    1f5e:	50 e0       	ldi	r21, 0x00	; 0
    1f60:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    1f64:	6b 01       	movw	r12, r22
    1f66:	7c 01       	movw	r14, r24
    1f68:	21 e0       	ldi	r18, 0x01	; 1
    1f6a:	c2 1a       	sub	r12, r18
    1f6c:	d1 08       	sbc	r13, r1
    1f6e:	e1 08       	sbc	r14, r1
    1f70:	f1 08       	sbc	r15, r1
    1f72:	20 ea       	ldi	r18, 0xA0	; 160
    1f74:	c2 16       	cp	r12, r18
    1f76:	26 e8       	ldi	r18, 0x86	; 134
    1f78:	d2 06       	cpc	r13, r18
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	e2 06       	cpc	r14, r18
    1f7e:	f1 04       	cpc	r15, r1
    1f80:	08 f0       	brcs	.+2      	; 0x1f84 <Speedometer_LCD_Nokia_Main+0x16a>
    1f82:	c4 c1       	rjmp	.+904    	; 0x230c <Speedometer_LCD_Nokia_Main+0x4f2>
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
    1f84:	6b 01       	movw	r12, r22
    1f86:	7c 01       	movw	r14, r24
    1f88:	29 ee       	ldi	r18, 0xE9	; 233
    1f8a:	c2 1a       	sub	r12, r18
    1f8c:	23 e0       	ldi	r18, 0x03	; 3
    1f8e:	d2 0a       	sbc	r13, r18
    1f90:	e1 08       	sbc	r14, r1
    1f92:	f1 08       	sbc	r15, r1
    1f94:	28 e2       	ldi	r18, 0x28	; 40
    1f96:	c2 16       	cp	r12, r18
    1f98:	23 e2       	ldi	r18, 0x23	; 35
    1f9a:	d2 06       	cpc	r13, r18
    1f9c:	e1 04       	cpc	r14, r1
    1f9e:	f1 04       	cpc	r15, r1
    1fa0:	08 f4       	brcc	.+2      	; 0x1fa4 <Speedometer_LCD_Nokia_Main+0x18a>
    1fa2:	45 c2       	rjmp	.+1162   	; 0x242e <Speedometer_LCD_Nokia_Main+0x614>
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
    1fa4:	6b 01       	movw	r12, r22
    1fa6:	7c 01       	movw	r14, r24
    1fa8:	25 e6       	ldi	r18, 0x65	; 101
    1faa:	c2 1a       	sub	r12, r18
    1fac:	d1 08       	sbc	r13, r1
    1fae:	e1 08       	sbc	r14, r1
    1fb0:	f1 08       	sbc	r15, r1
    1fb2:	24 e8       	ldi	r18, 0x84	; 132
    1fb4:	c2 16       	cp	r12, r18
    1fb6:	23 e0       	ldi	r18, 0x03	; 3
    1fb8:	d2 06       	cpc	r13, r18
    1fba:	e1 04       	cpc	r14, r1
    1fbc:	f1 04       	cpc	r15, r1
    1fbe:	08 f4       	brcc	.+2      	; 0x1fc2 <Speedometer_LCD_Nokia_Main+0x1a8>
    1fc0:	41 c2       	rjmp	.+1154   	; 0x2444 <Speedometer_LCD_Nokia_Main+0x62a>
			else if ((((temp * 36) % 10000) > 10) && (((temp * 36) % 10000) <= 100))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10) + ASCII_NULL);
    1fc2:	6b 01       	movw	r12, r22
    1fc4:	7c 01       	movw	r14, r24
    1fc6:	2b e0       	ldi	r18, 0x0B	; 11
    1fc8:	c2 1a       	sub	r12, r18
    1fca:	d1 08       	sbc	r13, r1
    1fcc:	e1 08       	sbc	r14, r1
    1fce:	f1 08       	sbc	r15, r1
    1fd0:	2a e5       	ldi	r18, 0x5A	; 90
    1fd2:	c2 16       	cp	r12, r18
    1fd4:	d1 04       	cpc	r13, r1
    1fd6:	e1 04       	cpc	r14, r1
    1fd8:	f1 04       	cpc	r15, r1
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <Speedometer_LCD_Nokia_Main+0x1c4>
    1fdc:	9a c1       	rjmp	.+820    	; 0x2312 <Speedometer_LCD_Nokia_Main+0x4f8>
    1fde:	2a e0       	ldi	r18, 0x0A	; 10
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e0       	ldi	r20, 0x00	; 0
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    1fea:	80 e3       	ldi	r24, 0x30	; 48
    1fec:	82 0f       	add	r24, r18
    1fee:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    1ff2:	8f c1       	rjmp	.+798    	; 0x2312 <Speedometer_LCD_Nokia_Main+0x4f8>
			break;
		}
		
		case SPEEDOMETER_SCREEN_MODE:
		{
			LCD_Nokia_ClearBuffer();
    1ff4:	0e 94 85 09 	call	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			
			Buttons_SetButtonState = false;
    1ff8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
			while (!Buttons_SetButtonState)
    1ffc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    2000:	81 11       	cpse	r24, r1
    2002:	67 c1       	rjmp	.+718    	; 0x22d2 <Speedometer_LCD_Nokia_Main+0x4b8>
//				LCD_Nokia_SetPixelPosition(0,0);
//				LCD_Nokia_Send6CharString_P((int8_t *) );
				
				LCD_Nokia_SetPixelPosition(0,8);
				LCD_Nokia_Send6CharString_P((int8_t *) odoString);
				LCD_Nokia_Send6Integer(totalDistance / 1000);
    2004:	88 ee       	ldi	r24, 0xE8	; 232
    2006:	88 2e       	mov	r8, r24
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	98 2e       	mov	r9, r24
    200c:	a1 2c       	mov	r10, r1
    200e:	b1 2c       	mov	r11, r1
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_SetPixelPosition(0,16);
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
				if ((totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(totalTime / 3600);
    2010:	90 e1       	ldi	r25, 0x10	; 16
    2012:	c9 2e       	mov	r12, r25
    2014:	9e e0       	ldi	r25, 0x0E	; 14
    2016:	d9 2e       	mov	r13, r25
    2018:	e1 2c       	mov	r14, r1
    201a:	f1 2c       	mov	r15, r1
				LCD_Nokia_Put6Char(':');
				if (((totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((totalTime % 3600) / 60);
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((totalTime % 3600) / 60) + ASCII_NULL);
    201c:	2c e3       	ldi	r18, 0x3C	; 60
    201e:	42 2e       	mov	r4, r18
    2020:	51 2c       	mov	r5, r1
    2022:	61 2c       	mov	r6, r1
    2024:	71 2c       	mov	r7, r1
    2026:	df c0       	rjmp	.+446    	; 0x21e6 <Speedometer_LCD_Nokia_Main+0x3cc>
				LCD_Nokia_Send6Integer(totalDistance / 1000);
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_SetPixelPosition(0,16);
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
				if ((totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(totalTime / 3600);
    2028:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    202c:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    2030:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    2034:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2038:	a7 01       	movw	r20, r14
    203a:	96 01       	movw	r18, r12
    203c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2040:	ca 01       	movw	r24, r20
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char((totalTime / 3600) + ASCII_NULL);
				}
				LCD_Nokia_Put6Char(':');
    2048:	8a e3       	ldi	r24, 0x3A	; 58
    204a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
				if (((totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((totalTime % 3600) / 60);
    204e:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    2052:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    2056:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    205a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    205e:	a7 01       	movw	r20, r14
    2060:	96 01       	movw	r18, r12
    2062:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2066:	68 35       	cpi	r22, 0x58	; 88
    2068:	72 40       	sbci	r23, 0x02	; 2
    206a:	81 05       	cpc	r24, r1
    206c:	91 05       	cpc	r25, r1
    206e:	08 f4       	brcc	.+2      	; 0x2072 <Speedometer_LCD_Nokia_Main+0x258>
    2070:	18 c1       	rjmp	.+560    	; 0x22a2 <Speedometer_LCD_Nokia_Main+0x488>
    2072:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    2076:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    207a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    207e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2082:	a7 01       	movw	r20, r14
    2084:	96 01       	movw	r18, r12
    2086:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    208a:	a3 01       	movw	r20, r6
    208c:	92 01       	movw	r18, r4
    208e:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2092:	ca 01       	movw	r24, r20
    2094:	b9 01       	movw	r22, r18
    2096:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((totalTime % 3600) / 60) + ASCII_NULL);
				}
				LCD_Nokia_Put6Char(':');
    209a:	8a e3       	ldi	r24, 0x3A	; 58
    209c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
				if (((totalTime % 3600) % 60) > 9)	LCD_Nokia_Send6Integer((totalTime % 3600) % 60);
    20a0:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    20a4:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    20a8:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    20ac:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    20b0:	a7 01       	movw	r20, r14
    20b2:	96 01       	movw	r18, r12
    20b4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    20b8:	a3 01       	movw	r20, r6
    20ba:	92 01       	movw	r18, r4
    20bc:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    20c0:	6a 30       	cpi	r22, 0x0A	; 10
    20c2:	71 05       	cpc	r23, r1
    20c4:	81 05       	cpc	r24, r1
    20c6:	91 05       	cpc	r25, r1
    20c8:	08 f4       	brcc	.+2      	; 0x20cc <Speedometer_LCD_Nokia_Main+0x2b2>
    20ca:	d3 c0       	rjmp	.+422    	; 0x2272 <Speedometer_LCD_Nokia_Main+0x458>
    20cc:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    20d0:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    20d4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    20d8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    20dc:	a7 01       	movw	r20, r14
    20de:	96 01       	movw	r18, r12
    20e0:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    20e4:	a3 01       	movw	r20, r6
    20e6:	92 01       	movw	r18, r4
    20e8:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    20ec:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((totalTime % 3600) % 60) + ASCII_NULL);
				}
				
				LCD_Nokia_SetPixelPosition(0,24);
    20f0:	68 e1       	ldi	r22, 0x18	; 24
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) averageVelocityString);
    20f8:	89 e2       	ldi	r24, 0x29	; 41
    20fa:	97 e0       	ldi	r25, 0x07	; 7
    20fc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer((averageVelocity * 3600) / 1000);
    2100:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <averageVelocity>
    2104:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <averageVelocity+0x1>
    2108:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <averageVelocity+0x2>
    210c:	50 91 bd 01 	lds	r21, 0x01BD	; 0x8001bd <averageVelocity+0x3>
    2110:	a0 e1       	ldi	r26, 0x10	; 16
    2112:	be e0       	ldi	r27, 0x0E	; 14
    2114:	0e 94 a8 14 	call	0x2950	; 0x2950 <__muluhisi3>
    2118:	a5 01       	movw	r20, r10
    211a:	94 01       	movw	r18, r8
    211c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2120:	ca 01       	movw	r24, r20
    2122:	b9 01       	movw	r22, r18
    2124:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) kmh);
    2128:	82 e4       	ldi	r24, 0x42	; 66
    212a:	97 e0       	ldi	r25, 0x07	; 7
    212c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,32);
    2130:	60 e2       	ldi	r22, 0x20	; 32
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) maxVelocityString);
    2138:	8f e2       	ldi	r24, 0x2F	; 47
    213a:	97 e0       	ldi	r25, 0x07	; 7
    213c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer((maxVelocity * 3600) / 1000);
    2140:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <maxVelocity>
    2144:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <maxVelocity+0x1>
    2148:	40 91 b8 01 	lds	r20, 0x01B8	; 0x8001b8 <maxVelocity+0x2>
    214c:	50 91 b9 01 	lds	r21, 0x01B9	; 0x8001b9 <maxVelocity+0x3>
    2150:	a0 e1       	ldi	r26, 0x10	; 16
    2152:	be e0       	ldi	r27, 0x0E	; 14
    2154:	0e 94 a8 14 	call	0x2950	; 0x2950 <__muluhisi3>
    2158:	a5 01       	movw	r20, r10
    215a:	94 01       	movw	r18, r8
    215c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2160:	ca 01       	movw	r24, r20
    2162:	b9 01       	movw	r22, r18
    2164:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) kmh);
    2168:	82 e4       	ldi	r24, 0x42	; 66
    216a:	97 e0       	ldi	r25, 0x07	; 7
    216c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,40);
    2170:	68 e2       	ldi	r22, 0x28	; 40
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t* ) dstString);
    2178:	83 e2       	ldi	r24, 0x23	; 35
    217a:	97 e0       	ldi	r25, 0x07	; 7
    217c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer(currentDistance / 1000);
    2180:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <currentDistance>
    2184:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <currentDistance+0x1>
    2188:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentDistance+0x2>
    218c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentDistance+0x3>
    2190:	a5 01       	movw	r20, r10
    2192:	94 01       	movw	r18, r8
    2194:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2198:	ca 01       	movw	r24, r20
    219a:	b9 01       	movw	r22, r18
    219c:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				LCD_Nokia_SetPixelPosition(48, 40);
    21a0:	68 e2       	ldi	r22, 0x28	; 40
    21a2:	80 e3       	ldi	r24, 0x30	; 48
    21a4:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Put5Char('.');
    21a8:	8e e2       	ldi	r24, 0x2E	; 46
    21aa:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
				LCD_Nokia_SetPixelPosition(51, 40);
    21ae:	68 e2       	ldi	r22, 0x28	; 40
    21b0:	83 e3       	ldi	r24, 0x33	; 51
    21b2:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6Integer(currentDistance % 1000);
    21b6:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <currentDistance>
    21ba:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <currentDistance+0x1>
    21be:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentDistance+0x2>
    21c2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentDistance+0x3>
    21c6:	a5 01       	movw	r20, r10
    21c8:	94 01       	movw	r18, r8
    21ca:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    21ce:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
    21d2:	88 e4       	ldi	r24, 0x48	; 72
    21d4:	97 e0       	ldi	r25, 0x07	; 7
    21d6:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_UpdateFullScreen();
    21da:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
		case SPEEDOMETER_SCREEN_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetButtonState = false;
			while (!Buttons_SetButtonState)
    21de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    21e2:	81 11       	cpse	r24, r1
    21e4:	76 c0       	rjmp	.+236    	; 0x22d2 <Speedometer_LCD_Nokia_Main+0x4b8>
			{
//				LCD_Nokia_SetPixelPosition(0,0);
//				LCD_Nokia_Send6CharString_P((int8_t *) );
				
				LCD_Nokia_SetPixelPosition(0,8);
    21e6:	68 e0       	ldi	r22, 0x08	; 8
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) odoString);
    21ee:	8c e3       	ldi	r24, 0x3C	; 60
    21f0:	97 e0       	ldi	r25, 0x07	; 7
    21f2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer(totalDistance / 1000);
    21f6:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <totalDistance>
    21fa:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <totalDistance+0x1>
    21fe:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <totalDistance+0x2>
    2202:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <totalDistance+0x3>
    2206:	a5 01       	movw	r20, r10
    2208:	94 01       	movw	r18, r8
    220a:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    220e:	ca 01       	movw	r24, r20
    2210:	b9 01       	movw	r22, r18
    2212:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
    2216:	88 e4       	ldi	r24, 0x48	; 72
    2218:	97 e0       	ldi	r25, 0x07	; 7
    221a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,16);
    221e:	60 e1       	ldi	r22, 0x10	; 16
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
    2226:	85 e3       	ldi	r24, 0x35	; 53
    2228:	97 e0       	ldi	r25, 0x07	; 7
    222a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
				if ((totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(totalTime / 3600);
    222e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <totalTime>
    2232:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <totalTime+0x1>
    2236:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <totalTime+0x2>
    223a:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <totalTime+0x3>
    223e:	80 3a       	cpi	r24, 0xA0	; 160
    2240:	9c 48       	sbci	r25, 0x8C	; 140
    2242:	a1 05       	cpc	r26, r1
    2244:	b1 05       	cpc	r27, r1
    2246:	08 f0       	brcs	.+2      	; 0x224a <Speedometer_LCD_Nokia_Main+0x430>
    2248:	ef ce       	rjmp	.-546    	; 0x2028 <Speedometer_LCD_Nokia_Main+0x20e>
				else
				{
					LCD_Nokia_Put6Char('0');
    224a:	80 e3       	ldi	r24, 0x30	; 48
    224c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char((totalTime / 3600) + ASCII_NULL);
    2250:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    2254:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    2258:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    225c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2260:	a7 01       	movw	r20, r14
    2262:	96 01       	movw	r18, r12
    2264:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2268:	80 e3       	ldi	r24, 0x30	; 48
    226a:	82 0f       	add	r24, r18
    226c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
    2270:	eb ce       	rjmp	.-554    	; 0x2048 <Speedometer_LCD_Nokia_Main+0x22e>
				}
				LCD_Nokia_Put6Char(':');
				if (((totalTime % 3600) % 60) > 9)	LCD_Nokia_Send6Integer((totalTime % 3600) % 60);
				else
				{
					LCD_Nokia_Put6Char('0');
    2272:	80 e3       	ldi	r24, 0x30	; 48
    2274:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char(((totalTime % 3600) % 60) + ASCII_NULL);
    2278:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    227c:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    2280:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    2284:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2288:	a7 01       	movw	r20, r14
    228a:	96 01       	movw	r18, r12
    228c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2290:	a3 01       	movw	r20, r6
    2292:	92 01       	movw	r18, r4
    2294:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2298:	80 e3       	ldi	r24, 0x30	; 48
    229a:	86 0f       	add	r24, r22
    229c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
    22a0:	27 cf       	rjmp	.-434    	; 0x20f0 <Speedometer_LCD_Nokia_Main+0x2d6>
				}
				LCD_Nokia_Put6Char(':');
				if (((totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((totalTime % 3600) / 60);
				else
				{
					LCD_Nokia_Put6Char('0');
    22a2:	80 e3       	ldi	r24, 0x30	; 48
    22a4:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char(((totalTime % 3600) / 60) + ASCII_NULL);
    22a8:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <totalTime>
    22ac:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <totalTime+0x1>
    22b0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <totalTime+0x2>
    22b4:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <totalTime+0x3>
    22b8:	a7 01       	movw	r20, r14
    22ba:	96 01       	movw	r18, r12
    22bc:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    22c0:	a3 01       	movw	r20, r6
    22c2:	92 01       	movw	r18, r4
    22c4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    22c8:	80 e3       	ldi	r24, 0x30	; 48
    22ca:	82 0f       	add	r24, r18
    22cc:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <LCD_Nokia_Put6Char>
    22d0:	e4 ce       	rjmp	.-568    	; 0x209a <Speedometer_LCD_Nokia_Main+0x280>
			break;
		}
		
		default:	break;
	}
}
    22d2:	ff 90       	pop	r15
    22d4:	ef 90       	pop	r14
    22d6:	df 90       	pop	r13
    22d8:	cf 90       	pop	r12
    22da:	bf 90       	pop	r11
    22dc:	af 90       	pop	r10
    22de:	9f 90       	pop	r9
    22e0:	8f 90       	pop	r8
    22e2:	7f 90       	pop	r7
    22e4:	6f 90       	pop	r6
    22e6:	5f 90       	pop	r5
    22e8:	4f 90       	pop	r4
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_UpdateFullScreen();
			}
			
			LCD_Nokia_ClearBuffer();
    22ea:	0c 94 85 09 	jmp	0x130a	; 0x130a <LCD_Nokia_ClearBuffer>
			//	Out the current speed
			uint32_t temp = Speedometer_Speed_mmps;
			LCD_Nokia_SetPixelPosition(0, 12);
			if (temp == 0)
			{
				LCD_Nokia_Send12CharString_P((int8_t *) PSTR("00"));
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	97 e0       	ldi	r25, 0x07	; 7
    22f2:	0e 94 a5 0b 	call	0x174a	; 0x174a <LCD_Nokia_Send12CharString_P>
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
			}
			LCD_Nokia_SetPixelPosition(23, 21);
    22f6:	65 e1       	ldi	r22, 0x15	; 21
    22f8:	87 e1       	ldi	r24, 0x17	; 23
    22fa:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    22fe:	8e e2       	ldi	r24, 0x2E	; 46
    2300:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(26, 12);
    2304:	6c e0       	ldi	r22, 0x0C	; 12
    2306:	8a e1       	ldi	r24, 0x1A	; 26
    2308:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
    230c:	80 e3       	ldi	r24, 0x30	; 48
    230e:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 10) && (((temp * 36) % 10000) <= 100))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10) + ASCII_NULL);
			
			LCD_Nokia_SetPixelPosition(43, 21);
    2312:	65 e1       	ldi	r22, 0x15	; 21
    2314:	8b e2       	ldi	r24, 0x2B	; 43
    2316:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) kmh);
    231a:	82 e4       	ldi	r24, 0x42	; 66
    231c:	97 e0       	ldi	r25, 0x07	; 7
    231e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			
			//	Out another data
			LCD_Nokia_SetPixelPosition(0 , 33);
    2322:	61 e2       	ldi	r22, 0x21	; 33
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) odoString);
    232a:	8c e3       	ldi	r24, 0x3C	; 60
    232c:	97 e0       	ldi	r25, 0x07	; 7
    232e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6Integer(totalDistance / 1000);
    2332:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <totalDistance>
    2336:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <totalDistance+0x1>
    233a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <totalDistance+0x2>
    233e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <totalDistance+0x3>
    2342:	38 ee       	ldi	r19, 0xE8	; 232
    2344:	c3 2e       	mov	r12, r19
    2346:	33 e0       	ldi	r19, 0x03	; 3
    2348:	d3 2e       	mov	r13, r19
    234a:	e1 2c       	mov	r14, r1
    234c:	f1 2c       	mov	r15, r1
    234e:	a7 01       	movw	r20, r14
    2350:	96 01       	movw	r18, r12
    2352:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2356:	ca 01       	movw	r24, r20
    2358:	b9 01       	movw	r22, r18
    235a:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
    235e:	88 e4       	ldi	r24, 0x48	; 72
    2360:	97 e0       	ldi	r25, 0x07	; 7
    2362:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(0, 41);
    2366:	69 e2       	ldi	r22, 0x29	; 41
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dstString);
    236e:	83 e2       	ldi	r24, 0x23	; 35
    2370:	97 e0       	ldi	r25, 0x07	; 7
    2372:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6Integer(currentDistance / 1000);
    2376:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <currentDistance>
    237a:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <currentDistance+0x1>
    237e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentDistance+0x2>
    2382:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentDistance+0x3>
    2386:	a7 01       	movw	r20, r14
    2388:	96 01       	movw	r18, r12
    238a:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    238e:	ca 01       	movw	r24, r20
    2390:	b9 01       	movw	r22, r18
    2392:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
			LCD_Nokia_SetPixelPosition(48, 41);
    2396:	69 e2       	ldi	r22, 0x29	; 41
    2398:	80 e3       	ldi	r24, 0x30	; 48
    239a:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    239e:	8e e2       	ldi	r24, 0x2E	; 46
    23a0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(51, 41);
    23a4:	69 e2       	ldi	r22, 0x29	; 41
    23a6:	83 e3       	ldi	r24, 0x33	; 51
    23a8:	0e 94 cf 09 	call	0x139e	; 0x139e <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6Integer(currentDistance % 1000);
    23ac:	60 91 b2 01 	lds	r22, 0x01B2	; 0x8001b2 <currentDistance>
    23b0:	70 91 b3 01 	lds	r23, 0x01B3	; 0x8001b3 <currentDistance+0x1>
    23b4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <currentDistance+0x2>
    23b8:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <currentDistance+0x3>
    23bc:	a7 01       	movw	r20, r14
    23be:	96 01       	movw	r18, r12
    23c0:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    23c4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <LCD_Nokia_Send6Integer>
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
    23c8:	88 e4       	ldi	r24, 0x48	; 72
    23ca:	97 e0       	ldi	r25, 0x07	; 7
    23cc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <LCD_Nokia_Send6CharString_P>
			break;
		}
		
		default:	break;
	}
}
    23d0:	ff 90       	pop	r15
    23d2:	ef 90       	pop	r14
    23d4:	df 90       	pop	r13
    23d6:	cf 90       	pop	r12
    23d8:	bf 90       	pop	r11
    23da:	af 90       	pop	r10
    23dc:	9f 90       	pop	r9
    23de:	8f 90       	pop	r8
    23e0:	7f 90       	pop	r7
    23e2:	6f 90       	pop	r6
    23e4:	5f 90       	pop	r5
    23e6:	4f 90       	pop	r4
			LCD_Nokia_Put5Char('.');
			LCD_Nokia_SetPixelPosition(51, 41);
			LCD_Nokia_Send6Integer(currentDistance % 1000);
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
			
			LCD_Nokia_UpdateFullScreen();
    23e8:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <LCD_Nokia_UpdateFullScreen>
				LCD_Nokia_Put12Char('0');
				LCD_Nokia_Put12Char(((temp * 36) / 10000) + ASCII_NULL);
			}
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	20 ea       	ldi	r18, 0xA0	; 160
    23f2:	36 e8       	ldi	r19, 0x86	; 134
    23f4:	41 e0       	ldi	r20, 0x01	; 1
    23f6:	50 e0       	ldi	r21, 0x00	; 0
    23f8:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    23fc:	80 e3       	ldi	r24, 0x30	; 48
    23fe:	82 0f       	add	r24, r18
    2400:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
    2404:	c7 01       	movw	r24, r14
    2406:	b6 01       	movw	r22, r12
    2408:	20 e1       	ldi	r18, 0x10	; 16
    240a:	37 e2       	ldi	r19, 0x27	; 39
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	50 e0       	ldi	r21, 0x00	; 0
    2410:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2414:	ca 01       	movw	r24, r20
    2416:	b9 01       	movw	r22, r18
    2418:	2a e0       	ldi	r18, 0x0A	; 10
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2424:	80 e3       	ldi	r24, 0x30	; 48
    2426:	86 0f       	add	r24, r22
    2428:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    242c:	88 cd       	rjmp	.-1264   	; 0x1f3e <Speedometer_LCD_Nokia_Main+0x124>
			LCD_Nokia_Put5Char('.');
			LCD_Nokia_SetPixelPosition(26, 12);
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
    242e:	28 ee       	ldi	r18, 0xE8	; 232
    2430:	33 e0       	ldi	r19, 0x03	; 3
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	50 e0       	ldi	r21, 0x00	; 0
    2436:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    243a:	80 e3       	ldi	r24, 0x30	; 48
    243c:	82 0f       	add	r24, r18
    243e:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    2442:	67 cf       	rjmp	.-306    	; 0x2312 <Speedometer_LCD_Nokia_Main+0x4f8>
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
    2444:	24 e6       	ldi	r18, 0x64	; 100
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e0       	ldi	r20, 0x00	; 0
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2450:	80 e3       	ldi	r24, 0x30	; 48
    2452:	82 0f       	add	r24, r18
    2454:	0e 94 10 0b 	call	0x1620	; 0x1620 <LCD_Nokia_Put12Char>
    2458:	5c cf       	rjmp	.-328    	; 0x2312 <Speedometer_LCD_Nokia_Main+0x4f8>

0000245a <__vector_1>:
//	Update time: 1 second;
//	Stability: Normal;
//	Accuracy: Good;
//	Problems: unstability on velocities > 50 km/h;
ISR (INT0_vect)
{
    245a:	1f 92       	push	r1
    245c:	0f 92       	push	r0
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	0f 92       	push	r0
    2462:	11 24       	eor	r1, r1
    2464:	8f 93       	push	r24
    2466:	9f 93       	push	r25
	if (!Speedometer_IsRunning)
    2468:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <Speedometer_IsRunning>
    246c:	88 23       	and	r24, r24
    246e:	61 f0       	breq	.+24     	; 0x2488 <__vector_1+0x2e>
		OCR1A = 0x03D0;																					//	If F_CPU = 1MHz and prescaler = 1024, T = 1 second
		OCR1B = 0x03D0;//?????????????????????
		TCCR1B |= 1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10;										//	Prescaler = F_CPU / 1024
		TIMSK1 |= 1 << OCIE1A | 1 << OCIE1B;															//	Enable timer interrupts
	}
	else	Speedometer_RevolutionCounter++;
    2470:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <Speedometer_RevolutionCounter>
    2474:	8f 5f       	subi	r24, 0xFF	; 255
    2476:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Speedometer_RevolutionCounter>
}
    247a:	9f 91       	pop	r25
    247c:	8f 91       	pop	r24
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	0f 90       	pop	r0
    2484:	1f 90       	pop	r1
    2486:	18 95       	reti
//	Problems: unstability on velocities > 50 km/h;
ISR (INT0_vect)
{
	if (!Speedometer_IsRunning)
	{
		Speedometer_IsRunning = true;
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Speedometer_IsRunning>
		Speedometer_RevolutionCounter = 1;
    248e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <Speedometer_RevolutionCounter>
		Speedometer_TimerCounter = 1;
    2492:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Speedometer_TimerCounter>
		
		OCR1A = 0x03D0;																					//	If F_CPU = 1MHz and prescaler = 1024, T = 1 second
    2496:	80 ed       	ldi	r24, 0xD0	; 208
    2498:	93 e0       	ldi	r25, 0x03	; 3
    249a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    249e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x03D0;//?????????????????????
    24a2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    24a6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		TCCR1B |= 1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10;										//	Prescaler = F_CPU / 1024
    24aa:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    24ae:	8d 60       	ori	r24, 0x0D	; 13
    24b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TIMSK1 |= 1 << OCIE1A | 1 << OCIE1B;															//	Enable timer interrupts
    24b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    24b8:	86 60       	ori	r24, 0x06	; 6
    24ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	}
	else	Speedometer_RevolutionCounter++;
}
    24be:	9f 91       	pop	r25
    24c0:	8f 91       	pop	r24
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	0f 90       	pop	r0
    24c8:	1f 90       	pop	r1
    24ca:	18 95       	reti

000024cc <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
    24cc:	1f 92       	push	r1
    24ce:	0f 92       	push	r0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	0f 92       	push	r0
    24d4:	11 24       	eor	r1, r1
    24d6:	2f 93       	push	r18
    24d8:	3f 93       	push	r19
    24da:	4f 93       	push	r20
    24dc:	5f 93       	push	r21
    24de:	6f 93       	push	r22
    24e0:	7f 93       	push	r23
    24e2:	8f 93       	push	r24
    24e4:	9f 93       	push	r25
    24e6:	af 93       	push	r26
    24e8:	bf 93       	push	r27
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
    24ea:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Speedometer_TimerCounter>
	{
		Speedometer_Speed_mmps = (Speedometer_WheelLength_mm * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    24ee:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <Speedometer_RevolutionCounter>
    24f2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <Speedometer_WheelLength_mm>
    24f6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <Speedometer_WheelLength_mm+0x1>
    24fa:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <Speedometer_TimerCounter>
	else	Speedometer_RevolutionCounter++;
}

ISR (TIMER1_COMPA_vect)
{
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
    24fe:	85 30       	cpi	r24, 0x05	; 5
    2500:	08 f4       	brcc	.+2      	; 0x2504 <__vector_11+0x38>
    2502:	40 c0       	rjmp	.+128    	; 0x2584 <__vector_11+0xb8>
		Speedometer_Speed_mmps = (Speedometer_WheelLength_mm * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
		Speedometer_TimerCounter++;
	}
	else
	{
		Speedometer_Speed_mmps = (Speedometer_WheelLength_mm * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    2504:	42 9f       	mul	r20, r18
    2506:	c0 01       	movw	r24, r0
    2508:	43 9f       	mul	r20, r19
    250a:	90 0d       	add	r25, r0
    250c:	11 24       	eor	r1, r1
    250e:	70 e0       	ldi	r23, 0x00	; 0
    2510:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodhi4>
    2514:	cb 01       	movw	r24, r22
    2516:	a0 e0       	ldi	r26, 0x00	; 0
    2518:	b0 e0       	ldi	r27, 0x00	; 0
    251a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <Speedometer_Speed_mmps>
    251e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <Speedometer_Speed_mmps+0x1>
    2522:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <Speedometer_Speed_mmps+0x2>
    2526:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <Speedometer_Speed_mmps+0x3>
		if (Speedometer_Speed_mmps == 0)
    252a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <Speedometer_Speed_mmps>
    252e:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <Speedometer_Speed_mmps+0x1>
    2532:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <Speedometer_Speed_mmps+0x2>
    2536:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <Speedometer_Speed_mmps+0x3>
    253a:	89 2b       	or	r24, r25
    253c:	8a 2b       	or	r24, r26
    253e:	8b 2b       	or	r24, r27
    2540:	a1 f0       	breq	.+40     	; 0x256a <__vector_11+0x9e>
			TIMSK1 &= ~(1 << OCIE1A | OCIE1B);
			Speedometer_IsRunning = false;
			
			return;
		}
		Speedometer_RevolutionCounter = 0;
    2542:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <Speedometer_RevolutionCounter>
		Speedometer_TimerCounter = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Speedometer_TimerCounter>
	}
}
    254c:	bf 91       	pop	r27
    254e:	af 91       	pop	r26
    2550:	9f 91       	pop	r25
    2552:	8f 91       	pop	r24
    2554:	7f 91       	pop	r23
    2556:	6f 91       	pop	r22
    2558:	5f 91       	pop	r21
    255a:	4f 91       	pop	r20
    255c:	3f 91       	pop	r19
    255e:	2f 91       	pop	r18
    2560:	0f 90       	pop	r0
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	0f 90       	pop	r0
    2566:	1f 90       	pop	r1
    2568:	18 95       	reti
	else
	{
		Speedometer_Speed_mmps = (Speedometer_WheelLength_mm * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
		if (Speedometer_Speed_mmps == 0)
		{
			TCCR1B &= ~(1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10);
    256a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    256e:	82 7f       	andi	r24, 0xF2	; 242
    2570:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			TIMSK1 &= ~(1 << OCIE1A | OCIE1B);
    2574:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2578:	8d 7f       	andi	r24, 0xFD	; 253
    257a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
			Speedometer_IsRunning = false;
    257e:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <Speedometer_IsRunning>
			
			return;
    2582:	e4 cf       	rjmp	.-56     	; 0x254c <__vector_11+0x80>

ISR (TIMER1_COMPA_vect)
{
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
	{
		Speedometer_Speed_mmps = (Speedometer_WheelLength_mm * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    2584:	42 9f       	mul	r20, r18
    2586:	c0 01       	movw	r24, r0
    2588:	43 9f       	mul	r20, r19
    258a:	90 0d       	add	r25, r0
    258c:	11 24       	eor	r1, r1
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodhi4>
    2594:	cb 01       	movw	r24, r22
    2596:	a0 e0       	ldi	r26, 0x00	; 0
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <Speedometer_Speed_mmps>
    259e:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <Speedometer_Speed_mmps+0x1>
    25a2:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <Speedometer_Speed_mmps+0x2>
    25a6:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <Speedometer_Speed_mmps+0x3>
		Speedometer_TimerCounter++;
    25aa:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <Speedometer_TimerCounter>
    25ae:	8f 5f       	subi	r24, 0xFF	; 255
    25b0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <Speedometer_TimerCounter>
    25b4:	cb cf       	rjmp	.-106    	; 0x254c <__vector_11+0x80>

000025b6 <__vector_12>:
		Speedometer_TimerCounter = 1;
	}
}

ISR (TIMER1_COMPB_vect)
{
    25b6:	1f 92       	push	r1
    25b8:	0f 92       	push	r0
    25ba:	0f b6       	in	r0, 0x3f	; 63
    25bc:	0f 92       	push	r0
    25be:	11 24       	eor	r1, r1
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	2f 93       	push	r18
    25ca:	3f 93       	push	r19
    25cc:	4f 93       	push	r20
    25ce:	5f 93       	push	r21
    25d0:	6f 93       	push	r22
    25d2:	7f 93       	push	r23
    25d4:	8f 93       	push	r24
    25d6:	9f 93       	push	r25
    25d8:	af 93       	push	r26
    25da:	bf 93       	push	r27
    25dc:	ef 93       	push	r30
    25de:	ff 93       	push	r31
	uint32_t currentVelocity = Speedometer_Speed_mmps / 1000;
    25e0:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <Speedometer_Speed_mmps>
    25e4:	70 91 c9 01 	lds	r23, 0x01C9	; 0x8001c9 <Speedometer_Speed_mmps+0x1>
    25e8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <Speedometer_Speed_mmps+0x2>
    25ec:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <Speedometer_Speed_mmps+0x3>
    25f0:	28 ee       	ldi	r18, 0xE8	; 232
    25f2:	33 e0       	ldi	r19, 0x03	; 3
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	50 e0       	ldi	r21, 0x00	; 0
    25f8:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    25fc:	69 01       	movw	r12, r18
    25fe:	7a 01       	movw	r14, r20
	totalDistance += currentVelocity;
    2600:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <totalDistance>
    2604:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <totalDistance+0x1>
    2608:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <totalDistance+0x2>
    260c:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <totalDistance+0x3>
    2610:	82 0f       	add	r24, r18
    2612:	93 1f       	adc	r25, r19
    2614:	a4 1f       	adc	r26, r20
    2616:	b5 1f       	adc	r27, r21
    2618:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <totalDistance>
    261c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <totalDistance+0x1>
    2620:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <totalDistance+0x2>
    2624:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <totalDistance+0x3>
	currentDistance += currentVelocity;
    2628:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <currentDistance>
    262c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <currentDistance+0x1>
    2630:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <currentDistance+0x2>
    2634:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <currentDistance+0x3>
    2638:	82 0f       	add	r24, r18
    263a:	93 1f       	adc	r25, r19
    263c:	a4 1f       	adc	r26, r20
    263e:	b5 1f       	adc	r27, r21
    2640:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <currentDistance>
    2644:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <currentDistance+0x1>
    2648:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <currentDistance+0x2>
    264c:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <currentDistance+0x3>
	totalTime++;
    2650:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <totalTime>
    2654:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <totalTime+0x1>
    2658:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <totalTime+0x2>
    265c:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2660:	01 96       	adiw	r24, 0x01	; 1
    2662:	a1 1d       	adc	r26, r1
    2664:	b1 1d       	adc	r27, r1
    2666:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <totalTime>
    266a:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <totalTime+0x1>
    266e:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <totalTime+0x2>
    2672:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <totalTime+0x3>
	averageVelocity = totalDistance / totalTime;
    2676:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <totalDistance>
    267a:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <totalDistance+0x1>
    267e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <totalDistance+0x2>
    2682:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <totalDistance+0x3>
    2686:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <totalTime>
    268a:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <totalTime+0x1>
    268e:	40 91 c0 01 	lds	r20, 0x01C0	; 0x8001c0 <totalTime+0x2>
    2692:	50 91 c1 01 	lds	r21, 0x01C1	; 0x8001c1 <totalTime+0x3>
    2696:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    269a:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <averageVelocity>
    269e:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <averageVelocity+0x1>
    26a2:	40 93 bc 01 	sts	0x01BC, r20	; 0x8001bc <averageVelocity+0x2>
    26a6:	50 93 bd 01 	sts	0x01BD, r21	; 0x8001bd <averageVelocity+0x3>
	if (currentVelocity > maxVelocity)	maxVelocity = currentVelocity;
    26aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <maxVelocity>
    26ae:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <maxVelocity+0x1>
    26b2:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <maxVelocity+0x2>
    26b6:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <maxVelocity+0x3>
    26ba:	8c 15       	cp	r24, r12
    26bc:	9d 05       	cpc	r25, r13
    26be:	ae 05       	cpc	r26, r14
    26c0:	bf 05       	cpc	r27, r15
    26c2:	40 f4       	brcc	.+16     	; 0x26d4 <__vector_12+0x11e>
    26c4:	c0 92 b6 01 	sts	0x01B6, r12	; 0x8001b6 <maxVelocity>
    26c8:	d0 92 b7 01 	sts	0x01B7, r13	; 0x8001b7 <maxVelocity+0x1>
    26cc:	e0 92 b8 01 	sts	0x01B8, r14	; 0x8001b8 <maxVelocity+0x2>
    26d0:	f0 92 b9 01 	sts	0x01B9, r15	; 0x8001b9 <maxVelocity+0x3>
}
    26d4:	ff 91       	pop	r31
    26d6:	ef 91       	pop	r30
    26d8:	bf 91       	pop	r27
    26da:	af 91       	pop	r26
    26dc:	9f 91       	pop	r25
    26de:	8f 91       	pop	r24
    26e0:	7f 91       	pop	r23
    26e2:	6f 91       	pop	r22
    26e4:	5f 91       	pop	r21
    26e6:	4f 91       	pop	r20
    26e8:	3f 91       	pop	r19
    26ea:	2f 91       	pop	r18
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	df 90       	pop	r13
    26f2:	cf 90       	pop	r12
    26f4:	0f 90       	pop	r0
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	0f 90       	pop	r0
    26fa:	1f 90       	pop	r1
    26fc:	18 95       	reti

000026fe <SPI_Master_Init>:
	SPCR0 |= (1 << SPIE);														//	Activate SPI interrupt
 	volatile uint8_t temp = SPSR0;												//	Clear the interrupt flag
 	temp = SPDR0;																//	Clear the interrupt flag
	temp = 0x00;																//	Here assign any "garbage" value to temp
	SPDR0 = temp;																//	and put it in the SPDR to activate the transfer process
}
    26fe:	cf 93       	push	r28
    2700:	df 93       	push	r29
    2702:	1f 92       	push	r1
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	84 b1       	in	r24, 0x04	; 4
    270a:	8c 62       	ori	r24, 0x2C	; 44
    270c:	84 b9       	out	0x04, r24	; 4
    270e:	24 98       	cbi	0x04, 4	; 4
    2710:	8c b5       	in	r24, 0x2c	; 44
    2712:	80 65       	ori	r24, 0x50	; 80
    2714:	8c bd       	out	0x2c, r24	; 44
    2716:	8d b5       	in	r24, 0x2d	; 45
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	8e b5       	in	r24, 0x2e	; 46
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	0f 90       	pop	r0
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	08 95       	ret

00002726 <SPI_PutByte>:
    2726:	8e bd       	out	0x2e, r24	; 46
    2728:	0d b4       	in	r0, 0x2d	; 45
    272a:	07 fe       	sbrs	r0, 7
    272c:	fd cf       	rjmp	.-6      	; 0x2728 <SPI_PutByte+0x2>
    272e:	08 95       	ret

00002730 <__vector_17>:

ISR (SPI0_STC_vect)
{
    2730:	1f 92       	push	r1
    2732:	0f 92       	push	r0
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	0f 92       	push	r0
    2738:	11 24       	eor	r1, r1
    273a:	8f 93       	push	r24
    273c:	ef 93       	push	r30
    273e:	ff 93       	push	r31
//	SPI_ReceiveBuffer[SPI_CharacterCounter] = SPDR;								//	Receive byte from the Slave	(for full-duplex communication)
	if (SPI_TransmitBuffer[SPI_CharacterCounter] != 0)							//	If not end of data
    2740:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <SPI_CharacterCounter>
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	ea 5e       	subi	r30, 0xEA	; 234
    2748:	fd 4f       	sbci	r31, 0xFD	; 253
    274a:	80 81       	ld	r24, Z
    274c:	81 11       	cpse	r24, r1
    274e:	10 c0       	rjmp	.+32     	; 0x2770 <__vector_17+0x40>
	{
		SPDR0 = SPI_TransmitBuffer[SPI_CharacterCounter++];						//	Put the next byte in the SPI data register
	}
	else
	{
		SPCR0 &= ~(1 << SPIE);													//	Disable SPI interrupt
    2750:	8c b5       	in	r24, 0x2c	; 44
    2752:	8f 77       	andi	r24, 0x7F	; 127
    2754:	8c bd       	out	0x2c, r24	; 44
		SPI_TransmitSuccess = true;												//	Set the success flag
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPI_TransmitSuccess>
		SPI_CharacterCounter = 0;												//	Reset character counter
    275c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <SPI_CharacterCounter>
	}
}
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	8f 91       	pop	r24
    2766:	0f 90       	pop	r0
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	0f 90       	pop	r0
    276c:	1f 90       	pop	r1
    276e:	18 95       	reti
ISR (SPI0_STC_vect)
{
//	SPI_ReceiveBuffer[SPI_CharacterCounter] = SPDR;								//	Receive byte from the Slave	(for full-duplex communication)
	if (SPI_TransmitBuffer[SPI_CharacterCounter] != 0)							//	If not end of data
	{
		SPDR0 = SPI_TransmitBuffer[SPI_CharacterCounter++];						//	Put the next byte in the SPI data register
    2770:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <SPI_CharacterCounter>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	8e 0f       	add	r24, r30
    2778:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <SPI_CharacterCounter>
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	ea 5e       	subi	r30, 0xEA	; 234
    2780:	fd 4f       	sbci	r31, 0xFD	; 253
    2782:	80 81       	ld	r24, Z
    2784:	8e bd       	out	0x2e, r24	; 46
	{
		SPCR0 &= ~(1 << SPIE);													//	Disable SPI interrupt
		SPI_TransmitSuccess = true;												//	Set the success flag
		SPI_CharacterCounter = 0;												//	Reset character counter
	}
}
    2786:	ff 91       	pop	r31
    2788:	ef 91       	pop	r30
    278a:	8f 91       	pop	r24
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti

00002796 <USART_Init>:
	return (USART_ReceiveBuffer[USART_RxHead]);											//	Return byte by the received pointer
}

void USART_SendString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	USART_PutByte(data[i]);						//	Send by byte, until we detect NULL character (or the end of the line)
    2796:	85 e0       	ldi	r24, 0x05	; 5
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    279e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    27a2:	e1 ec       	ldi	r30, 0xC1	; 193
    27a4:	f0 e0       	ldi	r31, 0x00	; 0
    27a6:	80 81       	ld	r24, Z
    27a8:	88 69       	ori	r24, 0x98	; 152
    27aa:	80 83       	st	Z, r24
    27ac:	e2 ec       	ldi	r30, 0xC2	; 194
    27ae:	f0 e0       	ldi	r31, 0x00	; 0
    27b0:	80 81       	ld	r24, Z
    27b2:	86 60       	ori	r24, 0x06	; 6
    27b4:	80 83       	st	Z, r24
    27b6:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <USART_TxHead>
    27ba:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <USART_TxTail>
    27be:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <USART_RxHead>
    27c2:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <USART_RxTail>
    27c6:	08 95       	ret

000027c8 <USART_ReceiveString>:
}

void USART_ReceiveString (int8_t* data)
{
    27c8:	cf 93       	push	r28
    27ca:	df 93       	push	r29
    27cc:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
    27ce:	88 81       	ld	r24, Y
    27d0:	88 23       	and	r24, r24
    27d2:	e1 f0       	breq	.+56     	; 0x280c <USART_ReceiveString+0x44>
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	de 01       	movw	r26, r28
	UCSR0B |= 1 << UDRIE0;																//	Enable interrupt handler
}

int8_t USART_GetByte (void)
{
	while (USART_RxHead == USART_RxTail);												//	Waiting for reception
    27d8:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <USART_RxHead>
    27dc:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <USART_RxTail>
    27e0:	29 17       	cp	r18, r25
    27e2:	d1 f3       	breq	.-12     	; 0x27d8 <USART_ReceiveString+0x10>
	USART_RxHead = (USART_RxHead + 1) & USART_BUFFER_MASK;								//	When the first byte received, increment ReceiverHead
    27e4:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <USART_RxHead>
    27e8:	9f 5f       	subi	r25, 0xFF	; 255
    27ea:	9f 73       	andi	r25, 0x3F	; 63
    27ec:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <USART_RxHead>
	
	return (USART_ReceiveBuffer[USART_RxHead]);											//	Return byte by the received pointer
    27f0:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <USART_RxHead>
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	ea 5a       	subi	r30, 0xAA	; 170
    27f8:	fd 4f       	sbci	r31, 0xFD	; 253
    27fa:	90 81       	ld	r25, Z
	for (uint8_t i = 0; data[i] != 0; i++)	USART_PutByte(data[i]);						//	Send by byte, until we detect NULL character (or the end of the line)
}

void USART_ReceiveString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
    27fc:	9c 93       	st	X, r25
    27fe:	3f 5f       	subi	r19, 0xFF	; 255
    2800:	de 01       	movw	r26, r28
    2802:	a3 0f       	add	r26, r19
    2804:	b1 1d       	adc	r27, r1
    2806:	9c 91       	ld	r25, X
    2808:	91 11       	cpse	r25, r1
    280a:	e6 cf       	rjmp	.-52     	; 0x27d8 <USART_ReceiveString+0x10>
}
    280c:	df 91       	pop	r29
    280e:	cf 91       	pop	r28
    2810:	08 95       	ret

00002812 <__vector_19>:

ISR (USART0_UDRE_vect)
{
    2812:	1f 92       	push	r1
    2814:	0f 92       	push	r0
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	0f 92       	push	r0
    281a:	11 24       	eor	r1, r1
    281c:	8f 93       	push	r24
    281e:	9f 93       	push	r25
    2820:	ef 93       	push	r30
    2822:	ff 93       	push	r31
	if (USART_TxHead != USART_TxTail)													//	If there's a clean place in the buffer
    2824:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <USART_TxHead>
    2828:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <USART_TxTail>
    282c:	98 17       	cp	r25, r24
    282e:	a9 f0       	breq	.+42     	; 0x285a <__vector_19+0x48>
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
    2830:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <USART_TxHead>
    2834:	ef 5f       	subi	r30, 0xFF	; 255
    2836:	ef 73       	andi	r30, 0x3F	; 63
		USART_TxHead = tempTxHead;
    2838:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <USART_TxHead>
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	ea 56       	subi	r30, 0x6A	; 106
    2840:	fd 4f       	sbci	r31, 0xFD	; 253
    2842:	80 81       	ld	r24, Z
    2844:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
}
    2848:	ff 91       	pop	r31
    284a:	ef 91       	pop	r30
    284c:	9f 91       	pop	r25
    284e:	8f 91       	pop	r24
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	0f 90       	pop	r0
    2856:	1f 90       	pop	r1
    2858:	18 95       	reti
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
		USART_TxHead = tempTxHead;
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
    285a:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    285e:	8f 7d       	andi	r24, 0xDF	; 223
    2860:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
    2864:	f1 cf       	rjmp	.-30     	; 0x2848 <__vector_19+0x36>

00002866 <__vector_18>:

ISR (USART0_RX_vect)
{
    2866:	1f 92       	push	r1
    2868:	0f 92       	push	r0
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	0f 92       	push	r0
    286e:	11 24       	eor	r1, r1
    2870:	8f 93       	push	r24
    2872:	9f 93       	push	r25
    2874:	ef 93       	push	r30
    2876:	ff 93       	push	r31
	int8_t byte = UDR0;																	//	Saving UDR value
    2878:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uint8_t tempRxTail = (USART_RxTail + 1) & USART_BUFFER_MASK;						//	Increment RxTail value
    287c:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <USART_RxTail>
    2880:	ef 5f       	subi	r30, 0xFF	; 255
    2882:	ef 73       	andi	r30, 0x3F	; 63
	USART_RxTail = tempRxTail;															//	Saving RxTail value
    2884:	e0 93 cf 01 	sts	0x01CF, r30	; 0x8001cf <USART_RxTail>
	if (USART_RxHead == tempRxTail)																	
    2888:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <USART_RxHead>
		//	Buffer overflow
		//
		
		//	PORTD |= 0x80;
	}
	USART_ReceiveBuffer[tempRxTail] = byte;												//	Saving UDR value in the receive buffer
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	ea 5a       	subi	r30, 0xAA	; 170
    2890:	fd 4f       	sbci	r31, 0xFD	; 253
    2892:	80 83       	st	Z, r24
    2894:	ff 91       	pop	r31
    2896:	ef 91       	pop	r30
    2898:	9f 91       	pop	r25
    289a:	8f 91       	pop	r24
    289c:	0f 90       	pop	r0
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	0f 90       	pop	r0
    28a2:	1f 90       	pop	r1
    28a4:	18 95       	reti

000028a6 <__udivmodhi4>:
    28a6:	aa 1b       	sub	r26, r26
    28a8:	bb 1b       	sub	r27, r27
    28aa:	51 e1       	ldi	r21, 0x11	; 17
    28ac:	07 c0       	rjmp	.+14     	; 0x28bc <__udivmodhi4_ep>

000028ae <__udivmodhi4_loop>:
    28ae:	aa 1f       	adc	r26, r26
    28b0:	bb 1f       	adc	r27, r27
    28b2:	a6 17       	cp	r26, r22
    28b4:	b7 07       	cpc	r27, r23
    28b6:	10 f0       	brcs	.+4      	; 0x28bc <__udivmodhi4_ep>
    28b8:	a6 1b       	sub	r26, r22
    28ba:	b7 0b       	sbc	r27, r23

000028bc <__udivmodhi4_ep>:
    28bc:	88 1f       	adc	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	5a 95       	dec	r21
    28c2:	a9 f7       	brne	.-22     	; 0x28ae <__udivmodhi4_loop>
    28c4:	80 95       	com	r24
    28c6:	90 95       	com	r25
    28c8:	bc 01       	movw	r22, r24
    28ca:	cd 01       	movw	r24, r26
    28cc:	08 95       	ret

000028ce <__udivmodsi4>:
    28ce:	a1 e2       	ldi	r26, 0x21	; 33
    28d0:	1a 2e       	mov	r1, r26
    28d2:	aa 1b       	sub	r26, r26
    28d4:	bb 1b       	sub	r27, r27
    28d6:	fd 01       	movw	r30, r26
    28d8:	0d c0       	rjmp	.+26     	; 0x28f4 <__udivmodsi4_ep>

000028da <__udivmodsi4_loop>:
    28da:	aa 1f       	adc	r26, r26
    28dc:	bb 1f       	adc	r27, r27
    28de:	ee 1f       	adc	r30, r30
    28e0:	ff 1f       	adc	r31, r31
    28e2:	a2 17       	cp	r26, r18
    28e4:	b3 07       	cpc	r27, r19
    28e6:	e4 07       	cpc	r30, r20
    28e8:	f5 07       	cpc	r31, r21
    28ea:	20 f0       	brcs	.+8      	; 0x28f4 <__udivmodsi4_ep>
    28ec:	a2 1b       	sub	r26, r18
    28ee:	b3 0b       	sbc	r27, r19
    28f0:	e4 0b       	sbc	r30, r20
    28f2:	f5 0b       	sbc	r31, r21

000028f4 <__udivmodsi4_ep>:
    28f4:	66 1f       	adc	r22, r22
    28f6:	77 1f       	adc	r23, r23
    28f8:	88 1f       	adc	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	1a 94       	dec	r1
    28fe:	69 f7       	brne	.-38     	; 0x28da <__udivmodsi4_loop>
    2900:	60 95       	com	r22
    2902:	70 95       	com	r23
    2904:	80 95       	com	r24
    2906:	90 95       	com	r25
    2908:	9b 01       	movw	r18, r22
    290a:	ac 01       	movw	r20, r24
    290c:	bd 01       	movw	r22, r26
    290e:	cf 01       	movw	r24, r30
    2910:	08 95       	ret

00002912 <__divmodsi4>:
    2912:	05 2e       	mov	r0, r21
    2914:	97 fb       	bst	r25, 7
    2916:	1e f4       	brtc	.+6      	; 0x291e <__divmodsi4+0xc>
    2918:	00 94       	com	r0
    291a:	0e 94 a0 14 	call	0x2940	; 0x2940 <__negsi2>
    291e:	57 fd       	sbrc	r21, 7
    2920:	07 d0       	rcall	.+14     	; 0x2930 <__divmodsi4_neg2>
    2922:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
    2926:	07 fc       	sbrc	r0, 7
    2928:	03 d0       	rcall	.+6      	; 0x2930 <__divmodsi4_neg2>
    292a:	4e f4       	brtc	.+18     	; 0x293e <__divmodsi4_exit>
    292c:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <__negsi2>

00002930 <__divmodsi4_neg2>:
    2930:	50 95       	com	r21
    2932:	40 95       	com	r20
    2934:	30 95       	com	r19
    2936:	21 95       	neg	r18
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
    293a:	4f 4f       	sbci	r20, 0xFF	; 255
    293c:	5f 4f       	sbci	r21, 0xFF	; 255

0000293e <__divmodsi4_exit>:
    293e:	08 95       	ret

00002940 <__negsi2>:
    2940:	90 95       	com	r25
    2942:	80 95       	com	r24
    2944:	70 95       	com	r23
    2946:	61 95       	neg	r22
    2948:	7f 4f       	sbci	r23, 0xFF	; 255
    294a:	8f 4f       	sbci	r24, 0xFF	; 255
    294c:	9f 4f       	sbci	r25, 0xFF	; 255
    294e:	08 95       	ret

00002950 <__muluhisi3>:
    2950:	0e 94 b3 14 	call	0x2966	; 0x2966 <__umulhisi3>
    2954:	a5 9f       	mul	r26, r21
    2956:	90 0d       	add	r25, r0
    2958:	b4 9f       	mul	r27, r20
    295a:	90 0d       	add	r25, r0
    295c:	a4 9f       	mul	r26, r20
    295e:	80 0d       	add	r24, r0
    2960:	91 1d       	adc	r25, r1
    2962:	11 24       	eor	r1, r1
    2964:	08 95       	ret

00002966 <__umulhisi3>:
    2966:	a2 9f       	mul	r26, r18
    2968:	b0 01       	movw	r22, r0
    296a:	b3 9f       	mul	r27, r19
    296c:	c0 01       	movw	r24, r0
    296e:	a3 9f       	mul	r26, r19
    2970:	70 0d       	add	r23, r0
    2972:	81 1d       	adc	r24, r1
    2974:	11 24       	eor	r1, r1
    2976:	91 1d       	adc	r25, r1
    2978:	b2 9f       	mul	r27, r18
    297a:	70 0d       	add	r23, r0
    297c:	81 1d       	adc	r24, r1
    297e:	11 24       	eor	r1, r1
    2980:	91 1d       	adc	r25, r1
    2982:	08 95       	ret

00002984 <_exit>:
    2984:	f8 94       	cli

00002986 <__stop_program>:
    2986:	ff cf       	rjmp	.-2      	; 0x2986 <__stop_program>
