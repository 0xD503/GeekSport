
GeekSport.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00002bba  00002c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ec  00800134  00800134  00002c82  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c82  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e937  00000000  00000000  000031b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002204  00000000  00000000  00011aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000030a7  00000000  00000000  00013cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cd8  00000000  00000000  00016d98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000195f  00000000  00000000  00017a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a97  00000000  00000000  000193cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  0001ce66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 af 03 	jmp	0x75e	; 0x75e <__ctors_end>
       4:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_1>
       8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
       c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      10:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      14:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      18:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <__vector_6>
      1c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      20:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      24:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      28:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      2c:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__vector_11>
      30:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__vector_12>
      34:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      38:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_14>
      3c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      40:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      44:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__vector_17>
      48:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__vector_18>
      4c:	0c 94 2e 15 	jmp	0x2a5c	; 0x2a5c <__vector_19>
      50:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      54:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      58:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      5c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      60:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_24>
      64:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      68:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      6c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      70:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      74:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      78:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      7c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      80:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      84:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      88:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      8c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      90:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      94:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      98:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      9c:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      a8:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      ac:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>
      b0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	4f 66       	ori	r20, 0x6F	; 111
      b6:	66 00       	.word	0x0066	; ????

000000b8 <bluetoothOnString>:
      b8:	4f 6e 00                                            On.

000000bb <bluetoothString>:
      bb:	42 6c 75 65 74 6f 6f 74 68 3a 20 00                 Bluetooth: .

000000c7 <__c.2813>:
      c7:	2c 20 00                                            , .

000000ca <timeSettings>:
      ca:	54 69 6d 65 20 73 65 74 74 69 6e 67 73 3a 00        Time settings:.

000000d9 <weekdaySettingString>:
      d9:	57 65 65 6b 64 61 79 20 2d 20 00                    Weekday - .

000000e4 <dateSettingString>:
      e4:	44 61 74 65 3a 20 30 30 2e 30 30 2e 30 30 00        Date: 00.00.00.

000000f3 <timeSettingString>:
      f3:	54 69 6d 65 3a 20 30 30 3a 30 30 00                 Time: 00:00.

000000ff <December>:
      ff:	44 65 63 00                                         Dec.

00000103 <November>:
     103:	4e 6f 76 00                                         Nov.

00000107 <October>:
     107:	4f 63 74 00                                         Oct.

0000010b <Septemper>:
     10b:	53 65 70 00                                         Sep.

0000010f <August>:
     10f:	41 75 67 00                                         Aug.

00000113 <Jule>:
     113:	4a 75 6c 65 00                                      Jule.

00000118 <June>:
     118:	4a 75 6e 65 00                                      June.

0000011d <May>:
     11d:	4d 61 79 00                                         May.

00000121 <April>:
     121:	41 70 72 00                                         Apr.

00000125 <March>:
     125:	4d 61 72 00                                         Mar.

00000129 <February>:
     129:	46 65 62 00                                         Feb.

0000012d <January>:
     12d:	4a 61 6e 00                                         Jan.

00000131 <Saturday>:
     131:	53 61 74 00                                         Sat.

00000135 <Friday>:
     135:	46 72 69 00                                         Fri.

00000139 <Thursday>:
     139:	54 68 75 00                                         Thu.

0000013d <Wednesday>:
     13d:	57 65 64 00                                         Wed.

00000141 <Tuesday>:
     141:	54 75 65 00                                         Tue.

00000145 <Monday>:
     145:	4d 6f 6e 00                                         Mon.

00000149 <Sunday>:
     149:	53 75 6e 00                                         Sun.

0000014d <setWheelLength>:
     14d:	57 68 65 65 6c 20 28 6d 6d 29 3a 20 30 30 30 30     Wheel (mm): 0000
	...

0000015e <settings>:
     15e:	53 65 74 74 69 6e 67 73 00                          Settings.

00000167 <developerInfo2>:
     167:	32 30 31 38 00                                      2018.

0000016c <developerInfo1>:
     16c:	52 56 20 45 6c 65 63 74 72 6f 6e 69 63 73 00        RV Electronics.

0000017b <developerInfo0>:
     17b:	44 65 76 65 6c 6f 70 65 72 3a 00                    Developer:.

00000186 <GeekSportString>:
     186:	47 65 65 6b 53 70 6f 72 74 00                       GeekSport.

00000190 <weekdaySettingString>:
     190:	57 65 65 6b 64 61 79 20 2d 20 00                    Weekday - .

0000019b <dateSettingString>:
     19b:	44 61 74 65 3a 20 30 30 2e 30 30 2e 30 30 00        Date: 00.00.00.

000001aa <timeSettingString>:
     1aa:	54 69 6d 65 3a 20 30 30 3a 30 30 00                 Time: 00:00.

000001b6 <LCD_Nokia_MediumFont12x16>:
     1b6:	00 00 00 80 80 80 80 80 80 00 00 00 00 00 01 03     ................
     1c6:	03 03 03 03 03 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     1de:	00 c0 c0 00 00 00 00 00 00 00 02 86 86 86 86 86     ................
     1ee:	86 02 00 00 00 00 81 c3 c3 c3 c3 c3 c3 81 00 00     ................
     1fe:	00 fc 7a 06 06 06 06 06 06 7a fc 00 00 7e bc c0     ..z......z...~..
     20e:	c0 c0 c0 c0 c0 bc 7e 00 00 00 00 00 00 00 00 00     ......~.........
     21e:	00 78 fc 00 00 00 00 00 00 00 00 00 00 3c 7e 00     .x...........<~.
     22e:	00 00 02 86 86 86 86 86 86 7a fc 00 00 7e bd c3     .........z...~..
     23e:	c3 c3 c3 c3 c3 81 00 00 00 00 02 86 86 86 86 86     ................
     24e:	86 7a fc 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     .z............~.
     25e:	00 fc 78 80 80 80 80 80 80 78 fc 00 00 00 01 03     ..x......x......
     26e:	03 03 03 03 03 3d 7e 00 00 fc 7a 86 86 86 86 86     .....=~...z.....
     27e:	86 02 00 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     ..............~.
     28e:	00 fc 7a 86 86 86 86 86 86 02 00 00 00 7e bd c3     ..z..........~..
     29e:	c3 c3 c3 c3 c3 bd 7e 00 00 00 02 06 06 06 06 06     ......~.........
     2ae:	06 7a fc 00 00 00 00 00 00 00 00 00 00 3c 7e 00     .z...........<~.
     2be:	00 fc 7a 86 86 86 86 86 86 7a fc 00 00 7e bd c3     ..z......z...~..
     2ce:	c3 c3 c3 c3 c3 bd 7e 00 00 fc 7a 86 86 86 86 86     ......~...z.....
     2de:	86 7a fc 00 00 00 81 c3 c3 c3 c3 c3 c3 bd 7e 00     .z............~.
     2ee:	00 00 00 00 7c 7c 7c 7c 00 00 00 00 00 00 00 00     ....||||........
     2fe:	3e 3e 3e 3e 00 00 00 00                             >>>>....

00000306 <LCD_Nokia_SmallFont6x8>:
	...
     30e:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
     31e:	00 24 2a 7f 2a 12 00 23 13 08 64 62 00 36 49 55     .$*.*..#..db.6IU
     32e:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
     33e:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     34e:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
     35e:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     36e:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     37e:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     38e:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     39e:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     3ae:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     3be:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     3ce:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     3de:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     3ee:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     3fe:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     40e:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     41e:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     42e:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     43e:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     44e:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     45e:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     46e:	aa 55 aa 55 aa 55 00 00 41 41 7f 00 00 04 02 01     .U.U.U..AA......
     47e:	02 04 00 40 40 40 40 40 00 00 03 05 00 00 00 20     ...@@@@@....... 
     48e:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     49e:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     4ae:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     4be:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     4ce:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     4de:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     4ee:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     4fe:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     50e:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     51e:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 10 7c 82 00     ...|.DdTLD...|..
     52e:	00 00 00 ff 00 00 00 00 82 7c 10 00 00 00 06 09     .........|......
     53e:	09 06                                               ..

00000540 <LCD_Nokia_ASCII_Charset5>:
     540:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     550:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     560:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     570:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     580:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     590:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     5a0:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     5b0:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     5c0:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     5d0:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     5e0:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     5f0:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     600:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     610:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     620:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     630:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     640:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     650:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     660:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     670:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     680:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     690:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     6a0:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     6b0:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     6c0:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     6d0:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     6e0:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     6f0:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     700:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     710:	00 00 41 36 08 00 10 08 08 10 08 78 46 41 46 78     ..A6.......xFAFx

00000720 <__c.2710>:
     720:	30 30 00                                            00.

00000723 <dstString>:
     723:	44 73 74 3a 20 00                                   Dst: .

00000729 <averageVelocityString>:
     729:	41 76 65 3a 20 00                                   Ave: .

0000072f <maxVelocityString>:
     72f:	4d 61 78 3a 20 00                                   Max: .

00000735 <timeString>:
     735:	54 69 6d 65 3a 20 00                                Time: .

0000073c <odoString>:
     73c:	4f 64 6f 3a 20 00                                   Odo: .

00000742 <kmh>:
     742:	20 6b 6d 2f 68 00                                    km/h.

00000748 <km>:
     748:	20 6b 6d 00                                          km.

0000074c <setWheelLength>:
     74c:	57 68 65 65 6c 20 28 6d 6d 29 3a 20 30 30 30 30     Wheel (mm): 0000
	...

0000075e <__ctors_end>:
     75e:	11 24       	eor	r1, r1
     760:	1f be       	out	0x3f, r1	; 63
     762:	cf ef       	ldi	r28, 0xFF	; 255
     764:	d8 e0       	ldi	r29, 0x08	; 8
     766:	de bf       	out	0x3e, r29	; 62
     768:	cd bf       	out	0x3d, r28	; 61

0000076a <__do_copy_data>:
     76a:	11 e0       	ldi	r17, 0x01	; 1
     76c:	a0 e0       	ldi	r26, 0x00	; 0
     76e:	b1 e0       	ldi	r27, 0x01	; 1
     770:	ea eb       	ldi	r30, 0xBA	; 186
     772:	fb e2       	ldi	r31, 0x2B	; 43
     774:	02 c0       	rjmp	.+4      	; 0x77a <__do_copy_data+0x10>
     776:	05 90       	lpm	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	a4 33       	cpi	r26, 0x34	; 52
     77c:	b1 07       	cpc	r27, r17
     77e:	d9 f7       	brne	.-10     	; 0x776 <__do_copy_data+0xc>

00000780 <__do_clear_bss>:
     780:	23 e0       	ldi	r18, 0x03	; 3
     782:	a4 e3       	ldi	r26, 0x34	; 52
     784:	b1 e0       	ldi	r27, 0x01	; 1
     786:	01 c0       	rjmp	.+2      	; 0x78a <.do_clear_bss_start>

00000788 <.do_clear_bss_loop>:
     788:	1d 92       	st	X+, r1

0000078a <.do_clear_bss_start>:
     78a:	a0 32       	cpi	r26, 0x20	; 32
     78c:	b2 07       	cpc	r27, r18
     78e:	e1 f7       	brne	.-8      	; 0x788 <.do_clear_bss_loop>
     790:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <main>
     794:	0c 94 db 15 	jmp	0x2bb6	; 0x2bb6 <_exit>

00000798 <__bad_interrupt>:
     798:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000079c <Bluetooth_Off>:
	USART_ReceiveString(Bluetooth_ReceiveBuffer);
}

void Bluetooth_ReceiveCommand (void)
{
	int8_t command = USART_GetByte();
     79c:	e1 ec       	ldi	r30, 0xC1	; 193
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	80 81       	ld	r24, Z
     7a2:	87 76       	andi	r24, 0x67	; 103
     7a4:	80 83       	st	Z, r24
     7a6:	08 95       	ret

000007a8 <BLuetooth_LCD_Nokia_Main>:
		default:	break;
	}
}

void BLuetooth_LCD_Nokia_Main (void)
{
     7a8:	cf 93       	push	r28
	static bool Bluetooth_LastState = false;
	
	switch(Bluetooth_Mode)
     7aa:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <Bluetooth_Mode>
     7ae:	88 23       	and	r24, r24
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <BLuetooth_LCD_Nokia_Main+0xc>
     7b2:	45 c0       	rjmp	.+138    	; 0x83e <BLuetooth_LCD_Nokia_Main+0x96>
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	e1 f5       	brne	.+120    	; 0x830 <BLuetooth_LCD_Nokia_Main+0x88>
			break;
		}
		
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
     7b8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			
			Buttons_SetPressed = false;
     7bc:	10 92 fa 01 	sts	0x01FA, r1	; 0x8001fa <Buttons_SetPressed>
			while (!Buttons_SetPressed)
     7c0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <Buttons_SetPressed>
     7c4:	81 11       	cpse	r24, r1
     7c6:	31 c0       	rjmp	.+98     	; 0x82a <BLuetooth_LCD_Nokia_Main+0x82>
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
     7c8:	c1 e0       	ldi	r28, 0x01	; 1
     7ca:	0e c0       	rjmp	.+28     	; 0x7e8 <BLuetooth_LCD_Nokia_Main+0x40>
				LCD_Nokia_SetPixelPosition(0, 4);
				LCD_Nokia_Send6CharString_P((int8_t *) bluetoothString);
				
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
     7cc:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     7d0:	88 23       	and	r24, r24
     7d2:	81 f1       	breq	.+96     	; 0x834 <BLuetooth_LCD_Nokia_Main+0x8c>
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOnString);
     7d4:	88 eb       	ldi	r24, 0xB8	; 184
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
						Bluetooth_Off();
						Bluetooth_LastState = false;
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
				}
				LCD_Nokia_UpdateFullScreen();
     7dc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetPressed = false;
			while (!Buttons_SetPressed)
     7e0:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <Buttons_SetPressed>
     7e4:	81 11       	cpse	r24, r1
     7e6:	21 c0       	rjmp	.+66     	; 0x82a <BLuetooth_LCD_Nokia_Main+0x82>
			{
				LCD_Nokia_SetPixelPosition(0, 4);
     7e8:	64 e0       	ldi	r22, 0x04	; 4
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) bluetoothString);
     7f0:	8b eb       	ldi	r24, 0xBB	; 187
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				
				if (Bluetooth_State)
     7f8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <Bluetooth_State>
     7fc:	81 11       	cpse	r24, r1
     7fe:	e6 cf       	rjmp	.-52     	; 0x7cc <BLuetooth_LCD_Nokia_Main+0x24>
// 					LCD_Nokia_SetPixelPosition(45, 0);
// 					LCD_Nokia_Put6Symbol_P(GeekSportSymbols[1]);
				}
				else
				{
					if (Bluetooth_LastState)
     800:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
     804:	88 23       	and	r24, r24
     806:	39 f0       	breq	.+14     	; 0x816 <BLuetooth_LCD_Nokia_Main+0x6e>
	USART_Init();
}

void Bluetooth_Off (void)
{
	UCSR0B &= ~(1 << RXCIE0 | 1 << RXEN0 | 1 << TXEN0);									//	Turn off transceiver, receiver; disable Rx Complete Interrupt (when there are unread data in the receive buffer detected)
     808:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     80c:	87 76       	andi	r24, 0x67	; 103
     80e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
				else
				{
					if (Bluetooth_LastState)
					{
						Bluetooth_Off();
						Bluetooth_LastState = false;
     812:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end>
					}
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
     816:	84 eb       	ldi	r24, 0xB4	; 180
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				}
				LCD_Nokia_UpdateFullScreen();
     81e:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
		case BLUETOOTH_ON_OFF_COMMAND_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetPressed = false;
			while (!Buttons_SetPressed)
     822:	80 91 fa 01 	lds	r24, 0x01FA	; 0x8001fa <Buttons_SetPressed>
     826:	88 23       	and	r24, r24
     828:	f9 f2       	breq	.-66     	; 0x7e8 <BLuetooth_LCD_Nokia_Main+0x40>
			break;
		}
		
		default:	break;
	}
     82a:	cf 91       	pop	r28
					LCD_Nokia_Send6CharString_P((int8_t *) bluetoothOffString);
				}
				LCD_Nokia_UpdateFullScreen();
			}
			
			LCD_Nokia_ClearBuffer();
     82c:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			break;
		}
		
		default:	break;
	}
     830:	cf 91       	pop	r28
     832:	08 95       	ret
int8_t Bluetooth_ReceiveBuffer[BLUETOOTH_BUFFER_SIZE] = {0};


void Bluetooth_On (void)
{
	USART_Init();
     834:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <USART_Init>
				if (Bluetooth_State)
				{
					if (!Bluetooth_LastState)
					{
						Bluetooth_On();
						Bluetooth_LastState = true;
     838:	c0 93 34 01 	sts	0x0134, r28	; 0x800134 <__data_end>
     83c:	cb cf       	rjmp	.-106    	; 0x7d4 <BLuetooth_LCD_Nokia_Main+0x2c>
	
	switch(Bluetooth_Mode)
	{
		case BLUETOOTH_VIEW_MESSAGE_MODE:
		{
			LCD_Nokia_SetPixelPosition(0, 0);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString(Bluetooth_ReceiveBuffer);
     846:	85 e3       	ldi	r24, 0x35	; 53
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <LCD_Nokia_Send6CharString>
			break;
		}
		
		default:	break;
	}
     84e:	cf 91       	pop	r28
	{
		case BLUETOOTH_VIEW_MESSAGE_MODE:
		{
			LCD_Nokia_SetPixelPosition(0, 0);
			LCD_Nokia_Send6CharString(Bluetooth_ReceiveBuffer);
			LCD_Nokia_UpdateFullScreen();
     850:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>

00000854 <bitIsSet>:
void Buttons_IO_Init (void)
{
	BUTTONS_DDR_1 &= ~(1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN);
	BUTTONS_DDR_2 &= ~(1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN);
	BUTTONS_PORT_1 |= 1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN;
	BUTTONS_PORT_2 |= 1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN;
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	02 c0       	rjmp	.+4      	; 0x85e <bitIsSet+0xa>
     85a:	22 0f       	add	r18, r18
     85c:	33 1f       	adc	r19, r19
     85e:	6a 95       	dec	r22
     860:	e2 f7       	brpl	.-8      	; 0x85a <bitIsSet+0x6>
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	28 23       	and	r18, r24
     866:	39 23       	and	r19, r25
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	23 2b       	or	r18, r19
     86c:	09 f4       	brne	.+2      	; 0x870 <bitIsSet+0x1c>
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	08 95       	ret

00000872 <Buttons_Init>:
	return ((pins & (1 << pin)));
}

void Buttons_IO_Init (void)
{
	BUTTONS_DDR_1 &= ~(1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN);
     872:	87 b1       	in	r24, 0x07	; 7
     874:	83 7f       	andi	r24, 0xF3	; 243
     876:	87 b9       	out	0x07, r24	; 7
	BUTTONS_DDR_2 &= ~(1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN);
     878:	8a b1       	in	r24, 0x0a	; 10
     87a:	8f 76       	andi	r24, 0x6F	; 111
     87c:	8a b9       	out	0x0a, r24	; 10
	BUTTONS_PORT_1 |= 1 << BUTTONS_DDR_1_BUTTON_1_PIN | 1 << BUTTONS_DDR_1_BUTTON_2_PIN;
     87e:	88 b1       	in	r24, 0x08	; 8
     880:	8c 60       	ori	r24, 0x0C	; 12
     882:	88 b9       	out	0x08, r24	; 8
	BUTTONS_PORT_2 |= 1 << BUTTONS_DDR_2_BUTTON_1_PIN | 1 << BUTTONS_DDR_2_BUTTON_2_PIN;
     884:	8b b1       	in	r24, 0x0b	; 11
     886:	80 69       	ori	r24, 0x90	; 144
     888:	8b b9       	out	0x0b, r24	; 11
}

void Buttons_Init (void)
{
	Buttons_IO_Init();
	TCCR0A |= 1 << WGM01;																		//	Set CTC mode for button's state polling and set LCD LED pin
     88a:	84 b5       	in	r24, 0x24	; 36
     88c:	82 60       	ori	r24, 0x02	; 2
     88e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 1 << CS02 | 0 << CS01 | 0 << CS00;												//	Set Timer 0 Prescaler = F_CPU / 256
     890:	85 b5       	in	r24, 0x25	; 37
     892:	84 60       	ori	r24, 0x04	; 4
     894:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 1 << OCIE0A;																		//	Enable Interrupts on compare
     896:	ee e6       	ldi	r30, 0x6E	; 110
     898:	f0 e0       	ldi	r31, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	82 60       	ori	r24, 0x02	; 2
     89e:	80 83       	st	Z, r24
	OCR0A = (BUTTONS_DELAY_US / BUTTONS_PRESCALER);												//	Set OCR value()
     8a0:	8b e3       	ldi	r24, 0x3B	; 59
     8a2:	87 bd       	out	0x27, r24	; 39
     8a4:	08 95       	ret

000008a6 <__vector_14>:
}


ISR (TIMER0_COMPA_vect)													//	Button's state polling
{
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2f 93       	push	r18
     8b2:	3f 93       	push	r19
     8b4:	4f 93       	push	r20
     8b6:	5f 93       	push	r21
     8b8:	6f 93       	push	r22
     8ba:	7f 93       	push	r23
     8bc:	8f 93       	push	r24
     8be:	9f 93       	push	r25
     8c0:	af 93       	push	r26
     8c2:	bf 93       	push	r27
     8c4:	ef 93       	push	r30
     8c6:	ff 93       	push	r31
	uint8_t mode = GeekSport_Mode;
     8c8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
	
	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_1_PIN)))							//	Mode button
     8cc:	32 99       	sbic	0x06, 2	; 6
     8ce:	3f c0       	rjmp	.+126    	; 0x94e <__stack+0x4f>
	{
		if (!Buttons_Button1WasPushed)
     8d0:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <Buttons_Button1WasPushed>
     8d4:	99 23       	and	r25, r25
     8d6:	09 f4       	brne	.+2      	; 0x8da <__vector_14+0x34>
     8d8:	63 c0       	rjmp	.+198    	; 0x9a0 <__stack+0xa1>
	}
	else	Buttons_Button1WasPushed = false;

//	###########################################################################################################################################

	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_2_PIN)))							//	Select button
     8da:	33 99       	sbic	0x06, 3	; 6
     8dc:	35 c0       	rjmp	.+106    	; 0x948 <__stack+0x49>
	{
		if (!Buttons_Button2WasPushed)
     8de:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <Buttons_Button2WasPushed>
     8e2:	99 23       	and	r25, r25
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <__vector_14+0x42>
     8e6:	43 c0       	rjmp	.+134    	; 0x96e <__stack+0x6f>
	}
	else	Buttons_Button2WasPushed = false;
	
//	###############################################################################################################################################

	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_1_PIN)))							//	Set button
     8e8:	4c 99       	sbic	0x09, 4	; 9
     8ea:	2b c0       	rjmp	.+86     	; 0x942 <__stack+0x43>
	{
		if (!Buttons_Button3WasPushed)
     8ec:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <Buttons_Button3WasPushed>
     8f0:	99 23       	and	r25, r25
     8f2:	81 f1       	breq	.+96     	; 0x954 <__stack+0x55>
	}
	else	Buttons_Button3WasPushed = false;
	
//	###############################################################################################################################################
	
	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_2_PIN)))							//	LED Button
     8f4:	4f 99       	sbic	0x09, 7	; 9
     8f6:	22 c0       	rjmp	.+68     	; 0x93c <__stack+0x3d>
	{
		if (!Buttons_Button4WasPushed)
     8f8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Buttons_Button4WasPushed>
     8fc:	81 11       	cpse	r24, r1
     8fe:	0d c0       	rjmp	.+26     	; 0x91a <__stack+0x1b>
		{
			Buttons_Button4WasPushed = true;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <Buttons_Button4WasPushed>
			
			if (!sleepModeOn)
     906:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <sleepModeOn>
     90a:	81 11       	cpse	r24, r1
     90c:	06 c0       	rjmp	.+12     	; 0x91a <__stack+0x1b>
			{
				LCD_NOKIA_LED_PORT ^= 1 << LCD_NOKIA_LED_PIN;																//	Turn on/off LED
     90e:	9b b1       	in	r25, 0x0b	; 11
     910:	80 e4       	ldi	r24, 0x40	; 64
     912:	89 27       	eor	r24, r25
     914:	8b b9       	out	0x0b, r24	; 11
				goToSleepMode = false;
     916:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <goToSleepMode>
			}
		}
	}
	else	Buttons_Button4WasPushed = false;
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	bf 91       	pop	r27
     920:	af 91       	pop	r26
     922:	9f 91       	pop	r25
     924:	8f 91       	pop	r24
     926:	7f 91       	pop	r23
     928:	6f 91       	pop	r22
     92a:	5f 91       	pop	r21
     92c:	4f 91       	pop	r20
     92e:	3f 91       	pop	r19
     930:	2f 91       	pop	r18
     932:	0f 90       	pop	r0
     934:	0f be       	out	0x3f, r0	; 63
     936:	0f 90       	pop	r0
     938:	1f 90       	pop	r1
     93a:	18 95       	reti
				LCD_NOKIA_LED_PORT ^= 1 << LCD_NOKIA_LED_PIN;																//	Turn on/off LED
				goToSleepMode = false;
			}
		}
	}
	else	Buttons_Button4WasPushed = false;
     93c:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <Buttons_Button4WasPushed>
     940:	ec cf       	rjmp	.-40     	; 0x91a <__stack+0x1b>
				
				default:	break;
			}
		}
	}
	else	Buttons_Button3WasPushed = false;
     942:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <Buttons_Button3WasPushed>
     946:	d6 cf       	rjmp	.-84     	; 0x8f4 <__vector_14+0x4e>
				}
			}
			else	Buttons_SetButtonState = true;
		}
	}
	else	Buttons_Button2WasPushed = false;
     948:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <Buttons_Button2WasPushed>
     94c:	cd cf       	rjmp	.-102    	; 0x8e8 <__vector_14+0x42>
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
			else if (mode == GEEKSPORT_START);
			else	GeekSport_Mode = GEEKSPORT_WATCH_MODE;
		}
	}
	else	Buttons_Button1WasPushed = false;
     94e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <Buttons_Button1WasPushed>
     952:	c3 cf       	rjmp	.-122    	; 0x8da <__vector_14+0x34>

	if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_1_PIN)))							//	Set button
	{
		if (!Buttons_Button3WasPushed)
		{
			Buttons_Button3WasPushed = true;
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <Buttons_Button3WasPushed>
			
			goToSleepMode = false;
     95a:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <goToSleepMode>
			switch (mode)
     95e:	83 30       	cpi	r24, 0x03	; 3
     960:	b9 f1       	breq	.+110    	; 0x9d0 <__stack+0xd1>
     962:	10 f0       	brcs	.+4      	; 0x968 <__stack+0x69>
     964:	84 30       	cpi	r24, 0x04	; 4
     966:	31 f6       	brne	.-116    	; 0x8f4 <__vector_14+0x4e>
				case GEEKSPORT_WATCH_MODE:
				case GEEKSPORT_SPEEDOMETER_MODE:
				
				case GEEKSPORT_SETTINGS_MENU:
				{
					GeekSport_ChangeSettingDigit();
     968:	0e 94 af 07 	call	0xf5e	; 0xf5e <GeekSport_ChangeSettingDigit>
					
					break;
     96c:	c3 cf       	rjmp	.-122    	; 0x8f4 <__vector_14+0x4e>

	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_2_PIN)))							//	Select button
	{
		if (!Buttons_Button2WasPushed)
		{
			Buttons_Button2WasPushed = true;
     96e:	91 e0       	ldi	r25, 0x01	; 1
     970:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <Buttons_Button2WasPushed>
			
			goToSleepMode = false;
     974:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <goToSleepMode>
			if (Buttons_SetButtonState)
     978:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Buttons_SetButtonState>
     97c:	22 23       	and	r18, r18
     97e:	f9 f0       	breq	.+62     	; 0x9be <__stack+0xbf>
			{
				switch (mode)
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	09 f4       	brne	.+2      	; 0x986 <__stack+0x87>
     984:	55 c0       	rjmp	.+170    	; 0xa30 <__stack+0x131>
     986:	e8 f1       	brcs	.+122    	; 0xa02 <__stack+0x103>
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	89 f1       	breq	.+98     	; 0x9ee <__stack+0xef>
     98c:	84 30       	cpi	r24, 0x04	; 4
     98e:	09 f0       	breq	.+2      	; 0x992 <__stack+0x93>
     990:	ab cf       	rjmp	.-170    	; 0x8e8 <__vector_14+0x42>
						break;
					}
					
					case GEEKSPORT_SETTINGS_MENU:
					{
						if (Settings_Mode == SETTINGS_INFO_MODE)	Settings_Mode = SETTINGS_MODE;
     992:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Settings_Mode>
     996:	21 11       	cpse	r18, r1
     998:	12 c0       	rjmp	.+36     	; 0x9be <__stack+0xbf>
     99a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Settings_Mode>
     99e:	a4 cf       	rjmp	.-184    	; 0x8e8 <__vector_14+0x42>
	
	if (!(bitIsSet(BUTTONS_PINS_1, BUTTONS_DDR_1_BUTTON_1_PIN)))							//	Mode button
	{
		if (!Buttons_Button1WasPushed)
		{
			Buttons_Button1WasPushed = true;
     9a0:	91 e0       	ldi	r25, 0x01	; 1
     9a2:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <Buttons_Button1WasPushed>
			
			goToSleepMode = false;
     9a6:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <goToSleepMode>
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
     9aa:	2f ef       	ldi	r18, 0xFF	; 255
     9ac:	28 0f       	add	r18, r24
     9ae:	23 30       	cpi	r18, 0x03	; 3
     9b0:	48 f0       	brcs	.+18     	; 0x9c4 <__stack+0xc5>
			else if (mode == GEEKSPORT_START);
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <__stack+0xb9>
     9b6:	91 cf       	rjmp	.-222    	; 0x8da <__vector_14+0x34>
			else	GeekSport_Mode = GEEKSPORT_WATCH_MODE;
     9b8:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <GeekSport_Mode>
     9bc:	8e cf       	rjmp	.-228    	; 0x8da <__vector_14+0x34>
					}
					
					default:	break;
				}
			}
			else	Buttons_SetButtonState = true;
     9be:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <Buttons_SetButtonState>
     9c2:	92 cf       	rjmp	.-220    	; 0x8e8 <__vector_14+0x42>
		if (!Buttons_Button1WasPushed)
		{
			Buttons_Button1WasPushed = true;
			
			goToSleepMode = false;
			if ((mode < (GEEKSPORT_LAST_MODE - 1)) && mode != GEEKSPORT_START)	GeekSport_Mode++;
     9c4:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <GeekSport_Mode>
     9c8:	9f 5f       	subi	r25, 0xFF	; 255
     9ca:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <GeekSport_Mode>
     9ce:	85 cf       	rjmp	.-246    	; 0x8da <__vector_14+0x34>
					break;
				}
				
				case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
				{
					subMode = Bluetooth_Mode;
     9d0:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <Bluetooth_Mode>
					switch (subMode)
     9d4:	88 23       	and	r24, r24
     9d6:	11 f1       	breq	.+68     	; 0xa1c <__stack+0x11d>
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	09 f0       	breq	.+2      	; 0x9de <__stack+0xdf>
     9dc:	8b cf       	rjmp	.-234    	; 0x8f4 <__vector_14+0x4e>
							break;
						}
						
						case BLUETOOTH_ON_OFF_COMMAND_MODE:
						{
							Bluetooth_State = !Bluetooth_State;
     9de:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <Bluetooth_State>
     9e2:	98 27       	eor	r25, r24
     9e4:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <Bluetooth_State>
							Buttons_SetPressed = true;
     9e8:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <Buttons_SetPressed>
							
							break;
     9ec:	83 cf       	rjmp	.-250    	; 0x8f4 <__vector_14+0x4e>
						break;
					}
					
					case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
					{
						if (Bluetooth_Mode == BLUETOOTH_VIEW_MESSAGE_MODE)	Bluetooth_Mode++;
     9ee:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <Bluetooth_Mode>
     9f2:	91 11       	cpse	r25, r1
     9f4:	27 c0       	rjmp	.+78     	; 0xa44 <__stack+0x145>
     9f6:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <Bluetooth_Mode>
     9fa:	9f 5f       	subi	r25, 0xFF	; 255
     9fc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <Bluetooth_Mode>
     a00:	73 cf       	rjmp	.-282    	; 0x8e8 <__vector_14+0x42>
			Buttons_Button2WasPushed = true;
			
			goToSleepMode = false;
			if (Buttons_SetButtonState)
			{
				switch (mode)
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	09 f0       	breq	.+2      	; 0xa08 <__stack+0x109>
     a06:	70 cf       	rjmp	.-288    	; 0x8e8 <__vector_14+0x42>
				{
					case GEEKSPORT_START:	break;
					
					case GEEKSPORT_WATCH_MODE:
					{
						if (DS1307_Mode < DS1307_TIME_SETTING_MODE)	DS1307_Mode++;
     a08:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <DS1307_Mode>
     a0c:	91 11       	cpse	r25, r1
     a0e:	17 c0       	rjmp	.+46     	; 0xa3e <__stack+0x13f>
     a10:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <DS1307_Mode>
     a14:	9f 5f       	subi	r25, 0xFF	; 255
     a16:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <DS1307_Mode>
     a1a:	66 cf       	rjmp	.-308    	; 0x8e8 <__vector_14+0x42>
					subMode = Bluetooth_Mode;
					switch (subMode)
					{
						case BLUETOOTH_VIEW_MESSAGE_MODE:
						{
							if (Bluetooth_State)
     a1c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <Bluetooth_State>
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <__stack+0x127>
     a24:	67 cf       	rjmp	.-306    	; 0x8f4 <__vector_14+0x4e>
							{
								USART_ReceiveString(Bluetooth_ReceiveBuffer);
     a26:	85 e3       	ldi	r24, 0x35	; 53
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <USART_ReceiveString>
     a2e:	62 cf       	rjmp	.-316    	; 0x8f4 <__vector_14+0x4e>
						break;
					}
					
					case GEEKSPORT_SPEEDOMETER_MODE:
					{
						if (Speedometer_Mode < (SPEEDOMETER_LAST_MODE - 1))	Speedometer_Mode++;
     a30:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Speedometer_Mode>
     a34:	92 30       	cpi	r25, 0x02	; 2
     a36:	48 f0       	brcs	.+18     	; 0xa4a <__stack+0x14b>
						else Speedometer_Mode = SPEEDOMETER_SPEED_MEASUREMENT_MODE;
     a38:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Speedometer_Mode>
     a3c:	55 cf       	rjmp	.-342    	; 0x8e8 <__vector_14+0x42>
					case GEEKSPORT_START:	break;
					
					case GEEKSPORT_WATCH_MODE:
					{
						if (DS1307_Mode < DS1307_TIME_SETTING_MODE)	DS1307_Mode++;
						else	DS1307_Mode = DS1307_WATCH_MODE;
     a3e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <DS1307_Mode>
     a42:	52 cf       	rjmp	.-348    	; 0x8e8 <__vector_14+0x42>
					}
					
					case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
					{
						if (Bluetooth_Mode == BLUETOOTH_VIEW_MESSAGE_MODE)	Bluetooth_Mode++;
						else	Bluetooth_Mode = BLUETOOTH_VIEW_MESSAGE_MODE;
     a44:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Bluetooth_Mode>
     a48:	4f cf       	rjmp	.-354    	; 0x8e8 <__vector_14+0x42>
						break;
					}
					
					case GEEKSPORT_SPEEDOMETER_MODE:
					{
						if (Speedometer_Mode < (SPEEDOMETER_LAST_MODE - 1))	Speedometer_Mode++;
     a4a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <Speedometer_Mode>
     a4e:	9f 5f       	subi	r25, 0xFF	; 255
     a50:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <Speedometer_Mode>
     a54:	49 cf       	rjmp	.-366    	; 0x8e8 <__vector_14+0x42>

00000a56 <DS1307_Init>:
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(xPos + 6, yPos);
	
	tempWatchDigit |= GeekSport_SettingsDigit;
	timeRegister = tempWatchDigit;
}
     a56:	39 9a       	sbi	0x07, 1	; 7
     a58:	41 9a       	sbi	0x08, 1	; 8
     a5a:	08 95       	ret

00000a5c <DS1307_SendBCDTimeStructData_WithoutSeconds_24>:
     a5c:	80 ed       	ldi	r24, 0xD0	; 208
     a5e:	80 93 00 00 	sts	0x0000, r24	; 0x800000 <__TEXT_REGION_LENGTH__+0x7e0000>
     a62:	10 92 01 00 	sts	0x0001, r1	; 0x800001 <__TEXT_REGION_LENGTH__+0x7e0001>
     a66:	10 92 02 00 	sts	0x0002, r1	; 0x800002 <__TEXT_REGION_LENGTH__+0x7e0002>
     a6a:	e1 ea       	ldi	r30, 0xA1	; 161
     a6c:	f1 e0       	ldi	r31, 0x01	; 1
     a6e:	81 81       	ldd	r24, Z+1	; 0x01
     a70:	80 93 03 00 	sts	0x0003, r24	; 0x800003 <__TEXT_REGION_LENGTH__+0x7e0003>
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	80 93 04 00 	sts	0x0004, r24	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
     a7a:	83 81       	ldd	r24, Z+3	; 0x03
     a7c:	80 93 05 00 	sts	0x0005, r24	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
     a80:	84 81       	ldd	r24, Z+4	; 0x04
     a82:	80 93 06 00 	sts	0x0006, r24	; 0x800006 <__TEXT_REGION_LENGTH__+0x7e0006>
     a86:	85 81       	ldd	r24, Z+5	; 0x05
     a88:	80 93 07 00 	sts	0x0007, r24	; 0x800007 <__TEXT_REGION_LENGTH__+0x7e0007>
     a8c:	86 81       	ldd	r24, Z+6	; 0x06
     a8e:	80 93 08 00 	sts	0x0008, r24	; 0x800008 <__TEXT_REGION_LENGTH__+0x7e0008>
     a92:	69 e0       	ldi	r22, 0x09	; 9
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <I2C_MT_TransmitData>

00000a9c <DS1307_ReceiveData>:
     a9c:	ef 92       	push	r14
     a9e:	ff 92       	push	r15
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	7c 01       	movw	r14, r24
     aa8:	14 2f       	mov	r17, r20
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	80 ed       	ldi	r24, 0xD0	; 208
     ab0:	88 83       	st	Y, r24
     ab2:	69 83       	std	Y+1, r22	; 0x01
     ab4:	62 e0       	ldi	r22, 0x02	; 2
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 62 09 	call	0x12c4	; 0x12c4 <I2C_MT_TransmitData>
     abe:	81 ed       	ldi	r24, 0xD1	; 209
     ac0:	88 83       	st	Y, r24
     ac2:	61 2f       	mov	r22, r17
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <I2C_MT_TransmitData>
     acc:	61 2f       	mov	r22, r17
     ace:	c7 01       	movw	r24, r14
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	0c 94 8e 09 	jmp	0x131c	; 0x131c <I2C_MR_ReceiveData>

00000ade <DS1307_ReceiveTimeData>:
     ade:	8e e7       	ldi	r24, 0x7E	; 126
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <TimeRegPointer+0x1>
     ae6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimeRegPointer>
     aea:	48 e0       	ldi	r20, 0x08	; 8
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	0e 94 4e 05 	call	0xa9c	; 0xa9c <DS1307_ReceiveData>
     af2:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     af6:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     afa:	80 81       	ld	r24, Z
     afc:	98 2f       	mov	r25, r24
     afe:	92 95       	swap	r25
     b00:	9f 70       	andi	r25, 0x0F	; 15
     b02:	8f 70       	andi	r24, 0x0F	; 15
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	92 9f       	mul	r25, r18
     b08:	80 0d       	add	r24, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	80 83       	st	Z, r24
     b0e:	81 81       	ldd	r24, Z+1	; 0x01
     b10:	98 2f       	mov	r25, r24
     b12:	92 95       	swap	r25
     b14:	9f 70       	andi	r25, 0x0F	; 15
     b16:	8f 70       	andi	r24, 0x0F	; 15
     b18:	2a e0       	ldi	r18, 0x0A	; 10
     b1a:	92 9f       	mul	r25, r18
     b1c:	80 0d       	add	r24, r0
     b1e:	11 24       	eor	r1, r1
     b20:	81 83       	std	Z+1, r24	; 0x01
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	98 2f       	mov	r25, r24
     b26:	92 95       	swap	r25
     b28:	9f 70       	andi	r25, 0x0F	; 15
     b2a:	8f 70       	andi	r24, 0x0F	; 15
     b2c:	2a e0       	ldi	r18, 0x0A	; 10
     b2e:	92 9f       	mul	r25, r18
     b30:	80 0d       	add	r24, r0
     b32:	11 24       	eor	r1, r1
     b34:	82 83       	std	Z+2, r24	; 0x02
     b36:	83 81       	ldd	r24, Z+3	; 0x03
     b38:	98 2f       	mov	r25, r24
     b3a:	92 95       	swap	r25
     b3c:	9f 70       	andi	r25, 0x0F	; 15
     b3e:	8f 70       	andi	r24, 0x0F	; 15
     b40:	2a e0       	ldi	r18, 0x0A	; 10
     b42:	92 9f       	mul	r25, r18
     b44:	80 0d       	add	r24, r0
     b46:	11 24       	eor	r1, r1
     b48:	83 83       	std	Z+3, r24	; 0x03
     b4a:	84 81       	ldd	r24, Z+4	; 0x04
     b4c:	98 2f       	mov	r25, r24
     b4e:	92 95       	swap	r25
     b50:	9f 70       	andi	r25, 0x0F	; 15
     b52:	8f 70       	andi	r24, 0x0F	; 15
     b54:	2a e0       	ldi	r18, 0x0A	; 10
     b56:	92 9f       	mul	r25, r18
     b58:	80 0d       	add	r24, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	84 83       	std	Z+4, r24	; 0x04
     b5e:	85 81       	ldd	r24, Z+5	; 0x05
     b60:	98 2f       	mov	r25, r24
     b62:	92 95       	swap	r25
     b64:	9f 70       	andi	r25, 0x0F	; 15
     b66:	8f 70       	andi	r24, 0x0F	; 15
     b68:	2a e0       	ldi	r18, 0x0A	; 10
     b6a:	92 9f       	mul	r25, r18
     b6c:	80 0d       	add	r24, r0
     b6e:	11 24       	eor	r1, r1
     b70:	85 83       	std	Z+5, r24	; 0x05
     b72:	86 81       	ldd	r24, Z+6	; 0x06
     b74:	98 2f       	mov	r25, r24
     b76:	92 95       	swap	r25
     b78:	9f 70       	andi	r25, 0x0F	; 15
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	2a e0       	ldi	r18, 0x0A	; 10
     b7e:	92 9f       	mul	r25, r18
     b80:	80 0d       	add	r24, r0
     b82:	11 24       	eor	r1, r1
     b84:	86 83       	std	Z+6, r24	; 0x06
     b86:	08 95       	ret

00000b88 <DS1307_Settings>:



void DS1307_Settings (void)
{
     b88:	cf 93       	push	r28
// 	DS1307_LCD_Nokia_SetTimeRegisterInline(54, 30, TimeRegistersTransmitBuffer.month);
// 	DS1307_LCD_Nokia_SetTimeRegisterInline(72, 30, TimeRegistersTransmitBuffer.year);
 	
	 uint8_t tempWatchDigit;
	
	GeekSport_SettingsDigit = 0;
     b8a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     b8e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	Buttons_SetButtonState = false;
     b92:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	while (!Buttons_SetButtonState)
     b96:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     b9a:	81 11       	cpse	r24, r1
     b9c:	12 c0       	rjmp	.+36     	; 0xbc2 <DS1307_Settings+0x3a>
	{
		if (GeekSport_SettingsDigit > 2)	GeekSport_SettingsDigit = 0;
     b9e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     ba2:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     ba6:	03 97       	sbiw	r24, 0x03	; 3
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <DS1307_Settings+0x2a>
     baa:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     bae:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(37, 21);
     bb2:	65 e1       	ldi	r22, 0x15	; 21
     bb4:	85 e2       	ldi	r24, 0x25	; 37
     bb6:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
 	
	 uint8_t tempWatchDigit;
	
	GeekSport_SettingsDigit = 0;
	Buttons_SetButtonState = false;
	while (!Buttons_SetButtonState)
     bba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     bbe:	88 23       	and	r24, r24
     bc0:	71 f3       	breq	.-36     	; 0xb9e <DS1307_Settings+0x16>
	{
		if (GeekSport_SettingsDigit > 2)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(37, 21);
	}
	Buttons_SetButtonState = false;
     bc2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     bc6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     bca:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     bce:	c8 2f       	mov	r28, r24
     bd0:	c2 95       	swap	r28
     bd2:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     bd4:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     bd8:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(43, 21);
     bdc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     be0:	81 11       	cpse	r24, r1
     be2:	08 c0       	rjmp	.+16     	; 0xbf4 <DS1307_Settings+0x6c>
     be4:	65 e1       	ldi	r22, 0x15	; 21
     be6:	8b e2       	ldi	r24, 0x2B	; 43
     be8:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     bec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     bf0:	88 23       	and	r24, r24
     bf2:	c1 f3       	breq	.-16     	; 0xbe4 <DS1307_Settings+0x5c>
	
	Buttons_SetButtonState = false;
     bf4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     bf8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     bfc:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.hours = tempWatchDigit;										//	Set hours
     c00:	8c 2b       	or	r24, r28
     c02:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <TimeRegistersTransmitBuffer+0x2>
	
	GeekSport_SettingsDigit = 0;
     c06:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c0a:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     c0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c12:	81 11       	cpse	r24, r1
     c14:	12 c0       	rjmp	.+36     	; 0xc3a <DS1307_Settings+0xb2>
	{
		if (GeekSport_SettingsDigit > 5)	GeekSport_SettingsDigit = 0;
     c16:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     c1a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c1e:	06 97       	sbiw	r24, 0x06	; 6
     c20:	20 f0       	brcs	.+8      	; 0xc2a <DS1307_Settings+0xa2>
     c22:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c26:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(55, 21);
     c2a:	65 e1       	ldi	r22, 0x15	; 21
     c2c:	87 e3       	ldi	r24, 0x37	; 55
     c2e:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.hours = tempWatchDigit;										//	Set hours
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     c32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c36:	88 23       	and	r24, r24
     c38:	71 f3       	breq	.-36     	; 0xc16 <DS1307_Settings+0x8e>
	{
		if (GeekSport_SettingsDigit > 5)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(55, 21);
	}
	Buttons_SetButtonState = false;
     c3a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     c3e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     c42:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c46:	c8 2f       	mov	r28, r24
     c48:	c2 95       	swap	r28
     c4a:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     c4c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c50:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(61, 21);
     c54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c58:	81 11       	cpse	r24, r1
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <DS1307_Settings+0xe4>
     c5c:	65 e1       	ldi	r22, 0x15	; 21
     c5e:	8d e3       	ldi	r24, 0x3D	; 61
     c60:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     c64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c68:	88 23       	and	r24, r24
     c6a:	c1 f3       	breq	.-16     	; 0xc5c <DS1307_Settings+0xd4>
	
	Buttons_SetButtonState = false;
     c6c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     c70:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     c74:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.minutes = tempWatchDigit;									//	Set minutes
     c78:	8c 2b       	or	r24, r28
     c7a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <TimeRegistersTransmitBuffer+0x1>
	
	GeekSport_SettingsDigit = 0;
     c7e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c82:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     c86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     c8a:	81 11       	cpse	r24, r1
     c8c:	12 c0       	rjmp	.+36     	; 0xcb2 <DS1307_Settings+0x12a>
	{
		if (GeekSport_SettingsDigit > 3)	GeekSport_SettingsDigit = 0;
     c8e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     c92:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c96:	04 97       	sbiw	r24, 0x04	; 4
     c98:	20 f0       	brcs	.+8      	; 0xca2 <DS1307_Settings+0x11a>
     c9a:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     c9e:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(37, 30);
     ca2:	6e e1       	ldi	r22, 0x1E	; 30
     ca4:	85 e2       	ldi	r24, 0x25	; 37
     ca6:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.minutes = tempWatchDigit;									//	Set minutes
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     caa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     cae:	88 23       	and	r24, r24
     cb0:	71 f3       	breq	.-36     	; 0xc8e <DS1307_Settings+0x106>
	{
		if (GeekSport_SettingsDigit > 3)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(37, 30);
	}
	Buttons_SetButtonState = false;
     cb2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     cb6:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     cba:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     cbe:	c8 2f       	mov	r28, r24
     cc0:	c2 95       	swap	r28
     cc2:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     cc4:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     cc8:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(43, 30);
     ccc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     cd0:	81 11       	cpse	r24, r1
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <DS1307_Settings+0x15c>
     cd4:	6e e1       	ldi	r22, 0x1E	; 30
     cd6:	8b e2       	ldi	r24, 0x2B	; 43
     cd8:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     cdc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     ce0:	88 23       	and	r24, r24
     ce2:	c1 f3       	breq	.-16     	; 0xcd4 <DS1307_Settings+0x14c>
	
	Buttons_SetButtonState = false;
     ce4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     ce8:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     cec:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.date = tempWatchDigit;										//	Set	date
     cf0:	8c 2b       	or	r24, r28
     cf2:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <TimeRegistersTransmitBuffer+0x4>
	
	GeekSport_SettingsDigit = 0;
     cf6:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     cfa:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     cfe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d02:	81 11       	cpse	r24, r1
     d04:	12 c0       	rjmp	.+36     	; 0xd2a <DS1307_Settings+0x1a2>
	{
		if (GeekSport_SettingsDigit > 1)	GeekSport_SettingsDigit = 0;
     d06:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     d0a:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d0e:	02 97       	sbiw	r24, 0x02	; 2
     d10:	20 f0       	brcs	.+8      	; 0xd1a <DS1307_Settings+0x192>
     d12:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d16:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(55, 30);
     d1a:	6e e1       	ldi	r22, 0x1E	; 30
     d1c:	87 e3       	ldi	r24, 0x37	; 55
     d1e:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
	Buttons_SetButtonState = false;
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.date = tempWatchDigit;										//	Set	date
	
	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     d22:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d26:	88 23       	and	r24, r24
     d28:	71 f3       	breq	.-36     	; 0xd06 <DS1307_Settings+0x17e>
	{
		if (GeekSport_SettingsDigit > 1)	GeekSport_SettingsDigit = 0;
		GeekSport_LCD_Nokia_UpdateDigitOnScreen(55, 30);
	}
	Buttons_SetButtonState = false;
     d2a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     d2e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     d32:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d36:	c8 2f       	mov	r28, r24
     d38:	c2 95       	swap	r28
     d3a:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     d3c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d40:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(61, 30);
     d44:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d48:	81 11       	cpse	r24, r1
     d4a:	08 c0       	rjmp	.+16     	; 0xd5c <DS1307_Settings+0x1d4>
     d4c:	6e e1       	ldi	r22, 0x1E	; 30
     d4e:	8d e3       	ldi	r24, 0x3D	; 61
     d50:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     d54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d58:	88 23       	and	r24, r24
     d5a:	c1 f3       	breq	.-16     	; 0xd4c <DS1307_Settings+0x1c4>
	
	Buttons_SetButtonState = false;
     d5c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     d60:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     d64:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.month = tempWatchDigit;											//	Set	month
     d68:	8c 2b       	or	r24, r28
     d6a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <TimeRegistersTransmitBuffer+0x5>
	
	GeekSport_SettingsDigit = 0;
     d6e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d72:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(73, 30);
     d76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d7a:	81 11       	cpse	r24, r1
     d7c:	08 c0       	rjmp	.+16     	; 0xd8e <DS1307_Settings+0x206>
     d7e:	6e e1       	ldi	r22, 0x1E	; 30
     d80:	89 e4       	ldi	r24, 0x49	; 73
     d82:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     d86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     d8a:	88 23       	and	r24, r24
     d8c:	c1 f3       	breq	.-16     	; 0xd7e <DS1307_Settings+0x1f6>
	
	Buttons_SetButtonState = false;
     d8e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit = (GeekSport_SettingsDigit << 4);
     d92:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     d96:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     d9a:	c8 2f       	mov	r28, r24
     d9c:	c2 95       	swap	r28
     d9e:	c0 7f       	andi	r28, 0xF0	; 240
	
	GeekSport_SettingsDigit = 0;
     da0:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     da4:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(79, 30);
     da8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     dac:	81 11       	cpse	r24, r1
     dae:	08 c0       	rjmp	.+16     	; 0xdc0 <DS1307_Settings+0x238>
     db0:	6e e1       	ldi	r22, 0x1E	; 30
     db2:	8f e4       	ldi	r24, 0x4F	; 79
     db4:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
     db8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     dbc:	88 23       	and	r24, r24
     dbe:	c1 f3       	breq	.-16     	; 0xdb0 <DS1307_Settings+0x228>
	
	Buttons_SetButtonState = false;
     dc0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempWatchDigit |= GeekSport_SettingsDigit;
     dc4:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     dc8:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.year = tempWatchDigit;											//	Set	year
     dcc:	8c 2b       	or	r24, r28
     dce:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <TimeRegistersTransmitBuffer+0x6>
	

	GeekSport_SettingsDigit = 0;
     dd2:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     dd6:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)
     dda:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     dde:	81 11       	cpse	r24, r1
     de0:	20 c0       	rjmp	.+64     	; 0xe22 <DS1307_Settings+0x29a>
	{
		if (GeekSport_SettingsDigit > 6)	GeekSport_SettingsDigit = 0;
     de2:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     de6:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     dea:	07 97       	sbiw	r24, 0x07	; 7
     dec:	20 f0       	brcs	.+8      	; 0xdf6 <DS1307_Settings+0x26e>
     dee:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     df2:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
		LCD_Nokia_SetPixelPosition(60, 39);
     df6:	67 e2       	ldi	r22, 0x27	; 39
     df8:	8c e3       	ldi	r24, 0x3C	; 60
     dfa:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
		LCD_Nokia_Send6CharString_P((int8_t *) WeekdaysPointer[GeekSport_SettingsDigit]);
     dfe:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     e02:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     e06:	ee 0f       	add	r30, r30
     e08:	ff 1f       	adc	r31, r31
     e0a:	e5 5e       	subi	r30, 0xE5	; 229
     e0c:	fe 4f       	sbci	r31, 0xFE	; 254
     e0e:	80 81       	ld	r24, Z
     e10:	91 81       	ldd	r25, Z+1	; 0x01
     e12:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
		LCD_Nokia_UpdateFullScreen();
     e16:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
	tempWatchDigit |= GeekSport_SettingsDigit;
	TimeRegistersTransmitBuffer.year = tempWatchDigit;											//	Set	year
	

	GeekSport_SettingsDigit = 0;
	while (!Buttons_SetButtonState)
     e1a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
     e1e:	88 23       	and	r24, r24
     e20:	01 f3       	breq	.-64     	; 0xde2 <DS1307_Settings+0x25a>
		LCD_Nokia_SetPixelPosition(60, 39);
		LCD_Nokia_Send6CharString_P((int8_t *) WeekdaysPointer[GeekSport_SettingsDigit]);
		LCD_Nokia_UpdateFullScreen();
	}
	
	tempWatchDigit = GeekSport_SettingsDigit + 1;
     e22:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     e26:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
	TimeRegistersTransmitBuffer.weekday = tempWatchDigit;										//	Set	the day of week
     e2a:	8f 5f       	subi	r24, 0xFF	; 255
     e2c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <TimeRegistersTransmitBuffer+0x3>
	
	DS1307_SendBCDTimeStructData_WithoutSeconds_24();
}
     e30:	cf 91       	pop	r28
	}
	
	tempWatchDigit = GeekSport_SettingsDigit + 1;
	TimeRegistersTransmitBuffer.weekday = tempWatchDigit;										//	Set	the day of week
	
	DS1307_SendBCDTimeStructData_WithoutSeconds_24();
     e32:	0c 94 2e 05 	jmp	0xa5c	; 0xa5c <DS1307_SendBCDTimeStructData_WithoutSeconds_24>

00000e36 <DS1307_LCD_Nokia_Main>:
}

void DS1307_LCD_Nokia_Main (void)
{
     e36:	0f 93       	push	r16
	switch (DS1307_Mode)
     e38:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <DS1307_Mode>
     e3c:	88 23       	and	r24, r24
     e3e:	61 f1       	breq	.+88     	; 0xe98 <DS1307_LCD_Nokia_Main+0x62>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	41 f5       	brne	.+80     	; 0xe94 <DS1307_LCD_Nokia_Main+0x5e>
			
			break;
		}
		case DS1307_TIME_SETTING_MODE:
		{
			LCD_Nokia_ClearBuffer();
     e44:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			
			LCD_Nokia_SetPixelPosition(0, 0);
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) timeSettings);
     e50:	8a ec       	ldi	r24, 0xCA	; 202
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 21);
     e58:	65 e1       	ldi	r22, 0x15	; 21
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) timeSettingString);
     e60:	83 ef       	ldi	r24, 0xF3	; 243
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 30);
     e68:	6e e1       	ldi	r22, 0x1E	; 30
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dateSettingString);
     e70:	84 ee       	ldi	r24, 0xE4	; 228
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 39);
     e78:	67 e2       	ldi	r22, 0x27	; 39
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) weekdaySettingString);
     e80:	89 ed       	ldi	r24, 0xD9	; 217
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			DS1307_Settings();
     e88:	0e 94 c4 05 	call	0xb88	; 0xb88 <DS1307_Settings>
			
			LCD_Nokia_ClearBuffer();
     e8c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			DS1307_Mode = DS1307_WATCH_MODE;
     e90:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <DS1307_Mode>
			break;
		}
		
		default:	break;
	}
}
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret
{
	switch (DS1307_Mode)
	{
		case DS1307_WATCH_MODE:
		{
			DS1307_ReceiveTimeData();
     e98:	0e 94 6f 05 	call	0xade	; 0xade <DS1307_ReceiveTimeData>
			
			LCD_Nokia_DrawUnfilledRectangle(0, 7, 83, 47, 4);
     e9c:	04 e0       	ldi	r16, 0x04	; 4
     e9e:	2f e2       	ldi	r18, 0x2F	; 47
     ea0:	43 e5       	ldi	r20, 0x53	; 83
     ea2:	67 e0       	ldi	r22, 0x07	; 7
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_Nokia_DrawUnfilledRectangle>
			LCD_Nokia_SetPixelPosition(12, 12);
     eaa:	6c e0       	ldi	r22, 0x0C	; 12
     eac:	8c e0       	ldi	r24, 0x0C	; 12
     eae:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send12Integer(TimeRegPointer->hours);
     eb2:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     eb6:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     eba:	62 81       	ldd	r22, Z+2	; 0x02
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_Nokia_Send12Integer>
			LCD_Nokia_Put12Char(':');
     ec6:	8a e3       	ldi	r24, 0x3A	; 58
     ec8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
			LCD_Nokia_Send12Integer(TimeRegPointer->minutes);
     ecc:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     ed0:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     ed4:	61 81       	ldd	r22, Z+1	; 0x01
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <LCD_Nokia_Send12Integer>
			LCD_Nokia_SetPixelPosition(6, 30);
     ee0:	6e e1       	ldi	r22, 0x1E	; 30
     ee2:	86 e0       	ldi	r24, 0x06	; 6
     ee4:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) WeekdaysPointer[TimeRegPointer->weekday - 1]);
     ee8:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     eec:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     ef0:	e3 81       	ldd	r30, Z+3	; 0x03
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	ee 0f       	add	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	e7 5e       	subi	r30, 0xE7	; 231
     efa:	fe 4f       	sbci	r31, 0xFE	; 254
     efc:	80 81       	ld	r24, Z
     efe:	91 81       	ldd	r25, Z+1	; 0x01
     f00:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6CharString_P((int8_t* ) PSTR (", "));
     f04:	87 ec       	ldi	r24, 0xC7	; 199
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6CharString_P((int8_t* ) MonthsPointer[TimeRegPointer->month - 1]);
     f0c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     f10:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     f14:	e5 81       	ldd	r30, Z+5	; 0x05
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	ef 5f       	subi	r30, 0xFF	; 255
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Put6Char(' ');
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
			LCD_Nokia_Send5Integer(TimeRegPointer->date);
     f2e:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
     f32:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
     f36:	64 81       	ldd	r22, Z+4	; 0x04
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <LCD_Nokia_Send5Integer>
			break;
		}
		
		default:	break;
	}
}
     f42:	0f 91       	pop	r16
			LCD_Nokia_Send6CharString_P((int8_t* ) WeekdaysPointer[TimeRegPointer->weekday - 1]);
			LCD_Nokia_Send6CharString_P((int8_t* ) PSTR (", "));
			LCD_Nokia_Send6CharString_P((int8_t* ) MonthsPointer[TimeRegPointer->month - 1]);
			LCD_Nokia_Put6Char(' ');
			LCD_Nokia_Send5Integer(TimeRegPointer->date);
			LCD_Nokia_UpdateFullScreen();
     f44:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>

00000f48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>:
}

void Geeksport_WatchDogInit (void)
{
	WDTCSR |= 1 << WDCE | 1 << WDE;
	WDTCSR |= 1 << WDIE | 0 << WDP3 | 1 << WDP2 | 1 << WDP1 | 0 << WDP0;	//	1 s
     f48:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
     f4c:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     f50:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     f54:	80 5d       	subi	r24, 0xD0	; 208
     f56:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
     f5a:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>

00000f5e <GeekSport_ChangeSettingDigit>:
     f5e:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
     f62:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     f66:	89 30       	cpi	r24, 0x09	; 9
     f68:	38 f4       	brcc	.+14     	; 0xf78 <GeekSport_ChangeSettingDigit+0x1a>
     f6a:	8f 5f       	subi	r24, 0xFF	; 255
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     f72:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <GeekSport_SettingsDigit>
     f76:	08 95       	ret
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	90 93 f9 01 	sts	0x01F9, r25	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
     f80:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <GeekSport_SettingsDigit>
     f84:	08 95       	ret

00000f86 <Geeksport_GoToSleep>:
     f86:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <I2C_TurnOff>
     f8a:	0e 94 94 14 	call	0x2928	; 0x2928 <SPI_Master_Off>
     f8e:	5e 98       	cbi	0x0b, 6	; 11
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <LCD_Nokia_SetPower>
     f96:	41 98       	cbi	0x08, 1	; 8
     f98:	83 b7       	in	r24, 0x33	; 51
     f9a:	81 7f       	andi	r24, 0xF1	; 241
     f9c:	83 bf       	out	0x33, r24	; 51
     f9e:	e4 e6       	ldi	r30, 0x64	; 100
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 68       	ori	r24, 0x8E	; 142
     fa6:	80 83       	st	Z, r24
     fa8:	83 b7       	in	r24, 0x33	; 51
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	83 bf       	out	0x33, r24	; 51
     fae:	85 b7       	in	r24, 0x35	; 53
     fb0:	80 66       	ori	r24, 0x60	; 96
     fb2:	85 bf       	out	0x35, r24	; 53
     fb4:	85 b7       	in	r24, 0x35	; 53
     fb6:	80 64       	ori	r24, 0x40	; 64
     fb8:	85 bf       	out	0x35, r24	; 53
     fba:	85 b7       	in	r24, 0x35	; 53
     fbc:	8f 7d       	andi	r24, 0xDF	; 223
     fbe:	85 bf       	out	0x35, r24	; 53
     fc0:	78 94       	sei
     fc2:	88 95       	sleep
     fc4:	08 95       	ret

00000fc6 <GeekSport_SettingsMenu>:
	GeekSport_SleepModePreparations();
	Geeksport_WatchDogInit();
}

void GeekSport_SettingsMenu (void)
{
     fc6:	cf 93       	push	r28
	uint8_t mode = Settings_Mode;
     fc8:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <Settings_Mode>
	
	switch (mode)
     fcc:	cc 23       	and	r28, r28
     fce:	c1 f1       	breq	.+112    	; 0x1040 <GeekSport_SettingsMenu+0x7a>
     fd0:	c1 30       	cpi	r28, 0x01	; 1
     fd2:	a1 f5       	brne	.+104    	; 0x103c <GeekSport_SettingsMenu+0x76>
			break;
		}
		
		case SETTINGS_MODE:
		{
			LCD_Nokia_ClearBuffer();
     fd4:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			LCD_Nokia_SetPixelPosition(19, 0);
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	83 e1       	ldi	r24, 0x13	; 19
     fdc:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) settings);
     fe0:	8e e5       	ldi	r24, 0x5E	; 94
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(3, 11);
     fe8:	6b e0       	ldi	r22, 0x0B	; 11
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5CharString_P((int8_t *) setWheelLength);							//	Wheel length setting string
     ff0:	8d e4       	ldi	r24, 0x4D	; 77
     ff2:	91 e0       	ldi	r25, 0x01	; 1
     ff4:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 21);
     ff8:	65 e1       	ldi	r22, 0x15	; 21
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) timeSettingString);
    1000:	8a ea       	ldi	r24, 0xAA	; 170
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 30);
    1008:	6e e1       	ldi	r22, 0x1E	; 30
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dateSettingString);
    1010:	8b e9       	ldi	r24, 0x9B	; 155
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			LCD_Nokia_SetPixelPosition(0, 39);
    1018:	67 e2       	ldi	r22, 0x27	; 39
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) weekdaySettingString);
    1020:	80 e9       	ldi	r24, 0x90	; 144
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			Speedometer_Settings();
    1028:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <Speedometer_Settings>
//			DS1307_Settings();
			
			LCD_Nokia_ClearBuffer();
    102c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			LCD_Nokia_UpdateFullScreen();
    1030:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
			Settings_Mode = SETTINGS_INFO_MODE;
    1034:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Settings_Mode>
			GeekSport_Mode = GEEKSPORT_WATCH_MODE;
    1038:	c0 93 c9 01 	sts	0x01C9, r28	; 0x8001c9 <GeekSport_Mode>
			
			break;
		}
	}
	
}
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret
	
	switch (mode)
	{
		case SETTINGS_INFO_MODE:
		{
			LCD_Nokia_SetPixelPosition(20, 2);
    1040:	62 e0       	ldi	r22, 0x02	; 2
    1042:	84 e1       	ldi	r24, 0x14	; 20
    1044:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) GeekSportString);
    1048:	86 e8       	ldi	r24, 0x86	; 134
    104a:	91 e0       	ldi	r25, 0x01	; 1
    104c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(2, 12);
    1050:	6c e0       	ldi	r22, 0x0C	; 12
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo0);
    1058:	8b e7       	ldi	r24, 0x7B	; 123
    105a:	91 e0       	ldi	r25, 0x01	; 1
    105c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(0, 21);
    1060:	65 e1       	ldi	r22, 0x15	; 21
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo1);
    1068:	8c e6       	ldi	r24, 0x6C	; 108
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(54, 40);
    1070:	68 e2       	ldi	r22, 0x28	; 40
    1072:	86 e3       	ldi	r24, 0x36	; 54
    1074:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo2);
    1078:	87 e6       	ldi	r24, 0x67	; 103
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			break;
		}
	}
	
}
    1080:	cf 91       	pop	r28
			LCD_Nokia_SetPixelPosition(0, 21);
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo1);
			LCD_Nokia_SetPixelPosition(54, 40);
			LCD_Nokia_Send6CharString_P((int8_t *) developerInfo2);
			
			LCD_Nokia_UpdateFullScreen();
    1082:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>

00001086 <GeekSport_SetMode>:
	
}

void GeekSport_SetMode (uint8_t mode)
{
	switch (mode)
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	09 f4       	brne	.+2      	; 0x108c <GeekSport_SetMode+0x6>
    108a:	51 c0       	rjmp	.+162    	; 0x112e <GeekSport_SetMode+0xa8>
    108c:	58 f0       	brcs	.+22     	; 0x10a4 <GeekSport_SetMode+0x1e>
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	d9 f0       	breq	.+54     	; 0x10c8 <GeekSport_SetMode+0x42>
    1092:	08 f4       	brcc	.+2      	; 0x1096 <GeekSport_SetMode+0x10>
    1094:	3e c0       	rjmp	.+124    	; 0x1112 <GeekSport_SetMode+0x8c>
    1096:	86 35       	cpi	r24, 0x56	; 86
    1098:	29 f5       	brne	.+74     	; 0x10e4 <GeekSport_SetMode+0x5e>
			break;
		}
		
		case GEEKSPORT_SLEEP_MODE:
		{
			if (sleepModeOn)
    109a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <sleepModeOn>
    109e:	81 11       	cpse	r24, r1
    10a0:	54 c0       	rjmp	.+168    	; 0x114a <GeekSport_SetMode+0xc4>
    10a2:	08 95       	ret
	
}

void GeekSport_SetMode (uint8_t mode)
{
	switch (mode)
    10a4:	88 23       	and	r24, r24
    10a6:	01 f1       	breq	.+64     	; 0x10e8 <GeekSport_SetMode+0x62>
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	e9 f4       	brne	.+58     	; 0x10e6 <GeekSport_SetMode+0x60>
			GeekSport_SettingsMenu();
		}
		
		case GEEKSPORT_WATCH_MODE:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    10ac:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10b0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    10b4:	98 17       	cp	r25, r24
    10b6:	31 f0       	breq	.+12     	; 0x10c4 <GeekSport_SetMode+0x3e>
			{
				GeekSport_LastMode = GeekSport_Mode;
    10b8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10bc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <GeekSport_LastMode>
				LCD_Nokia_ClearBuffer();
    10c0:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
 			}
			DS1307_LCD_Nokia_Main();
    10c4:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <DS1307_LCD_Nokia_Main>
			break;
		}
		
		case GEEKSPORT_SETTINGS_MENU:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    10c8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10cc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    10d0:	98 17       	cp	r25, r24
    10d2:	31 f0       	breq	.+12     	; 0x10e0 <GeekSport_SetMode+0x5a>
			{
				GeekSport_LastMode = GeekSport_Mode;
    10d4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10d8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <GeekSport_LastMode>
				LCD_Nokia_ClearBuffer();
    10dc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			}
			GeekSport_SettingsMenu();
    10e0:	0c 94 e3 07 	jmp	0xfc6	; 0xfc6 <GeekSport_SettingsMenu>
    10e4:	08 95       	ret
    10e6:	08 95       	ret
{
	switch (mode)
	{
		case GEEKSPORT_START:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    10e8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10ec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    10f0:	98 17       	cp	r25, r24
    10f2:	31 f0       	breq	.+12     	; 0x1100 <GeekSport_SetMode+0x7a>
			{
 				GeekSport_LastMode = GeekSport_Mode;
    10f4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    10f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <GeekSport_LastMode>
				LCD_Nokia_ClearBuffer();
    10fc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
 			}
			GeekSport_SettingsMenu();
    1100:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <GeekSport_SettingsMenu>
		}
		
		case GEEKSPORT_WATCH_MODE:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    1104:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    1108:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    110c:	98 13       	cpse	r25, r24
    110e:	d4 cf       	rjmp	.-88     	; 0x10b8 <GeekSport_SetMode+0x32>
    1110:	d9 cf       	rjmp	.-78     	; 0x10c4 <GeekSport_SetMode+0x3e>
			break;
		}
		
		case GEEKSPORT_BLUETOOTH_SCREEN_MODE:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    1112:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    1116:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    111a:	98 17       	cp	r25, r24
    111c:	31 f0       	breq	.+12     	; 0x112a <GeekSport_SetMode+0xa4>
			{
				GeekSport_LastMode = GeekSport_Mode;
    111e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    1122:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <GeekSport_LastMode>
				LCD_Nokia_ClearBuffer();
    1126:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			}
			BLuetooth_LCD_Nokia_Main();
    112a:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <BLuetooth_LCD_Nokia_Main>
			break;
		}
		
		case GEEKSPORT_SPEEDOMETER_MODE:
		{
			if (GeekSport_LastMode != GeekSport_Mode)
    112e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    1132:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <GeekSport_LastMode>
    1136:	98 17       	cp	r25, r24
    1138:	31 f0       	breq	.+12     	; 0x1146 <GeekSport_SetMode+0xc0>
			{
 				GeekSport_LastMode = GeekSport_Mode;
    113a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    113e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <GeekSport_LastMode>
				LCD_Nokia_ClearBuffer();
    1142:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			}
			Speedometer_LCD_Nokia_Main();
    1146:	0c 94 f5 0f 	jmp	0x1fea	; 0x1fea <Speedometer_LCD_Nokia_Main>
		
		case GEEKSPORT_SLEEP_MODE:
		{
			if (sleepModeOn)
			{
				USART_Init();
    114a:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <USART_Init>
				USART_SendString((int8_t *) "sleep");
    114e:	89 e2       	ldi	r24, 0x29	; 41
    1150:	91 e0       	ldi	r25, 0x01	; 1
    1152:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <USART_SendString>
				Bluetooth_Off();
    1156:	0e 94 ce 03 	call	0x79c	; 0x79c <Bluetooth_Off>
				cli();
    115a:	f8 94       	cli
				LCD_Nokia_ClearBuffer();
    115c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
				LCD_Nokia_UpdateFullScreen();
    1160:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
				Geeksport_GoToSleep();
    1164:	0c 94 c3 07 	jmp	0xf86	; 0xf86 <Geeksport_GoToSleep>

00001168 <__vector_6>:
	}
}
*/

ISR (WDT_vect)
{
    1168:	1f 92       	push	r1
    116a:	0f 92       	push	r0
    116c:	0f b6       	in	r0, 0x3f	; 63
    116e:	0f 92       	push	r0
    1170:	11 24       	eor	r1, r1
    1172:	2f 93       	push	r18
    1174:	3f 93       	push	r19
    1176:	4f 93       	push	r20
    1178:	5f 93       	push	r21
    117a:	6f 93       	push	r22
    117c:	7f 93       	push	r23
    117e:	8f 93       	push	r24
    1180:	9f 93       	push	r25
    1182:	af 93       	push	r26
    1184:	bf 93       	push	r27
    1186:	cf 93       	push	r28
    1188:	ef 93       	push	r30
    118a:	ff 93       	push	r31
	if (sleepModeOn)
    118c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <sleepModeOn>
    1190:	81 11       	cpse	r24, r1
    1192:	37 c0       	rjmp	.+110    	; 0x1202 <__vector_6+0x9a>
				//sei();
			}
		}
		else	Buttons_Button4WasPushed = false;
	}
	else if (goToSleepMode && (!sleepModeOn))
    1194:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <goToSleepMode>
    1198:	81 11       	cpse	r24, r1
    119a:	19 c0       	rjmp	.+50     	; 0x11ce <__vector_6+0x66>
			GeekSport_Mode = GEEKSPORT_SLEEP_MODE;
		}
	}
	else
	{
		goToSleepMode = true;
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <goToSleepMode>
		timeToSleep = 0;
    11a2:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <timeToSleep+0x1>
    11a6:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <timeToSleep>
	}
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	cf 91       	pop	r28
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti
				//sei();
			}
		}
		else	Buttons_Button4WasPushed = false;
	}
	else if (goToSleepMode && (!sleepModeOn))
    11ce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <sleepModeOn>
    11d2:	81 11       	cpse	r24, r1
    11d4:	e3 cf       	rjmp	.-58     	; 0x119c <__vector_6+0x34>
	{
		timeToSleep++;
    11d6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <timeToSleep>
    11da:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <timeToSleep+0x1>
    11de:	01 96       	adiw	r24, 0x01	; 1
    11e0:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <timeToSleep+0x1>
    11e4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <timeToSleep>
		if (timeToSleep >= 5)
    11e8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <timeToSleep>
    11ec:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <timeToSleep+0x1>
    11f0:	05 97       	sbiw	r24, 0x05	; 5
    11f2:	d8 f2       	brcs	.-74     	; 0x11aa <__vector_6+0x42>
		{
			sleepModeOn = true;
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <sleepModeOn>
			GeekSport_Mode = GEEKSPORT_SLEEP_MODE;
    11fa:	86 e5       	ldi	r24, 0x56	; 86
    11fc:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <GeekSport_Mode>
    1200:	d4 cf       	rjmp	.-88     	; 0x11aa <__vector_6+0x42>

ISR (WDT_vect)
{
	if (sleepModeOn)
	{
		if (!(bitIsSet(BUTTONS_PINS_2, BUTTONS_DDR_2_BUTTON_2_PIN)))							//	LED Button
    1202:	89 b1       	in	r24, 0x09	; 9
    1204:	67 e0       	ldi	r22, 0x07	; 7
    1206:	0e 94 2a 04 	call	0x854	; 0x854 <bitIsSet>
    120a:	81 11       	cpse	r24, r1
    120c:	21 c0       	rjmp	.+66     	; 0x1250 <__vector_6+0xe8>
		{
			if (!Buttons_Button4WasPushed)
    120e:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Buttons_Button4WasPushed>
    1212:	81 11       	cpse	r24, r1
    1214:	ca cf       	rjmp	.-108    	; 0x11aa <__vector_6+0x42>
			{
				Buttons_Button4WasPushed = true;
    1216:	c1 e0       	ldi	r28, 0x01	; 1
    1218:	c0 93 77 01 	sts	0x0177, r28	; 0x800177 <Buttons_Button4WasPushed>
				
				SMCR &= ~(1 << SE);
    121c:	83 b7       	in	r24, 0x33	; 51
    121e:	8e 7f       	andi	r24, 0xFE	; 254
    1220:	83 bf       	out	0x33, r24	; 51
				cli();
    1222:	f8 94       	cli
				PRR0 &= ~(1 << PRTWI0 | 1 << PRTIM1 | 1 << PRSPI0 | 1 << PRUSART0);
    1224:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
    1228:	81 77       	andi	r24, 0x71	; 113
    122a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
				DS1307_POWER_PORT |= 1 << DS1307_POWER_PIN;
    122e:	41 9a       	sbi	0x08, 1	; 8
				//LCD_Nokia_SetPower(1);
				
				SPI_Master_Init();
    1230:	0e 94 80 14 	call	0x2900	; 0x2900 <SPI_Master_Init>
				I2C_Init(I2C_SCL_FREQUENCY, I2C_PRESCALER_BITS);
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	60 ea       	ldi	r22, 0xA0	; 160
    1238:	76 e8       	ldi	r23, 0x86	; 134
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 2b 09 	call	0x1256	; 0x1256 <I2C_Init>
				//USART_Init();
				
				sleepModeOn = false;
    1242:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <sleepModeOn>
				goToSleepMode = false;
    1246:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <goToSleepMode>
				GeekSport_Mode = GEEKSPORT_WATCH_MODE;
    124a:	c0 93 c9 01 	sts	0x01C9, r28	; 0x8001c9 <GeekSport_Mode>
    124e:	ad cf       	rjmp	.-166    	; 0x11aa <__vector_6+0x42>
				//sei();
			}
		}
		else	Buttons_Button4WasPushed = false;
    1250:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <Buttons_Button4WasPushed>
    1254:	aa cf       	rjmp	.-172    	; 0x11aa <__vector_6+0x42>

00001256 <I2C_Init>:
		timeStructPointer->month = I2C_ReceiveBuffer[6];
		timeStructPointer->year = I2C_ReceiveBuffer[7];
	}
	
	return (I2C_StatusFlags.transfer);
}
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	8b 01       	movw	r16, r22
    125e:	9c 01       	movw	r18, r24
    1260:	c4 2f       	mov	r28, r20
    1262:	87 b1       	in	r24, 0x07	; 7
    1264:	8f 7c       	andi	r24, 0xCF	; 207
    1266:	87 b9       	out	0x07, r24	; 7
    1268:	88 b1       	in	r24, 0x08	; 8
    126a:	80 63       	ori	r24, 0x30	; 48
    126c:	88 b9       	out	0x08, r24	; 8
    126e:	60 e4       	ldi	r22, 0x40	; 64
    1270:	72 e4       	ldi	r23, 0x42	; 66
    1272:	8f e0       	ldi	r24, 0x0F	; 15
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	98 01       	movw	r18, r16
    127a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    127e:	ca 01       	movw	r24, r20
    1280:	b9 01       	movw	r22, r18
    1282:	60 51       	subi	r22, 0x10	; 16
    1284:	71 09       	sbc	r23, r1
    1286:	81 09       	sbc	r24, r1
    1288:	91 09       	sbc	r25, r1
    128a:	4c 2f       	mov	r20, r28
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	9a 01       	movw	r18, r20
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	03 2e       	mov	r0, r19
    1296:	00 0c       	add	r0, r0
    1298:	44 0b       	sbc	r20, r20
    129a:	55 0b       	sbc	r21, r21
    129c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    12a0:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <I2C_TurnOff>:
    12b8:	ec eb       	ldi	r30, 0xBC	; 188
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8b 7f       	andi	r24, 0xFB	; 251
    12c0:	80 83       	st	Z, r24
    12c2:	08 95       	ret

000012c4 <I2C_MT_TransmitData>:
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	ec 01       	movw	r28, r24
    12ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    12ce:	90 fd       	sbrc	r25, 0
    12d0:	fc cf       	rjmp	.-8      	; 0x12ca <I2C_MT_TransmitData+0x6>
    12d2:	60 93 cb 01 	sts	0x01CB, r22	; 0x8001cb <I2C_MessageSize>
    12d6:	88 81       	ld	r24, Y
    12d8:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <I2C_TransmitBuffer>
    12dc:	88 81       	ld	r24, Y
    12de:	80 fd       	sbrc	r24, 0
    12e0:	15 c0       	rjmp	.+42     	; 0x130c <I2C_MT_TransmitData+0x48>
    12e2:	62 30       	cpi	r22, 0x02	; 2
    12e4:	98 f0       	brcs	.+38     	; 0x130c <I2C_MT_TransmitData+0x48>
    12e6:	fe 01       	movw	r30, r28
    12e8:	31 96       	adiw	r30, 0x01	; 1
    12ea:	62 50       	subi	r22, 0x02	; 2
    12ec:	26 2f       	mov	r18, r22
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	2e 5f       	subi	r18, 0xFE	; 254
    12f2:	3f 4f       	sbci	r19, 0xFF	; 255
    12f4:	2c 0f       	add	r18, r28
    12f6:	3d 1f       	adc	r19, r29
    12f8:	df 01       	movw	r26, r30
    12fa:	ac 1b       	sub	r26, r28
    12fc:	bd 0b       	sbc	r27, r29
    12fe:	91 91       	ld	r25, Z+
    1300:	a4 52       	subi	r26, 0x24	; 36
    1302:	be 4f       	sbci	r27, 0xFE	; 254
    1304:	9c 93       	st	X, r25
    1306:	e2 17       	cp	r30, r18
    1308:	f3 07       	cpc	r31, r19
    130a:	b1 f7       	brne	.-20     	; 0x12f8 <I2C_MT_TransmitData+0x34>
    130c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <I2C_StatusFlags>
    1310:	85 ea       	ldi	r24, 0xA5	; 165
    1312:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	08 95       	ret

0000131c <I2C_MR_ReceiveData>:
    131c:	dc 01       	movw	r26, r24
    131e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1322:	90 fd       	sbrc	r25, 0
    1324:	fc cf       	rjmp	.-8      	; 0x131e <I2C_MR_ReceiveData+0x2>
    1326:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <I2C_StatusFlags>
    132a:	80 ff       	sbrs	r24, 0
    132c:	13 c0       	rjmp	.+38     	; 0x1354 <I2C_MR_ReceiveData+0x38>
    132e:	66 23       	and	r22, r22
    1330:	89 f0       	breq	.+34     	; 0x1354 <I2C_MR_ReceiveData+0x38>
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	29 2f       	mov	r18, r25
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	f9 01       	movw	r30, r18
    133a:	e4 53       	subi	r30, 0x34	; 52
    133c:	fe 4f       	sbci	r31, 0xFE	; 254
    133e:	40 81       	ld	r20, Z
    1340:	2a 0f       	add	r18, r26
    1342:	3b 1f       	adc	r19, r27
    1344:	f9 01       	movw	r30, r18
    1346:	31 97       	sbiw	r30, 0x01	; 1
    1348:	40 83       	st	Z, r20
    134a:	9f 5f       	subi	r25, 0xFF	; 255
    134c:	69 17       	cp	r22, r25
    134e:	90 f7       	brcc	.-28     	; 0x1334 <I2C_MR_ReceiveData+0x18>
    1350:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <I2C_StatusFlags>
    1354:	81 70       	andi	r24, 0x01	; 1
    1356:	08 95       	ret

00001358 <__vector_24>:

ISR (TWI0_vect)
{
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	8f 93       	push	r24
    1364:	9f 93       	push	r25
    1366:	ef 93       	push	r30
    1368:	ff 93       	push	r31
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    136a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    136e:	88 7f       	andi	r24, 0xF8	; 248
    1370:	80 33       	cpi	r24, 0x30	; 48
    1372:	09 f4       	brne	.+2      	; 0x1376 <__vector_24+0x1e>
    1374:	5d c0       	rjmp	.+186    	; 0x1430 <__vector_24+0xd8>
    1376:	38 f1       	brcs	.+78     	; 0x13c6 <__vector_24+0x6e>
    1378:	88 34       	cpi	r24, 0x48	; 72
    137a:	a1 f1       	breq	.+104    	; 0x13e4 <__vector_24+0x8c>
    137c:	a0 f0       	brcs	.+40     	; 0x13a6 <__vector_24+0x4e>
    137e:	88 35       	cpi	r24, 0x58	; 88
    1380:	61 f1       	breq	.+88     	; 0x13da <__vector_24+0x82>
    1382:	88 3f       	cpi	r24, 0xF8	; 248
    1384:	09 f4       	brne	.+2      	; 0x1388 <__vector_24+0x30>
    1386:	58 c0       	rjmp	.+176    	; 0x1438 <__vector_24+0xe0>
    1388:	80 35       	cpi	r24, 0x50	; 80
    138a:	79 f5       	brne	.+94     	; 0x13ea <__vector_24+0x92>
			I2C_Start();
			
			break;
		}

        case MR_DATA_ACK:   I2C_ReceiveBuffer[bufferPointer++] = TWDR0;
    138c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <bufferPointer.2739>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	8e 0f       	add	r24, r30
    1394:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <bufferPointer.2739>
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    139e:	e4 53       	subi	r30, 0x34	; 52
    13a0:	fe 4f       	sbci	r31, 0xFE	; 254
    13a2:	90 83       	st	Z, r25
    13a4:	07 c0       	rjmp	.+14     	; 0x13b4 <__vector_24+0x5c>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    13a6:	88 33       	cpi	r24, 0x38	; 56
    13a8:	09 f4       	brne	.+2      	; 0x13ac <__vector_24+0x54>
    13aa:	42 c0       	rjmp	.+132    	; 0x1430 <__vector_24+0xd8>
    13ac:	80 34       	cpi	r24, 0x40	; 64
    13ae:	e9 f4       	brne	.+58     	; 0x13ea <__vector_24+0x92>
    13b0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <bufferPointer.2739>
		}

        case MR_DATA_ACK:   I2C_ReceiveBuffer[bufferPointer++] = TWDR0;
        case MR_SLA_ACK:
        {
            if (bufferPointer < I2C_MessageSize)
    13b4:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <I2C_MessageSize>
    13b8:	89 17       	cp	r24, r25
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__vector_24+0x66>
    13bc:	41 c0       	rjmp	.+130    	; 0x1440 <__vector_24+0xe8>
            {
                TWCR0 =	(1 << TWEN) |															// 
    13be:	85 ec       	ldi	r24, 0xC5	; 197
    13c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <__vector_24+0x92>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    13c6:	80 31       	cpi	r24, 0x10	; 16
    13c8:	09 f4       	brne	.+2      	; 0x13cc <__vector_24+0x74>
    13ca:	40 c0       	rjmp	.+128    	; 0x144c <__vector_24+0xf4>
    13cc:	b8 f4       	brcc	.+46     	; 0x13fc <__vector_24+0xa4>
    13ce:	81 11       	cpse	r24, r1
    13d0:	3b c0       	rjmp	.+118    	; 0x1448 <__vector_24+0xf0>
			(0 << TWWC);															//	Clear Write Collision flag
}

void I2C_Stop (void)
{
	TWCR0 =	(1 << TWEN) |															// 
    13d2:	85 e9       	ldi	r24, 0x95	; 149
    13d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <__vector_24+0x92>
		
		case MR_DATA_NACK:
		{
			//  Send stop/start or stop followed by a start
			//I2C_ReceiveBuffer[bufferPointer++] = TWDR0;	//???????????????????
			I2C_StatusFlags.transfer = 1;
    13da:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <I2C_StatusFlags>
    13de:	81 60       	ori	r24, 0x01	; 1
    13e0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <I2C_StatusFlags>
			TWCR0 =  (1 << TWEN) |													// Enable TWI-interface and release TWI pins.
    13e4:	84 e9       	ldi	r24, 0x94	; 148
    13e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		}

		default:    break;
	}
}
    13ea:	ff 91       	pop	r31
    13ec:	ef 91       	pop	r30
    13ee:	9f 91       	pop	r25
    13f0:	8f 91       	pop	r24
    13f2:	0f 90       	pop	r0
    13f4:	0f be       	out	0x3f, r0	; 63
    13f6:	0f 90       	pop	r0
    13f8:	1f 90       	pop	r1
    13fa:	18 95       	reti

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    13fc:	80 32       	cpi	r24, 0x20	; 32
    13fe:	c1 f0       	breq	.+48     	; 0x1430 <__vector_24+0xd8>
    1400:	88 32       	cpi	r24, 0x28	; 40
    1402:	11 f0       	breq	.+4      	; 0x1408 <__vector_24+0xb0>
    1404:	88 31       	cpi	r24, 0x18	; 24
    1406:	89 f7       	brne	.-30     	; 0x13ea <__vector_24+0x92>
    1408:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <bufferPointer.2739>
		case I2C_START:
		case I2C_REPEATED_START:	bufferPointer = 0;									//	
		case MT_SLA_ACK:
		case MT_DATA_ACK:
		{
			if (bufferPointer < I2C_MessageSize)
    140c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <I2C_MessageSize>
    1410:	e8 17       	cp	r30, r24
    1412:	18 f7       	brcc	.-58     	; 0x13da <__vector_24+0x82>
			{
				TWDR0 = I2C_TransmitBuffer[bufferPointer++];
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8e 0f       	add	r24, r30
    1418:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <bufferPointer.2739>
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	e4 52       	subi	r30, 0x24	; 36
    1420:	fe 4f       	sbci	r31, 0xFE	; 254
    1422:	80 81       	ld	r24, Z
    1424:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
				TWCR0 =	(1 << TWEN) |												// 
    1428:	85 e8       	ldi	r24, 0x85	; 133
    142a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    142e:	dd cf       	rjmp	.-70     	; 0x13ea <__vector_24+0x92>
			(1 << TWWC);															//	Clear Write Collision flag
}

void I2C_Start (void)
{
	TWCR0 =	(1 << TWEN) |															//	Enable I2C
    1430:	85 ea       	ldi	r24, 0xA5	; 165
    1432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1436:	d9 cf       	rjmp	.-78     	; 0x13ea <__vector_24+0x92>
			break;
		}

		case I2C_NO_RELEVANT_STATE_INFORMATION:
		{
			TWCR0 =	(1 << TWEN) |															//
    1438:	84 e0       	ldi	r24, 0x04	; 4
    143a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
		}

		default:    break;
	}
}
    143e:	d5 cf       	rjmp	.-86     	; 0x13ea <__vector_24+0x92>
			            (1 << TWEA) | (0 << TWSTA) | (0 << TWSTO) |								// 
			            (0 << TWWC);															//	Clear Write Collision flag
            }
            else
            {
                TWCR0 =	(1 << TWEN) |															// 
    1440:	85 e8       	ldi	r24, 0x85	; 133
    1442:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1446:	d1 cf       	rjmp	.-94     	; 0x13ea <__vector_24+0x92>

ISR (TWI0_vect)
{
	static uint8_t bufferPointer;
	
	switch(TWSR0 & I2C_STATUS_MASK)
    1448:	88 30       	cpi	r24, 0x08	; 8
    144a:	79 f6       	brne	.-98     	; 0x13ea <__vector_24+0x92>
	{
		case I2C_START:
		case I2C_REPEATED_START:	bufferPointer = 0;									//	
    144c:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <bufferPointer.2739>
    1450:	e0 e0       	ldi	r30, 0x00	; 0
    1452:	dc cf       	rjmp	.-72     	; 0x140c <__vector_24+0xb4>

00001454 <LCD_Nokia_PutPixel.part.0>:
			nokiaDisplayPixels.x = 0;
			nokiaDisplayPixels.y += 8;
			if (nokiaDisplayPixels.y >= 48)	nokiaDisplayPixels.y = 0;	//	????????
		}
	}
}
    1454:	96 2f       	mov	r25, r22
    1456:	96 95       	lsr	r25
    1458:	96 95       	lsr	r25
    145a:	96 95       	lsr	r25
    145c:	e8 2f       	mov	r30, r24
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	84 e5       	ldi	r24, 0x54	; 84
    1462:	98 9f       	mul	r25, r24
    1464:	e0 0d       	add	r30, r0
    1466:	f1 1d       	adc	r31, r1
    1468:	11 24       	eor	r1, r1
    146a:	e1 51       	subi	r30, 0x11	; 17
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	67 70       	andi	r22, 0x07	; 7
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <LCD_Nokia_PutPixel.part.0+0x24>
    1476:	88 0f       	add	r24, r24
    1478:	6a 95       	dec	r22
    147a:	ea f7       	brpl	.-6      	; 0x1476 <LCD_Nokia_PutPixel.part.0+0x22>
    147c:	92 81       	ldd	r25, Z+2	; 0x02
    147e:	89 2b       	or	r24, r25
    1480:	82 83       	std	Z+2, r24	; 0x02
    1482:	08 95       	ret

00001484 <LCD_Nokia_PutByte>:
    1484:	61 11       	cpse	r22, r1
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <LCD_Nokia_PutByte+0x10>
    1488:	28 98       	cbi	0x05, 0	; 5
    148a:	2a 98       	cbi	0x05, 2	; 5
    148c:	0e 94 98 14 	call	0x2930	; 0x2930 <SPI_PutByte>
    1490:	2a 9a       	sbi	0x05, 2	; 5
    1492:	08 95       	ret
    1494:	28 9a       	sbi	0x05, 0	; 5
    1496:	2a 98       	cbi	0x05, 2	; 5
    1498:	0e 94 98 14 	call	0x2930	; 0x2930 <SPI_PutByte>
    149c:	2a 9a       	sbi	0x05, 2	; 5
    149e:	08 95       	ret

000014a0 <LCD_Nokia_ClearBuffer>:
    14a0:	88 ef       	ldi	r24, 0xF8	; 248
    14a2:	91 e0       	ldi	r25, 0x01	; 1
    14a4:	e1 ef       	ldi	r30, 0xF1	; 241
    14a6:	f1 e0       	ldi	r31, 0x01	; 1
    14a8:	df 01       	movw	r26, r30
    14aa:	9c 01       	movw	r18, r24
    14ac:	1d 92       	st	X+, r1
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	30 40       	sbci	r19, 0x00	; 0
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <LCD_Nokia_ClearBuffer+0xc>
    14b4:	08 95       	ret

000014b6 <LCD_Nokia_Init>:
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	84 b1       	in	r24, 0x04	; 4
    14bc:	83 60       	ori	r24, 0x03	; 3
    14be:	84 b9       	out	0x04, r24	; 4
    14c0:	56 9a       	sbi	0x0a, 6	; 10
    14c2:	29 9a       	sbi	0x05, 1	; 5
    14c4:	2a 9a       	sbi	0x05, 2	; 5
    14c6:	29 98       	cbi	0x05, 1	; 5
    14c8:	83 ec       	ldi	r24, 0xC3	; 195
    14ca:	99 e0       	ldi	r25, 0x09	; 9
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <LCD_Nokia_Init+0x16>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <LCD_Nokia_Init+0x1c>
    14d2:	00 00       	nop
    14d4:	29 9a       	sbi	0x05, 1	; 5
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	81 e2       	ldi	r24, 0x21	; 33
    14da:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	80 e9       	ldi	r24, 0x90	; 144
    14e2:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	87 e0       	ldi	r24, 0x07	; 7
    14ea:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    14ee:	60 e0       	ldi	r22, 0x00	; 0
    14f0:	81 e1       	ldi	r24, 0x11	; 17
    14f2:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	80 e2       	ldi	r24, 0x20	; 32
    14fa:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	8c e0       	ldi	r24, 0x0C	; 12
    1502:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    1506:	c8 ef       	ldi	r28, 0xF8	; 248
    1508:	d1 e0       	ldi	r29, 0x01	; 1
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    1512:	21 97       	sbiw	r28, 0x01	; 1
    1514:	d1 f7       	brne	.-12     	; 0x150a <LCD_Nokia_Init+0x54>
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <LCD_Nokia_SetPosition>:
    151c:	cf 93       	push	r28
    151e:	c6 2f       	mov	r28, r22
    1520:	2a 98       	cbi	0x05, 2	; 5
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	80 68       	ori	r24, 0x80	; 128
    1526:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	8c 2f       	mov	r24, r28
    152e:	80 64       	ori	r24, 0x40	; 64
    1530:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    1534:	2a 9a       	sbi	0x05, 2	; 5
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <LCD_Nokia_SetPixelPosition>:
    153a:	ef ee       	ldi	r30, 0xEF	; 239
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	80 83       	st	Z, r24
    1540:	61 83       	std	Z+1, r22	; 0x01
    1542:	08 95       	ret

00001544 <LCD_Nokia_PutSmallChar>:
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	28 2f       	mov	r18, r24
    1554:	65 30       	cpi	r22, 0x05	; 5
    1556:	09 f4       	brne	.+2      	; 0x155a <LCD_Nokia_PutSmallChar+0x16>
    1558:	81 c0       	rjmp	.+258    	; 0x165c <LCD_Nokia_PutSmallChar+0x118>
    155a:	66 30       	cpi	r22, 0x06	; 6
    155c:	09 f0       	breq	.+2      	; 0x1560 <LCD_Nokia_PutSmallChar+0x1c>
    155e:	68 c0       	rjmp	.+208    	; 0x1630 <LCD_Nokia_PutSmallChar+0xec>
    1560:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1564:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1568:	02 2e       	mov	r0, r18
    156a:	00 0c       	add	r0, r0
    156c:	33 0b       	sbc	r19, r19
    156e:	20 52       	subi	r18, 0x20	; 32
    1570:	31 09       	sbc	r19, r1
    1572:	e9 01       	movw	r28, r18
    1574:	cc 0f       	add	r28, r28
    1576:	dd 1f       	adc	r29, r29
    1578:	c2 0f       	add	r28, r18
    157a:	d3 1f       	adc	r29, r19
    157c:	cc 0f       	add	r28, r28
    157e:	dd 1f       	adc	r29, r29
    1580:	ca 5f       	subi	r28, 0xFA	; 250
    1582:	dc 4f       	sbci	r29, 0xFC	; 252
    1584:	36 e0       	ldi	r19, 0x06	; 6
    1586:	d3 2e       	mov	r13, r19
    1588:	01 e0       	ldi	r16, 0x01	; 1
    158a:	10 e0       	ldi	r17, 0x00	; 0
    158c:	fe 01       	movw	r30, r28
    158e:	24 91       	lpm	r18, Z
    1590:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <byte.2747>
    1594:	e1 2c       	mov	r14, r1
    1596:	f1 2c       	mov	r15, r1
    1598:	26 c0       	rjmp	.+76     	; 0x15e6 <LCD_Nokia_PutSmallChar+0xa2>
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	46 0f       	add	r20, r22
    159e:	40 93 f0 01 	sts	0x01F0, r20	; 0x8001f0 <nokiaDisplayPixels+0x1>
    15a2:	96 2f       	mov	r25, r22
    15a4:	96 95       	lsr	r25
    15a6:	96 95       	lsr	r25
    15a8:	96 95       	lsr	r25
    15aa:	e8 2f       	mov	r30, r24
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	24 e5       	ldi	r18, 0x54	; 84
    15b0:	92 9f       	mul	r25, r18
    15b2:	e0 0d       	add	r30, r0
    15b4:	f1 1d       	adc	r31, r1
    15b6:	11 24       	eor	r1, r1
    15b8:	e1 51       	subi	r30, 0x11	; 17
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	67 70       	andi	r22, 0x07	; 7
    15be:	98 01       	movw	r18, r16
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <LCD_Nokia_PutSmallChar+0x80>
    15c2:	22 0f       	add	r18, r18
    15c4:	6a 95       	dec	r22
    15c6:	ea f7       	brpl	.-6      	; 0x15c2 <LCD_Nokia_PutSmallChar+0x7e>
    15c8:	92 2f       	mov	r25, r18
    15ca:	90 95       	com	r25
    15cc:	22 81       	ldd	r18, Z+2	; 0x02
    15ce:	92 23       	and	r25, r18
    15d0:	92 83       	std	Z+2, r25	; 0x02
    15d2:	64 2f       	mov	r22, r20
    15d4:	9f ef       	ldi	r25, 0xFF	; 255
    15d6:	e9 1a       	sub	r14, r25
    15d8:	f9 0a       	sbc	r15, r25
    15da:	e8 e0       	ldi	r30, 0x08	; 8
    15dc:	ee 16       	cp	r14, r30
    15de:	f1 04       	cpc	r15, r1
    15e0:	e1 f0       	breq	.+56     	; 0x161a <LCD_Nokia_PutSmallChar+0xd6>
    15e2:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <byte.2747>
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	0e 2c       	mov	r0, r14
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <LCD_Nokia_PutSmallChar+0xac>
    15ec:	35 95       	asr	r19
    15ee:	27 95       	ror	r18
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <LCD_Nokia_PutSmallChar+0xa8>
    15f4:	20 ff       	sbrs	r18, 0
    15f6:	d1 cf       	rjmp	.-94     	; 0x159a <LCD_Nokia_PutSmallChar+0x56>
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	96 0f       	add	r25, r22
    15fc:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1600:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1604:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1608:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    160c:	9f ef       	ldi	r25, 0xFF	; 255
    160e:	e9 1a       	sub	r14, r25
    1610:	f9 0a       	sbc	r15, r25
    1612:	e8 e0       	ldi	r30, 0x08	; 8
    1614:	ee 16       	cp	r14, r30
    1616:	f1 04       	cpc	r15, r1
    1618:	21 f7       	brne	.-56     	; 0x15e2 <LCD_Nokia_PutSmallChar+0x9e>
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <nokiaDisplayPixels>
    1620:	68 50       	subi	r22, 0x08	; 8
    1622:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1626:	da 94       	dec	r13
    1628:	21 96       	adiw	r28, 0x01	; 1
    162a:	d1 10       	cpse	r13, r1
    162c:	af cf       	rjmp	.-162    	; 0x158c <LCD_Nokia_PutSmallChar+0x48>
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <LCD_Nokia_PutSmallChar+0xf0>
    1630:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1634:	80 35       	cpi	r24, 0x50	; 80
    1636:	50 f0       	brcs	.+20     	; 0x164c <LCD_Nokia_PutSmallChar+0x108>
    1638:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <nokiaDisplayPixels>
    163c:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1640:	88 5f       	subi	r24, 0xF8	; 248
    1642:	80 33       	cpi	r24, 0x30	; 48
    1644:	08 f4       	brcc	.+2      	; 0x1648 <LCD_Nokia_PutSmallChar+0x104>
    1646:	72 c0       	rjmp	.+228    	; 0x172c <LCD_Nokia_PutSmallChar+0x1e8>
    1648:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <nokiaDisplayPixels+0x1>
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	ff 90       	pop	r15
    1656:	ef 90       	pop	r14
    1658:	df 90       	pop	r13
    165a:	08 95       	ret
    165c:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1660:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1664:	02 2e       	mov	r0, r18
    1666:	00 0c       	add	r0, r0
    1668:	33 0b       	sbc	r19, r19
    166a:	20 52       	subi	r18, 0x20	; 32
    166c:	31 09       	sbc	r19, r1
    166e:	e9 01       	movw	r28, r18
    1670:	cc 0f       	add	r28, r28
    1672:	dd 1f       	adc	r29, r29
    1674:	cc 0f       	add	r28, r28
    1676:	dd 1f       	adc	r29, r29
    1678:	c2 0f       	add	r28, r18
    167a:	d3 1f       	adc	r29, r19
    167c:	c0 5c       	subi	r28, 0xC0	; 192
    167e:	da 4f       	sbci	r29, 0xFA	; 250
    1680:	55 e0       	ldi	r21, 0x05	; 5
    1682:	d5 2e       	mov	r13, r21
    1684:	01 e0       	ldi	r16, 0x01	; 1
    1686:	10 e0       	ldi	r17, 0x00	; 0
    1688:	fe 01       	movw	r30, r28
    168a:	24 91       	lpm	r18, Z
    168c:	20 93 ee 01 	sts	0x01EE, r18	; 0x8001ee <byte.2747>
    1690:	e1 2c       	mov	r14, r1
    1692:	f1 2c       	mov	r15, r1
    1694:	26 c0       	rjmp	.+76     	; 0x16e2 <LCD_Nokia_PutSmallChar+0x19e>
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	46 0f       	add	r20, r22
    169a:	40 93 f0 01 	sts	0x01F0, r20	; 0x8001f0 <nokiaDisplayPixels+0x1>
    169e:	96 2f       	mov	r25, r22
    16a0:	96 95       	lsr	r25
    16a2:	96 95       	lsr	r25
    16a4:	96 95       	lsr	r25
    16a6:	e8 2f       	mov	r30, r24
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	24 e5       	ldi	r18, 0x54	; 84
    16ac:	92 9f       	mul	r25, r18
    16ae:	e0 0d       	add	r30, r0
    16b0:	f1 1d       	adc	r31, r1
    16b2:	11 24       	eor	r1, r1
    16b4:	e1 51       	subi	r30, 0x11	; 17
    16b6:	fe 4f       	sbci	r31, 0xFE	; 254
    16b8:	67 70       	andi	r22, 0x07	; 7
    16ba:	98 01       	movw	r18, r16
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <LCD_Nokia_PutSmallChar+0x17c>
    16be:	22 0f       	add	r18, r18
    16c0:	6a 95       	dec	r22
    16c2:	ea f7       	brpl	.-6      	; 0x16be <LCD_Nokia_PutSmallChar+0x17a>
    16c4:	92 2f       	mov	r25, r18
    16c6:	90 95       	com	r25
    16c8:	22 81       	ldd	r18, Z+2	; 0x02
    16ca:	92 23       	and	r25, r18
    16cc:	92 83       	std	Z+2, r25	; 0x02
    16ce:	64 2f       	mov	r22, r20
    16d0:	9f ef       	ldi	r25, 0xFF	; 255
    16d2:	e9 1a       	sub	r14, r25
    16d4:	f9 0a       	sbc	r15, r25
    16d6:	e8 e0       	ldi	r30, 0x08	; 8
    16d8:	ee 16       	cp	r14, r30
    16da:	f1 04       	cpc	r15, r1
    16dc:	e1 f0       	breq	.+56     	; 0x1716 <LCD_Nokia_PutSmallChar+0x1d2>
    16de:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <byte.2747>
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	0e 2c       	mov	r0, r14
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <LCD_Nokia_PutSmallChar+0x1a8>
    16e8:	35 95       	asr	r19
    16ea:	27 95       	ror	r18
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <LCD_Nokia_PutSmallChar+0x1a4>
    16f0:	20 ff       	sbrs	r18, 0
    16f2:	d1 cf       	rjmp	.-94     	; 0x1696 <LCD_Nokia_PutSmallChar+0x152>
    16f4:	91 e0       	ldi	r25, 0x01	; 1
    16f6:	96 0f       	add	r25, r22
    16f8:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <nokiaDisplayPixels+0x1>
    16fc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1700:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1704:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	e9 1a       	sub	r14, r25
    170c:	f9 0a       	sbc	r15, r25
    170e:	e8 e0       	ldi	r30, 0x08	; 8
    1710:	ee 16       	cp	r14, r30
    1712:	f1 04       	cpc	r15, r1
    1714:	21 f7       	brne	.-56     	; 0x16de <LCD_Nokia_PutSmallChar+0x19a>
    1716:	8f 5f       	subi	r24, 0xFF	; 255
    1718:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <nokiaDisplayPixels>
    171c:	68 50       	subi	r22, 0x08	; 8
    171e:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1722:	da 94       	dec	r13
    1724:	21 96       	adiw	r28, 0x01	; 1
    1726:	d1 10       	cpse	r13, r1
    1728:	af cf       	rjmp	.-162    	; 0x1688 <LCD_Nokia_PutSmallChar+0x144>
    172a:	84 cf       	rjmp	.-248    	; 0x1634 <LCD_Nokia_PutSmallChar+0xf0>
    172c:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	ff 90       	pop	r15
    173a:	ef 90       	pop	r14
    173c:	df 90       	pop	r13
    173e:	08 95       	ret

00001740 <LCD_Nokia_Put5Char>:
    1740:	65 e0       	ldi	r22, 0x05	; 5
    1742:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>

00001746 <LCD_Nokia_Put6Char>:
    1746:	66 e0       	ldi	r22, 0x06	; 6
    1748:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>

0000174c <LCD_Nokia_Send5CharString_P>:
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	ec 01       	movw	r28, r24
    1752:	fc 01       	movw	r30, r24
    1754:	84 91       	lpm	r24, Z
    1756:	88 23       	and	r24, r24
    1758:	51 f0       	breq	.+20     	; 0x176e <LCD_Nokia_Send5CharString_P+0x22>
    175a:	fe 01       	movw	r30, r28
    175c:	21 96       	adiw	r28, 0x01	; 1
    175e:	84 91       	lpm	r24, Z
    1760:	65 e0       	ldi	r22, 0x05	; 5
    1762:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1766:	fe 01       	movw	r30, r28
    1768:	84 91       	lpm	r24, Z
    176a:	81 11       	cpse	r24, r1
    176c:	f6 cf       	rjmp	.-20     	; 0x175a <LCD_Nokia_Send5CharString_P+0xe>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <LCD_Nokia_Send6CharString>:
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ec 01       	movw	r28, r24
    177a:	88 81       	ld	r24, Y
    177c:	88 23       	and	r24, r24
    177e:	39 f0       	breq	.+14     	; 0x178e <LCD_Nokia_Send6CharString+0x1a>
    1780:	21 96       	adiw	r28, 0x01	; 1
    1782:	66 e0       	ldi	r22, 0x06	; 6
    1784:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1788:	89 91       	ld	r24, Y+
    178a:	81 11       	cpse	r24, r1
    178c:	fa cf       	rjmp	.-12     	; 0x1782 <LCD_Nokia_Send6CharString+0xe>
    178e:	df 91       	pop	r29
    1790:	cf 91       	pop	r28
    1792:	08 95       	ret

00001794 <LCD_Nokia_Send6CharString_P>:
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	fc 01       	movw	r30, r24
    179c:	84 91       	lpm	r24, Z
    179e:	88 23       	and	r24, r24
    17a0:	51 f0       	breq	.+20     	; 0x17b6 <LCD_Nokia_Send6CharString_P+0x22>
    17a2:	fe 01       	movw	r30, r28
    17a4:	21 96       	adiw	r28, 0x01	; 1
    17a6:	84 91       	lpm	r24, Z
    17a8:	66 e0       	ldi	r22, 0x06	; 6
    17aa:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    17ae:	fe 01       	movw	r30, r28
    17b0:	84 91       	lpm	r24, Z
    17b2:	81 11       	cpse	r24, r1
    17b4:	f6 cf       	rjmp	.-20     	; 0x17a2 <LCD_Nokia_Send6CharString_P+0xe>
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <LCD_Nokia_Put12Char>:
    17bc:	bf 92       	push	r11
    17be:	cf 92       	push	r12
    17c0:	df 92       	push	r13
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    17d2:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    17d6:	48 e1       	ldi	r20, 0x18	; 24
    17d8:	84 02       	muls	r24, r20
    17da:	90 01       	movw	r18, r0
    17dc:	11 24       	eor	r1, r1
    17de:	f9 01       	movw	r30, r18
    17e0:	e6 57       	subi	r30, 0x76	; 118
    17e2:	f2 40       	sbci	r31, 0x02	; 2
    17e4:	6f 01       	movw	r12, r30
    17e6:	82 e0       	ldi	r24, 0x02	; 2
    17e8:	b8 2e       	mov	r11, r24
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	76 01       	movw	r14, r12
    17f0:	8c e0       	ldi	r24, 0x0C	; 12
    17f2:	e8 1a       	sub	r14, r24
    17f4:	f1 08       	sbc	r15, r1
    17f6:	39 2f       	mov	r19, r25
    17f8:	96 2f       	mov	r25, r22
    17fa:	f7 01       	movw	r30, r14
    17fc:	24 91       	lpm	r18, Z
    17fe:	20 93 ed 01 	sts	0x01ED, r18	; 0x8001ed <byte.2857>
    1802:	83 2f       	mov	r24, r19
    1804:	69 2f       	mov	r22, r25
    1806:	c0 e0       	ldi	r28, 0x00	; 0
    1808:	d0 e0       	ldi	r29, 0x00	; 0
    180a:	23 c0       	rjmp	.+70     	; 0x1852 <LCD_Nokia_Put12Char+0x96>
    180c:	41 e0       	ldi	r20, 0x01	; 1
    180e:	46 0f       	add	r20, r22
    1810:	40 93 f0 01 	sts	0x01F0, r20	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1814:	96 2f       	mov	r25, r22
    1816:	96 95       	lsr	r25
    1818:	96 95       	lsr	r25
    181a:	96 95       	lsr	r25
    181c:	e8 2f       	mov	r30, r24
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	24 e5       	ldi	r18, 0x54	; 84
    1822:	92 9f       	mul	r25, r18
    1824:	e0 0d       	add	r30, r0
    1826:	f1 1d       	adc	r31, r1
    1828:	11 24       	eor	r1, r1
    182a:	e1 51       	subi	r30, 0x11	; 17
    182c:	fe 4f       	sbci	r31, 0xFE	; 254
    182e:	67 70       	andi	r22, 0x07	; 7
    1830:	98 01       	movw	r18, r16
    1832:	01 c0       	rjmp	.+2      	; 0x1836 <LCD_Nokia_Put12Char+0x7a>
    1834:	22 0f       	add	r18, r18
    1836:	6a 95       	dec	r22
    1838:	ea f7       	brpl	.-6      	; 0x1834 <LCD_Nokia_Put12Char+0x78>
    183a:	92 2f       	mov	r25, r18
    183c:	90 95       	com	r25
    183e:	22 81       	ldd	r18, Z+2	; 0x02
    1840:	92 23       	and	r25, r18
    1842:	92 83       	std	Z+2, r25	; 0x02
    1844:	64 2f       	mov	r22, r20
    1846:	21 96       	adiw	r28, 0x01	; 1
    1848:	c8 30       	cpi	r28, 0x08	; 8
    184a:	d1 05       	cpc	r29, r1
    184c:	c9 f0       	breq	.+50     	; 0x1880 <LCD_Nokia_Put12Char+0xc4>
    184e:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <byte.2857>
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	0c 2e       	mov	r0, r28
    1856:	02 c0       	rjmp	.+4      	; 0x185c <LCD_Nokia_Put12Char+0xa0>
    1858:	35 95       	asr	r19
    185a:	27 95       	ror	r18
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <LCD_Nokia_Put12Char+0x9c>
    1860:	20 ff       	sbrs	r18, 0
    1862:	d4 cf       	rjmp	.-88     	; 0x180c <LCD_Nokia_Put12Char+0x50>
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	96 0f       	add	r25, r22
    1868:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <nokiaDisplayPixels+0x1>
    186c:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1870:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <nokiaDisplayPixels>
    1874:	60 91 f0 01 	lds	r22, 0x01F0	; 0x8001f0 <nokiaDisplayPixels+0x1>
    1878:	21 96       	adiw	r28, 0x01	; 1
    187a:	c8 30       	cpi	r28, 0x08	; 8
    187c:	d1 05       	cpc	r29, r1
    187e:	39 f7       	brne	.-50     	; 0x184e <LCD_Nokia_Put12Char+0x92>
    1880:	31 e0       	ldi	r19, 0x01	; 1
    1882:	38 0f       	add	r19, r24
    1884:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <nokiaDisplayPixels>
    1888:	98 ef       	ldi	r25, 0xF8	; 248
    188a:	96 0f       	add	r25, r22
    188c:	4f ef       	ldi	r20, 0xFF	; 255
    188e:	e4 1a       	sub	r14, r20
    1890:	f4 0a       	sbc	r15, r20
    1892:	ec 14       	cp	r14, r12
    1894:	fd 04       	cpc	r15, r13
    1896:	09 f0       	breq	.+2      	; 0x189a <LCD_Nokia_Put12Char+0xde>
    1898:	b0 cf       	rjmp	.-160    	; 0x17fa <LCD_Nokia_Put12Char+0x3e>
    189a:	95 ef       	ldi	r25, 0xF5	; 245
    189c:	98 0f       	add	r25, r24
    189e:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <nokiaDisplayPixels>
    18a2:	ba 94       	dec	r11
    18a4:	67 01       	movw	r12, r14
    18a6:	5c e0       	ldi	r21, 0x0C	; 12
    18a8:	c5 0e       	add	r12, r21
    18aa:	d1 1c       	adc	r13, r1
    18ac:	b1 10       	cpse	r11, r1
    18ae:	9f cf       	rjmp	.-194    	; 0x17ee <LCD_Nokia_Put12Char+0x32>
    18b0:	30 93 ef 01 	sts	0x01EF, r19	; 0x8001ef <nokiaDisplayPixels>
    18b4:	80 ef       	ldi	r24, 0xF0	; 240
    18b6:	86 0f       	add	r24, r22
    18b8:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <nokiaDisplayPixels+0x1>
    18bc:	33 35       	cpi	r19, 0x53	; 83
    18be:	30 f0       	brcs	.+12     	; 0x18cc <LCD_Nokia_Put12Char+0x110>
    18c0:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <nokiaDisplayPixels>
    18c4:	6f 32       	cpi	r22, 0x2F	; 47
    18c6:	60 f0       	brcs	.+24     	; 0x18e0 <LCD_Nokia_Put12Char+0x124>
    18c8:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <nokiaDisplayPixels+0x1>
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	08 95       	ret
    18e0:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <nokiaDisplayPixels+0x1>
    18e4:	f3 cf       	rjmp	.-26     	; 0x18cc <LCD_Nokia_Put12Char+0x110>

000018e6 <LCD_Nokia_Send12CharString_P>:
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	ec 01       	movw	r28, r24
    18ec:	fc 01       	movw	r30, r24
    18ee:	84 91       	lpm	r24, Z
    18f0:	88 23       	and	r24, r24
    18f2:	49 f0       	breq	.+18     	; 0x1906 <LCD_Nokia_Send12CharString_P+0x20>
    18f4:	fe 01       	movw	r30, r28
    18f6:	21 96       	adiw	r28, 0x01	; 1
    18f8:	84 91       	lpm	r24, Z
    18fa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    18fe:	fe 01       	movw	r30, r28
    1900:	84 91       	lpm	r24, Z
    1902:	81 11       	cpse	r24, r1
    1904:	f7 cf       	rjmp	.-18     	; 0x18f4 <LCD_Nokia_Send12CharString_P+0xe>
    1906:	df 91       	pop	r29
    1908:	cf 91       	pop	r28
    190a:	08 95       	ret

0000190c <LCD_Nokia_SendInteger>:
    190c:	cf 92       	push	r12
    190e:	df 92       	push	r13
    1910:	ef 92       	push	r14
    1912:	ff 92       	push	r15
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	6b 01       	movw	r12, r22
    191a:	7c 01       	movw	r14, r24
    191c:	46 30       	cpi	r20, 0x06	; 6
    191e:	09 f4       	brne	.+2      	; 0x1922 <LCD_Nokia_SendInteger+0x16>
    1920:	b1 c0       	rjmp	.+354    	; 0x1a84 <LCD_Nokia_SendInteger+0x178>
    1922:	4c 30       	cpi	r20, 0x0C	; 12
    1924:	09 f4       	brne	.+2      	; 0x1928 <LCD_Nokia_SendInteger+0x1c>
    1926:	55 c0       	rjmp	.+170    	; 0x19d2 <LCD_Nokia_SendInteger+0xc6>
    1928:	45 30       	cpi	r20, 0x05	; 5
    192a:	39 f0       	breq	.+14     	; 0x193a <LCD_Nokia_SendInteger+0x2e>
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	ff 90       	pop	r15
    1932:	ef 90       	pop	r14
    1934:	df 90       	pop	r13
    1936:	cf 90       	pop	r12
    1938:	08 95       	ret
    193a:	97 fd       	sbrc	r25, 7
    193c:	db c1       	rjmp	.+950    	; 0x1cf4 <LCD_Nokia_SendInteger+0x3e8>
    193e:	d7 01       	movw	r26, r14
    1940:	c6 01       	movw	r24, r12
    1942:	0a 97       	sbiw	r24, 0x0a	; 10
    1944:	a1 09       	sbc	r26, r1
    1946:	b1 09       	sbc	r27, r1
    1948:	8a 35       	cpi	r24, 0x5A	; 90
    194a:	91 05       	cpc	r25, r1
    194c:	a1 05       	cpc	r26, r1
    194e:	b1 05       	cpc	r27, r1
    1950:	08 f4       	brcc	.+2      	; 0x1954 <LCD_Nokia_SendInteger+0x48>
    1952:	e8 c0       	rjmp	.+464    	; 0x1b24 <LCD_Nokia_SendInteger+0x218>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	9a e0       	ldi	r25, 0x0A	; 10
    1958:	c9 16       	cp	r12, r25
    195a:	d1 04       	cpc	r13, r1
    195c:	e1 04       	cpc	r14, r1
    195e:	f1 04       	cpc	r15, r1
    1960:	0c f0       	brlt	.+2      	; 0x1964 <LCD_Nokia_SendInteger+0x58>
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	b7 01       	movw	r22, r14
    1966:	a6 01       	movw	r20, r12
    1968:	44 56       	subi	r20, 0x64	; 100
    196a:	51 09       	sbc	r21, r1
    196c:	61 09       	sbc	r22, r1
    196e:	71 09       	sbc	r23, r1
    1970:	44 38       	cpi	r20, 0x84	; 132
    1972:	53 40       	sbci	r21, 0x03	; 3
    1974:	61 05       	cpc	r22, r1
    1976:	71 05       	cpc	r23, r1
    1978:	08 f4       	brcc	.+2      	; 0x197c <LCD_Nokia_SendInteger+0x70>
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	b7 01       	movw	r22, r14
    197e:	a6 01       	movw	r20, r12
    1980:	48 5e       	subi	r20, 0xE8	; 232
    1982:	53 40       	sbci	r21, 0x03	; 3
    1984:	61 09       	sbc	r22, r1
    1986:	71 09       	sbc	r23, r1
    1988:	48 32       	cpi	r20, 0x28	; 40
    198a:	53 42       	sbci	r21, 0x23	; 35
    198c:	61 05       	cpc	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	08 f4       	brcc	.+2      	; 0x1994 <LCD_Nokia_SendInteger+0x88>
    1992:	6e c1       	rjmp	.+732    	; 0x1c70 <LCD_Nokia_SendInteger+0x364>
    1994:	b7 01       	movw	r22, r14
    1996:	a6 01       	movw	r20, r12
    1998:	40 51       	subi	r20, 0x10	; 16
    199a:	57 42       	sbci	r21, 0x27	; 39
    199c:	61 09       	sbc	r22, r1
    199e:	71 09       	sbc	r23, r1
    19a0:	40 39       	cpi	r20, 0x90	; 144
    19a2:	5f 45       	sbci	r21, 0x5F	; 95
    19a4:	61 40       	sbci	r22, 0x01	; 1
    19a6:	71 05       	cpc	r23, r1
    19a8:	08 f4       	brcc	.+2      	; 0x19ac <LCD_Nokia_SendInteger+0xa0>
    19aa:	53 c1       	rjmp	.+678    	; 0x1c52 <LCD_Nokia_SendInteger+0x346>
    19ac:	82 30       	cpi	r24, 0x02	; 2
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <LCD_Nokia_SendInteger+0xa6>
    19b0:	7d c1       	rjmp	.+762    	; 0x1cac <LCD_Nokia_SendInteger+0x3a0>
    19b2:	83 30       	cpi	r24, 0x03	; 3
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <LCD_Nokia_SendInteger+0xac>
    19b6:	6b c1       	rjmp	.+726    	; 0x1c8e <LCD_Nokia_SendInteger+0x382>
    19b8:	81 30       	cpi	r24, 0x01	; 1
    19ba:	09 f4       	brne	.+2      	; 0x19be <LCD_Nokia_SendInteger+0xb2>
    19bc:	87 c1       	rjmp	.+782    	; 0x1ccc <LCD_Nokia_SendInteger+0x3c0>
    19be:	c0 e3       	ldi	r28, 0x30	; 48
    19c0:	d1 e0       	ldi	r29, 0x01	; 1
    19c2:	83 e2       	ldi	r24, 0x23	; 35
    19c4:	65 e0       	ldi	r22, 0x05	; 5
    19c6:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    19ca:	89 91       	ld	r24, Y+
    19cc:	81 11       	cpse	r24, r1
    19ce:	fa cf       	rjmp	.-12     	; 0x19c4 <LCD_Nokia_SendInteger+0xb8>
    19d0:	ad cf       	rjmp	.-166    	; 0x192c <LCD_Nokia_SendInteger+0x20>
    19d2:	97 fd       	sbrc	r25, 7
    19d4:	9b c1       	rjmp	.+822    	; 0x1d0c <LCD_Nokia_SendInteger+0x400>
    19d6:	d7 01       	movw	r26, r14
    19d8:	c6 01       	movw	r24, r12
    19da:	0a 97       	sbiw	r24, 0x0a	; 10
    19dc:	a1 09       	sbc	r26, r1
    19de:	b1 09       	sbc	r27, r1
    19e0:	8a 35       	cpi	r24, 0x5A	; 90
    19e2:	91 05       	cpc	r25, r1
    19e4:	a1 05       	cpc	r26, r1
    19e6:	b1 05       	cpc	r27, r1
    19e8:	08 f4       	brcc	.+2      	; 0x19ec <LCD_Nokia_SendInteger+0xe0>
    19ea:	9a c0       	rjmp	.+308    	; 0x1b20 <LCD_Nokia_SendInteger+0x214>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	9a e0       	ldi	r25, 0x0A	; 10
    19f0:	c9 16       	cp	r12, r25
    19f2:	d1 04       	cpc	r13, r1
    19f4:	e1 04       	cpc	r14, r1
    19f6:	f1 04       	cpc	r15, r1
    19f8:	0c f0       	brlt	.+2      	; 0x19fc <LCD_Nokia_SendInteger+0xf0>
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	b7 01       	movw	r22, r14
    19fe:	a6 01       	movw	r20, r12
    1a00:	44 56       	subi	r20, 0x64	; 100
    1a02:	51 09       	sbc	r21, r1
    1a04:	61 09       	sbc	r22, r1
    1a06:	71 09       	sbc	r23, r1
    1a08:	44 38       	cpi	r20, 0x84	; 132
    1a0a:	53 40       	sbci	r21, 0x03	; 3
    1a0c:	61 05       	cpc	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	08 f4       	brcc	.+2      	; 0x1a14 <LCD_Nokia_SendInteger+0x108>
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	b7 01       	movw	r22, r14
    1a16:	a6 01       	movw	r20, r12
    1a18:	48 5e       	subi	r20, 0xE8	; 232
    1a1a:	53 40       	sbci	r21, 0x03	; 3
    1a1c:	61 09       	sbc	r22, r1
    1a1e:	71 09       	sbc	r23, r1
    1a20:	48 32       	cpi	r20, 0x28	; 40
    1a22:	53 42       	sbci	r21, 0x23	; 35
    1a24:	61 05       	cpc	r22, r1
    1a26:	71 05       	cpc	r23, r1
    1a28:	08 f4       	brcc	.+2      	; 0x1a2c <LCD_Nokia_SendInteger+0x120>
    1a2a:	84 e0       	ldi	r24, 0x04	; 4
    1a2c:	b7 01       	movw	r22, r14
    1a2e:	a6 01       	movw	r20, r12
    1a30:	40 51       	subi	r20, 0x10	; 16
    1a32:	57 42       	sbci	r21, 0x27	; 39
    1a34:	61 09       	sbc	r22, r1
    1a36:	71 09       	sbc	r23, r1
    1a38:	40 39       	cpi	r20, 0x90	; 144
    1a3a:	5f 45       	sbci	r21, 0x5F	; 95
    1a3c:	61 40       	sbci	r22, 0x01	; 1
    1a3e:	71 05       	cpc	r23, r1
    1a40:	08 f4       	brcc	.+2      	; 0x1a44 <LCD_Nokia_SendInteger+0x138>
    1a42:	80 c0       	rjmp	.+256    	; 0x1b44 <LCD_Nokia_SendInteger+0x238>
    1a44:	b7 01       	movw	r22, r14
    1a46:	a6 01       	movw	r20, r12
    1a48:	40 5a       	subi	r20, 0xA0	; 160
    1a4a:	56 48       	sbci	r21, 0x86	; 134
    1a4c:	61 40       	sbci	r22, 0x01	; 1
    1a4e:	71 09       	sbc	r23, r1
    1a50:	40 3a       	cpi	r20, 0xA0	; 160
    1a52:	5b 4b       	sbci	r21, 0xBB	; 187
    1a54:	6d 40       	sbci	r22, 0x0D	; 13
    1a56:	71 05       	cpc	r23, r1
    1a58:	08 f4       	brcc	.+2      	; 0x1a5c <LCD_Nokia_SendInteger+0x150>
    1a5a:	66 c0       	rjmp	.+204    	; 0x1b28 <LCD_Nokia_SendInteger+0x21c>
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <LCD_Nokia_SendInteger+0x156>
    1a60:	9b c0       	rjmp	.+310    	; 0x1b98 <LCD_Nokia_SendInteger+0x28c>
    1a62:	08 f4       	brcc	.+2      	; 0x1a66 <LCD_Nokia_SendInteger+0x15a>
    1a64:	5e c1       	rjmp	.+700    	; 0x1d22 <LCD_Nokia_SendInteger+0x416>
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <LCD_Nokia_SendInteger+0x160>
    1a6a:	88 c0       	rjmp	.+272    	; 0x1b7c <LCD_Nokia_SendInteger+0x270>
    1a6c:	84 30       	cpi	r24, 0x04	; 4
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <LCD_Nokia_SendInteger+0x166>
    1a70:	77 c0       	rjmp	.+238    	; 0x1b60 <LCD_Nokia_SendInteger+0x254>
    1a72:	c0 e3       	ldi	r28, 0x30	; 48
    1a74:	d1 e0       	ldi	r29, 0x01	; 1
    1a76:	83 e2       	ldi	r24, 0x23	; 35
    1a78:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1a7c:	89 91       	ld	r24, Y+
    1a7e:	81 11       	cpse	r24, r1
    1a80:	fb cf       	rjmp	.-10     	; 0x1a78 <LCD_Nokia_SendInteger+0x16c>
    1a82:	54 cf       	rjmp	.-344    	; 0x192c <LCD_Nokia_SendInteger+0x20>
    1a84:	97 fd       	sbrc	r25, 7
    1a86:	2a c1       	rjmp	.+596    	; 0x1cdc <LCD_Nokia_SendInteger+0x3d0>
    1a88:	d7 01       	movw	r26, r14
    1a8a:	c6 01       	movw	r24, r12
    1a8c:	0a 97       	sbiw	r24, 0x0a	; 10
    1a8e:	a1 09       	sbc	r26, r1
    1a90:	b1 09       	sbc	r27, r1
    1a92:	8a 35       	cpi	r24, 0x5A	; 90
    1a94:	91 05       	cpc	r25, r1
    1a96:	a1 05       	cpc	r26, r1
    1a98:	b1 05       	cpc	r27, r1
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <LCD_Nokia_SendInteger+0x192>
    1a9c:	3f c0       	rjmp	.+126    	; 0x1b1c <LCD_Nokia_SendInteger+0x210>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	9a e0       	ldi	r25, 0x0A	; 10
    1aa2:	c9 16       	cp	r12, r25
    1aa4:	d1 04       	cpc	r13, r1
    1aa6:	e1 04       	cpc	r14, r1
    1aa8:	f1 04       	cpc	r15, r1
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <LCD_Nokia_SendInteger+0x1a2>
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	b7 01       	movw	r22, r14
    1ab0:	a6 01       	movw	r20, r12
    1ab2:	44 56       	subi	r20, 0x64	; 100
    1ab4:	51 09       	sbc	r21, r1
    1ab6:	61 09       	sbc	r22, r1
    1ab8:	71 09       	sbc	r23, r1
    1aba:	44 38       	cpi	r20, 0x84	; 132
    1abc:	53 40       	sbci	r21, 0x03	; 3
    1abe:	61 05       	cpc	r22, r1
    1ac0:	71 05       	cpc	r23, r1
    1ac2:	08 f4       	brcc	.+2      	; 0x1ac6 <LCD_Nokia_SendInteger+0x1ba>
    1ac4:	83 e0       	ldi	r24, 0x03	; 3
    1ac6:	b7 01       	movw	r22, r14
    1ac8:	a6 01       	movw	r20, r12
    1aca:	48 5e       	subi	r20, 0xE8	; 232
    1acc:	53 40       	sbci	r21, 0x03	; 3
    1ace:	61 09       	sbc	r22, r1
    1ad0:	71 09       	sbc	r23, r1
    1ad2:	48 32       	cpi	r20, 0x28	; 40
    1ad4:	53 42       	sbci	r21, 0x23	; 35
    1ad6:	61 05       	cpc	r22, r1
    1ad8:	71 05       	cpc	r23, r1
    1ada:	08 f4       	brcc	.+2      	; 0x1ade <LCD_Nokia_SendInteger+0x1d2>
    1adc:	83 c0       	rjmp	.+262    	; 0x1be4 <LCD_Nokia_SendInteger+0x2d8>
    1ade:	b7 01       	movw	r22, r14
    1ae0:	a6 01       	movw	r20, r12
    1ae2:	40 51       	subi	r20, 0x10	; 16
    1ae4:	57 42       	sbci	r21, 0x27	; 39
    1ae6:	61 09       	sbc	r22, r1
    1ae8:	71 09       	sbc	r23, r1
    1aea:	40 39       	cpi	r20, 0x90	; 144
    1aec:	5f 45       	sbci	r21, 0x5F	; 95
    1aee:	61 40       	sbci	r22, 0x01	; 1
    1af0:	71 05       	cpc	r23, r1
    1af2:	08 f4       	brcc	.+2      	; 0x1af6 <LCD_Nokia_SendInteger+0x1ea>
    1af4:	68 c0       	rjmp	.+208    	; 0x1bc6 <LCD_Nokia_SendInteger+0x2ba>
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	09 f4       	brne	.+2      	; 0x1afc <LCD_Nokia_SendInteger+0x1f0>
    1afa:	92 c0       	rjmp	.+292    	; 0x1c20 <LCD_Nokia_SendInteger+0x314>
    1afc:	83 30       	cpi	r24, 0x03	; 3
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <LCD_Nokia_SendInteger+0x1f6>
    1b00:	80 c0       	rjmp	.+256    	; 0x1c02 <LCD_Nokia_SendInteger+0x2f6>
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <LCD_Nokia_SendInteger+0x1fc>
    1b06:	e6 c0       	rjmp	.+460    	; 0x1cd4 <LCD_Nokia_SendInteger+0x3c8>
    1b08:	c0 e3       	ldi	r28, 0x30	; 48
    1b0a:	d1 e0       	ldi	r29, 0x01	; 1
    1b0c:	83 e2       	ldi	r24, 0x23	; 35
    1b0e:	66 e0       	ldi	r22, 0x06	; 6
    1b10:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1b14:	89 91       	ld	r24, Y+
    1b16:	81 11       	cpse	r24, r1
    1b18:	fa cf       	rjmp	.-12     	; 0x1b0e <LCD_Nokia_SendInteger+0x202>
    1b1a:	08 cf       	rjmp	.-496    	; 0x192c <LCD_Nokia_SendInteger+0x20>
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	c7 cf       	rjmp	.-114    	; 0x1aae <LCD_Nokia_SendInteger+0x1a2>
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	6c cf       	rjmp	.-296    	; 0x19fc <LCD_Nokia_SendInteger+0xf0>
    1b24:	82 e0       	ldi	r24, 0x02	; 2
    1b26:	1e cf       	rjmp	.-452    	; 0x1964 <LCD_Nokia_SendInteger+0x58>
    1b28:	c7 01       	movw	r24, r14
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	20 ea       	ldi	r18, 0xA0	; 160
    1b2e:	36 e8       	ldi	r19, 0x86	; 134
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1b38:	6b 01       	movw	r12, r22
    1b3a:	7c 01       	movw	r14, r24
    1b3c:	80 e3       	ldi	r24, 0x30	; 48
    1b3e:	82 0f       	add	r24, r18
    1b40:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1b44:	c7 01       	movw	r24, r14
    1b46:	b6 01       	movw	r22, r12
    1b48:	20 e1       	ldi	r18, 0x10	; 16
    1b4a:	37 e2       	ldi	r19, 0x27	; 39
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	50 e0       	ldi	r21, 0x00	; 0
    1b50:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1b54:	6b 01       	movw	r12, r22
    1b56:	7c 01       	movw	r14, r24
    1b58:	80 e3       	ldi	r24, 0x30	; 48
    1b5a:	82 0f       	add	r24, r18
    1b5c:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1b60:	c7 01       	movw	r24, r14
    1b62:	b6 01       	movw	r22, r12
    1b64:	28 ee       	ldi	r18, 0xE8	; 232
    1b66:	33 e0       	ldi	r19, 0x03	; 3
    1b68:	40 e0       	ldi	r20, 0x00	; 0
    1b6a:	50 e0       	ldi	r21, 0x00	; 0
    1b6c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1b70:	6b 01       	movw	r12, r22
    1b72:	7c 01       	movw	r14, r24
    1b74:	80 e3       	ldi	r24, 0x30	; 48
    1b76:	82 0f       	add	r24, r18
    1b78:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1b7c:	c7 01       	movw	r24, r14
    1b7e:	b6 01       	movw	r22, r12
    1b80:	24 e6       	ldi	r18, 0x64	; 100
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e0       	ldi	r20, 0x00	; 0
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1b8c:	6b 01       	movw	r12, r22
    1b8e:	7c 01       	movw	r14, r24
    1b90:	80 e3       	ldi	r24, 0x30	; 48
    1b92:	82 0f       	add	r24, r18
    1b94:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1b98:	c7 01       	movw	r24, r14
    1b9a:	b6 01       	movw	r22, r12
    1b9c:	2a e0       	ldi	r18, 0x0A	; 10
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e0       	ldi	r20, 0x00	; 0
    1ba2:	50 e0       	ldi	r21, 0x00	; 0
    1ba4:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1ba8:	c6 2f       	mov	r28, r22
    1baa:	80 e3       	ldi	r24, 0x30	; 48
    1bac:	82 0f       	add	r24, r18
    1bae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1bb2:	80 e3       	ldi	r24, 0x30	; 48
    1bb4:	8c 0f       	add	r24, r28
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1bc6:	c7 01       	movw	r24, r14
    1bc8:	b6 01       	movw	r22, r12
    1bca:	20 e1       	ldi	r18, 0x10	; 16
    1bcc:	37 e2       	ldi	r19, 0x27	; 39
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	50 e0       	ldi	r21, 0x00	; 0
    1bd2:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1bd6:	6b 01       	movw	r12, r22
    1bd8:	7c 01       	movw	r14, r24
    1bda:	66 e0       	ldi	r22, 0x06	; 6
    1bdc:	80 e3       	ldi	r24, 0x30	; 48
    1bde:	82 0f       	add	r24, r18
    1be0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1be4:	c7 01       	movw	r24, r14
    1be6:	b6 01       	movw	r22, r12
    1be8:	28 ee       	ldi	r18, 0xE8	; 232
    1bea:	33 e0       	ldi	r19, 0x03	; 3
    1bec:	40 e0       	ldi	r20, 0x00	; 0
    1bee:	50 e0       	ldi	r21, 0x00	; 0
    1bf0:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1bf4:	6b 01       	movw	r12, r22
    1bf6:	7c 01       	movw	r14, r24
    1bf8:	66 e0       	ldi	r22, 0x06	; 6
    1bfa:	80 e3       	ldi	r24, 0x30	; 48
    1bfc:	82 0f       	add	r24, r18
    1bfe:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c02:	c7 01       	movw	r24, r14
    1c04:	b6 01       	movw	r22, r12
    1c06:	24 e6       	ldi	r18, 0x64	; 100
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1c12:	6b 01       	movw	r12, r22
    1c14:	7c 01       	movw	r14, r24
    1c16:	66 e0       	ldi	r22, 0x06	; 6
    1c18:	80 e3       	ldi	r24, 0x30	; 48
    1c1a:	82 0f       	add	r24, r18
    1c1c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c20:	c7 01       	movw	r24, r14
    1c22:	b6 01       	movw	r22, r12
    1c24:	2a e0       	ldi	r18, 0x0A	; 10
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	50 e0       	ldi	r21, 0x00	; 0
    1c2c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1c30:	c6 2f       	mov	r28, r22
    1c32:	66 e0       	ldi	r22, 0x06	; 6
    1c34:	80 e3       	ldi	r24, 0x30	; 48
    1c36:	82 0f       	add	r24, r18
    1c38:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c3c:	66 e0       	ldi	r22, 0x06	; 6
    1c3e:	80 e3       	ldi	r24, 0x30	; 48
    1c40:	8c 0f       	add	r24, r28
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	df 90       	pop	r13
    1c4c:	cf 90       	pop	r12
    1c4e:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c52:	c7 01       	movw	r24, r14
    1c54:	b6 01       	movw	r22, r12
    1c56:	20 e1       	ldi	r18, 0x10	; 16
    1c58:	37 e2       	ldi	r19, 0x27	; 39
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1c62:	6b 01       	movw	r12, r22
    1c64:	7c 01       	movw	r14, r24
    1c66:	65 e0       	ldi	r22, 0x05	; 5
    1c68:	80 e3       	ldi	r24, 0x30	; 48
    1c6a:	82 0f       	add	r24, r18
    1c6c:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c70:	c7 01       	movw	r24, r14
    1c72:	b6 01       	movw	r22, r12
    1c74:	28 ee       	ldi	r18, 0xE8	; 232
    1c76:	33 e0       	ldi	r19, 0x03	; 3
    1c78:	40 e0       	ldi	r20, 0x00	; 0
    1c7a:	50 e0       	ldi	r21, 0x00	; 0
    1c7c:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1c80:	6b 01       	movw	r12, r22
    1c82:	7c 01       	movw	r14, r24
    1c84:	65 e0       	ldi	r22, 0x05	; 5
    1c86:	80 e3       	ldi	r24, 0x30	; 48
    1c88:	82 0f       	add	r24, r18
    1c8a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1c8e:	c7 01       	movw	r24, r14
    1c90:	b6 01       	movw	r22, r12
    1c92:	24 e6       	ldi	r18, 0x64	; 100
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1c9e:	6b 01       	movw	r12, r22
    1ca0:	7c 01       	movw	r14, r24
    1ca2:	65 e0       	ldi	r22, 0x05	; 5
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	82 0f       	add	r24, r18
    1ca8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1cac:	c7 01       	movw	r24, r14
    1cae:	b6 01       	movw	r22, r12
    1cb0:	2a e0       	ldi	r18, 0x0A	; 10
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	50 e0       	ldi	r21, 0x00	; 0
    1cb8:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <__divmodsi4>
    1cbc:	c6 2f       	mov	r28, r22
    1cbe:	65 e0       	ldi	r22, 0x05	; 5
    1cc0:	80 e3       	ldi	r24, 0x30	; 48
    1cc2:	82 0f       	add	r24, r18
    1cc4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1cc8:	65 e0       	ldi	r22, 0x05	; 5
    1cca:	b9 cf       	rjmp	.-142    	; 0x1c3e <LCD_Nokia_SendInteger+0x332>
    1ccc:	65 e0       	ldi	r22, 0x05	; 5
    1cce:	80 e3       	ldi	r24, 0x30	; 48
    1cd0:	8c 0d       	add	r24, r12
    1cd2:	b7 cf       	rjmp	.-146    	; 0x1c42 <LCD_Nokia_SendInteger+0x336>
    1cd4:	66 e0       	ldi	r22, 0x06	; 6
    1cd6:	80 e3       	ldi	r24, 0x30	; 48
    1cd8:	8c 0d       	add	r24, r12
    1cda:	b3 cf       	rjmp	.-154    	; 0x1c42 <LCD_Nokia_SendInteger+0x336>
    1cdc:	66 e0       	ldi	r22, 0x06	; 6
    1cde:	8d e2       	ldi	r24, 0x2D	; 45
    1ce0:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1ce4:	c6 01       	movw	r24, r12
    1ce6:	d7 fc       	sbrc	r13, 7
    1ce8:	27 c0       	rjmp	.+78     	; 0x1d38 <LCD_Nokia_SendInteger+0x42c>
    1cea:	6c 01       	movw	r12, r24
    1cec:	99 0f       	add	r25, r25
    1cee:	ee 08       	sbc	r14, r14
    1cf0:	ff 08       	sbc	r15, r15
    1cf2:	ca ce       	rjmp	.-620    	; 0x1a88 <LCD_Nokia_SendInteger+0x17c>
    1cf4:	65 e0       	ldi	r22, 0x05	; 5
    1cf6:	8d e2       	ldi	r24, 0x2D	; 45
    1cf8:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LCD_Nokia_PutSmallChar>
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	d7 fc       	sbrc	r13, 7
    1d00:	20 c0       	rjmp	.+64     	; 0x1d42 <LCD_Nokia_SendInteger+0x436>
    1d02:	6c 01       	movw	r12, r24
    1d04:	99 0f       	add	r25, r25
    1d06:	ee 08       	sbc	r14, r14
    1d08:	ff 08       	sbc	r15, r15
    1d0a:	19 ce       	rjmp	.-974    	; 0x193e <LCD_Nokia_SendInteger+0x32>
    1d0c:	8d e2       	ldi	r24, 0x2D	; 45
    1d0e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    1d12:	c6 01       	movw	r24, r12
    1d14:	d7 fc       	sbrc	r13, 7
    1d16:	0b c0       	rjmp	.+22     	; 0x1d2e <LCD_Nokia_SendInteger+0x422>
    1d18:	6c 01       	movw	r12, r24
    1d1a:	99 0f       	add	r25, r25
    1d1c:	ee 08       	sbc	r14, r14
    1d1e:	ff 08       	sbc	r15, r15
    1d20:	5a ce       	rjmp	.-844    	; 0x19d6 <LCD_Nokia_SendInteger+0xca>
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <LCD_Nokia_SendInteger+0x41c>
    1d26:	a5 ce       	rjmp	.-694    	; 0x1a72 <LCD_Nokia_SendInteger+0x166>
    1d28:	80 e3       	ldi	r24, 0x30	; 48
    1d2a:	8c 0d       	add	r24, r12
    1d2c:	44 cf       	rjmp	.-376    	; 0x1bb6 <LCD_Nokia_SendInteger+0x2aa>
    1d2e:	88 27       	eor	r24, r24
    1d30:	99 27       	eor	r25, r25
    1d32:	8c 19       	sub	r24, r12
    1d34:	9d 09       	sbc	r25, r13
    1d36:	f0 cf       	rjmp	.-32     	; 0x1d18 <LCD_Nokia_SendInteger+0x40c>
    1d38:	88 27       	eor	r24, r24
    1d3a:	99 27       	eor	r25, r25
    1d3c:	8c 19       	sub	r24, r12
    1d3e:	9d 09       	sbc	r25, r13
    1d40:	d4 cf       	rjmp	.-88     	; 0x1cea <LCD_Nokia_SendInteger+0x3de>
    1d42:	88 27       	eor	r24, r24
    1d44:	99 27       	eor	r25, r25
    1d46:	8c 19       	sub	r24, r12
    1d48:	9d 09       	sbc	r25, r13
    1d4a:	db cf       	rjmp	.-74     	; 0x1d02 <LCD_Nokia_SendInteger+0x3f6>

00001d4c <LCD_Nokia_Send5Integer>:
    1d4c:	45 e0       	ldi	r20, 0x05	; 5
    1d4e:	0c 94 86 0c 	jmp	0x190c	; 0x190c <LCD_Nokia_SendInteger>

00001d52 <LCD_Nokia_Send12Integer>:
    1d52:	4c e0       	ldi	r20, 0x0C	; 12
    1d54:	0c 94 86 0c 	jmp	0x190c	; 0x190c <LCD_Nokia_SendInteger>

00001d58 <LCD_Nokia_Send6Integer>:
    1d58:	46 e0       	ldi	r20, 0x06	; 6
    1d5a:	0c 94 86 0c 	jmp	0x190c	; 0x190c <LCD_Nokia_SendInteger>

00001d5e <LCD_Nokia_DrawRectangle>:
    1d5e:	ef 92       	push	r14
    1d60:	ff 92       	push	r15
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	e8 2e       	mov	r14, r24
    1d6c:	d6 2f       	mov	r29, r22
    1d6e:	14 2f       	mov	r17, r20
    1d70:	f2 2e       	mov	r15, r18
    1d72:	48 17       	cp	r20, r24
    1d74:	10 f4       	brcc	.+4      	; 0x1d7a <LCD_Nokia_DrawRectangle+0x1c>
    1d76:	e4 2e       	mov	r14, r20
    1d78:	18 2f       	mov	r17, r24
    1d7a:	fd 16       	cp	r15, r29
    1d7c:	18 f4       	brcc	.+6      	; 0x1d84 <LCD_Nokia_DrawRectangle+0x26>
    1d7e:	8d 2f       	mov	r24, r29
    1d80:	df 2d       	mov	r29, r15
    1d82:	f8 2e       	mov	r15, r24
    1d84:	01 11       	cpse	r16, r1
    1d86:	2d c0       	rjmp	.+90     	; 0x1de2 <LCD_Nokia_DrawRectangle+0x84>
    1d88:	1e 15       	cp	r17, r14
    1d8a:	80 f0       	brcs	.+32     	; 0x1dac <LCD_Nokia_DrawRectangle+0x4e>
    1d8c:	ce 2d       	mov	r28, r14
    1d8e:	6d 2f       	mov	r22, r29
    1d90:	8c 2f       	mov	r24, r28
    1d92:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1d96:	cf 5f       	subi	r28, 0xFF	; 255
    1d98:	1c 17       	cp	r17, r28
    1d9a:	c8 f7       	brcc	.-14     	; 0x1d8e <LCD_Nokia_DrawRectangle+0x30>
    1d9c:	ce 2d       	mov	r28, r14
    1d9e:	6f 2d       	mov	r22, r15
    1da0:	8c 2f       	mov	r24, r28
    1da2:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1da6:	cf 5f       	subi	r28, 0xFF	; 255
    1da8:	1c 17       	cp	r17, r28
    1daa:	c8 f7       	brcc	.-14     	; 0x1d9e <LCD_Nokia_DrawRectangle+0x40>
    1dac:	fd 16       	cp	r15, r29
    1dae:	78 f0       	brcs	.+30     	; 0x1dce <LCD_Nokia_DrawRectangle+0x70>
    1db0:	cd 2f       	mov	r28, r29
    1db2:	6c 2f       	mov	r22, r28
    1db4:	8e 2d       	mov	r24, r14
    1db6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1dba:	cf 5f       	subi	r28, 0xFF	; 255
    1dbc:	fc 16       	cp	r15, r28
    1dbe:	c8 f7       	brcc	.-14     	; 0x1db2 <LCD_Nokia_DrawRectangle+0x54>
    1dc0:	6d 2f       	mov	r22, r29
    1dc2:	81 2f       	mov	r24, r17
    1dc4:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1dc8:	df 5f       	subi	r29, 0xFF	; 255
    1dca:	fd 16       	cp	r15, r29
    1dcc:	c8 f7       	brcc	.-14     	; 0x1dc0 <LCD_Nokia_DrawRectangle+0x62>
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	08 95       	ret
    1ddc:	df 5f       	subi	r29, 0xFF	; 255
    1dde:	fd 16       	cp	r15, r29
    1de0:	b0 f3       	brcs	.-20     	; 0x1dce <LCD_Nokia_DrawRectangle+0x70>
    1de2:	1e 15       	cp	r17, r14
    1de4:	d8 f3       	brcs	.-10     	; 0x1ddc <LCD_Nokia_DrawRectangle+0x7e>
    1de6:	ce 2d       	mov	r28, r14
    1de8:	6d 2f       	mov	r22, r29
    1dea:	8c 2f       	mov	r24, r28
    1dec:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LCD_Nokia_PutPixel.part.0>
    1df0:	cf 5f       	subi	r28, 0xFF	; 255
    1df2:	1c 17       	cp	r17, r28
    1df4:	c8 f7       	brcc	.-14     	; 0x1de8 <LCD_Nokia_DrawRectangle+0x8a>
    1df6:	df 5f       	subi	r29, 0xFF	; 255
    1df8:	fd 16       	cp	r15, r29
    1dfa:	98 f7       	brcc	.-26     	; 0x1de2 <LCD_Nokia_DrawRectangle+0x84>
    1dfc:	e8 cf       	rjmp	.-48     	; 0x1dce <LCD_Nokia_DrawRectangle+0x70>

00001dfe <LCD_Nokia_DrawUnfilledRectangle>:
    1dfe:	ef 92       	push	r14
    1e00:	ff 92       	push	r15
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	00 23       	and	r16, r16
    1e0c:	a1 f0       	breq	.+40     	; 0x1e36 <LCD_Nokia_DrawUnfilledRectangle+0x38>
    1e0e:	e8 2e       	mov	r14, r24
    1e10:	e0 0e       	add	r14, r16
    1e12:	cf ef       	ldi	r28, 0xFF	; 255
    1e14:	c2 0f       	add	r28, r18
    1e16:	df ef       	ldi	r29, 0xFF	; 255
    1e18:	d4 0f       	add	r29, r20
    1e1a:	11 e0       	ldi	r17, 0x01	; 1
    1e1c:	16 0f       	add	r17, r22
    1e1e:	ff 24       	eor	r15, r15
    1e20:	f3 94       	inc	r15
    1e22:	f8 0e       	add	r15, r24
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <LCD_Nokia_DrawRectangle>
    1e2a:	8f 2d       	mov	r24, r15
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	4d 2f       	mov	r20, r29
    1e30:	2c 2f       	mov	r18, r28
    1e32:	ef 10       	cpse	r14, r15
    1e34:	ee cf       	rjmp	.-36     	; 0x1e12 <LCD_Nokia_DrawUnfilledRectangle+0x14>
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	08 95       	ret

00001e44 <LCD_Nokia_UpdateFullScreen>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
    1e4c:	0e 94 8e 0a 	call	0x151c	; 0x151c <LCD_Nokia_SetPosition>
    1e50:	c1 ef       	ldi	r28, 0xF1	; 241
    1e52:	d1 e0       	ldi	r29, 0x01	; 1
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	89 91       	ld	r24, Y+
    1e58:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_Nokia_PutByte>
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	c9 3e       	cpi	r28, 0xE9	; 233
    1e60:	d8 07       	cpc	r29, r24
    1e62:	c1 f7       	brne	.-16     	; 0x1e54 <LCD_Nokia_UpdateFullScreen+0x10>
    1e64:	df 91       	pop	r29
    1e66:	cf 91       	pop	r28
    1e68:	08 95       	ret

00001e6a <LCD_Nokia_SetPower>:


void LCD_Nokia_SetPower (uint8_t on)
{
	LCD_Nokia_PutCommandByte(on ?	LCD_NOKIA_POWER_ON : LCD_NOKIA_POWER_DOWN);
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	04 c0       	rjmp	.+8      	; 0x1e76 <LCD_Nokia_SetPower+0xc>
    1e6e:	84 e2       	ldi	r24, 0x24	; 36
	LCD_NOKIA_UNSELECT;
}

void LCD_Nokia_PutCommandByte(int8_t byte)
{
	LCD_Nokia_PutByte(byte, 0);
    1e70:	60 e0       	ldi	r22, 0x00	; 0
    1e72:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <LCD_Nokia_PutByte>
}


void LCD_Nokia_SetPower (uint8_t on)
{
	LCD_Nokia_PutCommandByte(on ?	LCD_NOKIA_POWER_ON : LCD_NOKIA_POWER_DOWN);
    1e76:	80 e2       	ldi	r24, 0x20	; 32
	LCD_NOKIA_UNSELECT;
}

void LCD_Nokia_PutCommandByte(int8_t byte)
{
	LCD_Nokia_PutByte(byte, 0);
    1e78:	60 e0       	ldi	r22, 0x00	; 0
    1e7a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <LCD_Nokia_PutByte>

00001e7e <setup>:

void setup (void)
{
	Global_Init();
	IO_Init();
	Buttons_Init();											//	Inputs initialization; initialization of Timer 0 on OCR0A
    1e7e:	0e 94 39 04 	call	0x872	; 0x872 <Buttons_Init>
	Speedometer_Init();										//	Inputs initialization; initialization of external interrupts on INT0 pin
    1e82:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <Speedometer_Init>
	DS1307_Init();
    1e86:	0e 94 2b 05 	call	0xa56	; 0xa56 <DS1307_Init>
		
	I2C_Init(I2C_SCL_FREQUENCY, I2C_PRESCALER);
    1e8a:	44 e0       	ldi	r20, 0x04	; 4
    1e8c:	60 ea       	ldi	r22, 0xA0	; 160
    1e8e:	76 e8       	ldi	r23, 0x86	; 134
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 2b 09 	call	0x1256	; 0x1256 <I2C_Init>
	SPI_Master_Init();
    1e98:	0e 94 80 14 	call	0x2900	; 0x2900 <SPI_Master_Init>
	
	LCD_Nokia_Init();
    1e9c:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_Nokia_Init>
	
//	GeekSport_Init();
	
	sei();
    1ea0:	78 94       	sei
    1ea2:	08 95       	ret

00001ea4 <main>:
}

int main (void)
{
	setup();
    1ea4:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <setup>
// 		LCD_Nokia_ClearBuffer();
// 		LCD_Nokia_UpdateFullScreen();
// 		sleepModeOn = true;
// 		Geeksport_GoToSleep();
		
		GeekSport_SetMode(GeekSport_Mode);
    1ea8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <GeekSport_Mode>
    1eac:	0e 94 43 08 	call	0x1086	; 0x1086 <GeekSport_SetMode>
    1eb0:	fb cf       	rjmp	.-10     	; 0x1ea8 <main+0x4>

00001eb2 <Speedometer_Init>:
//volatile uint32_t Speedometer_Data[5] = {0};


void Speedometer_IO_Init (void)
{
	SPEEDOMETER_HALL_SWITCH_DDR &= ~(1 << SPEEDOMETER_HALL_SWITCH_PIN);
    1eb2:	52 98       	cbi	0x0a, 2	; 10
	SPEEDOMETER_HALL_SWITCH_PORT |= 1 << SPEEDOMETER_HALL_SWITCH_PIN;
    1eb4:	5a 9a       	sbi	0x0b, 2	; 11
}

void Speedometer_Init (void)
{
	Speedometer_IO_Init();
	EICRA |= 1 << ISC01 | 0 << ISC00;															//	Set interrupts on failing edge for the reed switch
    1eb6:	e9 e6       	ldi	r30, 0x69	; 105
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	82 60       	ori	r24, 0x02	; 2
    1ebe:	80 83       	st	Z, r24
	EIMSK |= 1 << INT0;																			//	Enable interrupts
    1ec0:	e8 9a       	sbi	0x1d, 0	; 29
    1ec2:	08 95       	ret

00001ec4 <Speedometer_Settings>:
}

void Speedometer_Settings (void)
{
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
	uint16_t tempLength;
	
//	Wheel length setting
	GeekSport_SettingsDigit = 0;
    1ecc:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1ed0:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	Buttons_SetButtonState = false;
    1ed4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(63, 11);
    1ed8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1edc:	81 11       	cpse	r24, r1
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <Speedometer_Settings+0x2c>
    1ee0:	6b e0       	ldi	r22, 0x0B	; 11
    1ee2:	8f e3       	ldi	r24, 0x3F	; 63
    1ee4:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
    1ee8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1eec:	88 23       	and	r24, r24
    1eee:	c1 f3       	breq	.-16     	; 0x1ee0 <Speedometer_Settings+0x1c>
	
	Buttons_SetButtonState = false;
    1ef0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength = (GeekSport_SettingsDigit * 1000);
    1ef4:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
    1ef8:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1efc:	88 ee       	ldi	r24, 0xE8	; 232
    1efe:	93 e0       	ldi	r25, 0x03	; 3
    1f00:	28 9f       	mul	r18, r24
    1f02:	e0 01       	movw	r28, r0
    1f04:	29 9f       	mul	r18, r25
    1f06:	d0 0d       	add	r29, r0
    1f08:	38 9f       	mul	r19, r24
    1f0a:	d0 0d       	add	r29, r0
    1f0c:	11 24       	eor	r1, r1
	
	GeekSport_SettingsDigit = 0;
    1f0e:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1f12:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(68, 11);
    1f16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1f1a:	81 11       	cpse	r24, r1
    1f1c:	08 c0       	rjmp	.+16     	; 0x1f2e <Speedometer_Settings+0x6a>
    1f1e:	6b e0       	ldi	r22, 0x0B	; 11
    1f20:	84 e4       	ldi	r24, 0x44	; 68
    1f22:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
    1f26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1f2a:	88 23       	and	r24, r24
    1f2c:	c1 f3       	breq	.-16     	; 0x1f1e <Speedometer_Settings+0x5a>
	
	Buttons_SetButtonState = false;
    1f2e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength += (GeekSport_SettingsDigit * 100);
    1f32:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
    1f36:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1f3a:	44 e6       	ldi	r20, 0x64	; 100
    1f3c:	42 9f       	mul	r20, r18
    1f3e:	c0 01       	movw	r24, r0
    1f40:	43 9f       	mul	r20, r19
    1f42:	90 0d       	add	r25, r0
    1f44:	11 24       	eor	r1, r1
    1f46:	8c 01       	movw	r16, r24
    1f48:	0c 0f       	add	r16, r28
    1f4a:	1d 1f       	adc	r17, r29
	
	GeekSport_SettingsDigit = 0;
    1f4c:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1f50:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState)	GeekSport_LCD_Nokia_UpdateDigitOnScreen(73, 11);
    1f54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	08 c0       	rjmp	.+16     	; 0x1f6c <Speedometer_Settings+0xa8>
    1f5c:	6b e0       	ldi	r22, 0x0B	; 11
    1f5e:	89 e4       	ldi	r24, 0x49	; 73
    1f60:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
    1f64:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1f68:	88 23       	and	r24, r24
    1f6a:	c1 f3       	breq	.-16     	; 0x1f5c <Speedometer_Settings+0x98>
	
	Buttons_SetButtonState = false;
    1f6c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
	tempLength += (GeekSport_SettingsDigit * 10);
    1f70:	20 91 f8 01 	lds	r18, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
    1f74:	30 91 f9 01 	lds	r19, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1f78:	c9 01       	movw	r24, r18
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	22 0f       	add	r18, r18
    1f80:	33 1f       	adc	r19, r19
    1f82:	22 0f       	add	r18, r18
    1f84:	33 1f       	adc	r19, r19
    1f86:	22 0f       	add	r18, r18
    1f88:	33 1f       	adc	r19, r19
    1f8a:	ec 01       	movw	r28, r24
    1f8c:	c2 0f       	add	r28, r18
    1f8e:	d3 1f       	adc	r29, r19
	
	GeekSport_SettingsDigit = 0;
    1f90:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1f94:	10 92 f8 01 	sts	0x01F8, r1	; 0x8001f8 <GeekSport_SettingsDigit>
	while (!Buttons_SetButtonState) GeekSport_LCD_Nokia_UpdateDigitOnScreen(78, 11);
    1f98:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1f9c:	81 11       	cpse	r24, r1
    1f9e:	08 c0       	rjmp	.+16     	; 0x1fb0 <Speedometer_Settings+0xec>
    1fa0:	6b e0       	ldi	r22, 0x0B	; 11
    1fa2:	8e e4       	ldi	r24, 0x4E	; 78
    1fa4:	0e 94 a4 07 	call	0xf48	; 0xf48 <GeekSport_LCD_Nokia_UpdateDigitOnScreen>
    1fa8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    1fac:	88 23       	and	r24, r24
    1fae:	c1 f3       	breq	.-16     	; 0x1fa0 <Speedometer_Settings+0xdc>
	
	tempLength += GeekSport_SettingsDigit;
    1fb0:	80 91 f8 01 	lds	r24, 0x01F8	; 0x8001f8 <GeekSport_SettingsDigit>
    1fb4:	90 91 f9 01 	lds	r25, 0x01F9	; 0x8001f9 <GeekSport_SettingsDigit+0x1>
    1fb8:	80 0f       	add	r24, r16
    1fba:	91 1f       	adc	r25, r17
	
	TimeRegPointer = &Speedometer_Buffer;
    1fbc:	2b ef       	ldi	r18, 0xFB	; 251
    1fbe:	31 e0       	ldi	r19, 0x01	; 1
    1fc0:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <TimeRegPointer+0x1>
    1fc4:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <TimeRegPointer>
	TimeRegPointer->Speedometer_WheelLength = tempLength;
    1fc8:	8c 0f       	add	r24, r28
    1fca:	9d 1f       	adc	r25, r29
    1fcc:	a0 e0       	ldi	r26, 0x00	; 0
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <Speedometer_Buffer+0x7>
    1fd4:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <Speedometer_Buffer+0x8>
    1fd8:	a0 93 04 02 	sts	0x0204, r26	; 0x800204 <Speedometer_Buffer+0x9>
    1fdc:	b0 93 05 02 	sts	0x0205, r27	; 0x800205 <Speedometer_Buffer+0xa>
}
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	1f 91       	pop	r17
    1fe6:	0f 91       	pop	r16
    1fe8:	08 95       	ret

00001fea <Speedometer_LCD_Nokia_Main>:

void Speedometer_LCD_Nokia_Main (void)
{
    1fea:	4f 92       	push	r4
    1fec:	5f 92       	push	r5
    1fee:	6f 92       	push	r6
    1ff0:	7f 92       	push	r7
    1ff2:	8f 92       	push	r8
    1ff4:	9f 92       	push	r9
    1ff6:	af 92       	push	r10
    1ff8:	bf 92       	push	r11
    1ffa:	cf 92       	push	r12
    1ffc:	df 92       	push	r13
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
	switch (Speedometer_Mode)
    2006:	80 91 f1 01 	lds	r24, 0x01F1	; 0x8001f1 <Speedometer_Mode>
    200a:	81 30       	cpi	r24, 0x01	; 1
    200c:	09 f4       	brne	.+2      	; 0x2010 <Speedometer_LCD_Nokia_Main+0x26>
    200e:	e4 c0       	rjmp	.+456    	; 0x21d8 <Speedometer_LCD_Nokia_Main+0x1ee>
    2010:	08 f1       	brcs	.+66     	; 0x2054 <Speedometer_LCD_Nokia_Main+0x6a>
    2012:	82 30       	cpi	r24, 0x02	; 2
    2014:	81 f4       	brne	.+32     	; 0x2036 <Speedometer_LCD_Nokia_Main+0x4c>
			break;
		}
		
		case SPEEDOMETER_WHEEL_LENGTH_SETING_MODE:
		{
			LCD_Nokia_ClearBuffer();
    2016:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			
			LCD_Nokia_SetPixelPosition(3, 11);
    201a:	6b e0       	ldi	r22, 0x0B	; 11
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5CharString_P((int8_t *) setWheelLength);							//	Wheel length setting string
    2022:	8c e4       	ldi	r24, 0x4C	; 76
    2024:	97 e0       	ldi	r25, 0x07	; 7
    2026:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
			
			Speedometer_Settings();
    202a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <Speedometer_Settings>
			
			LCD_Nokia_ClearBuffer();
    202e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			Speedometer_Mode = SPEEDOMETER_SPEED_MEASUREMENT_MODE;
    2032:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <Speedometer_Mode>
			break;
		}
		
		default:	break;
	}
}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	ff 90       	pop	r15
    203c:	ef 90       	pop	r14
    203e:	df 90       	pop	r13
    2040:	cf 90       	pop	r12
    2042:	bf 90       	pop	r11
    2044:	af 90       	pop	r10
    2046:	9f 90       	pop	r9
    2048:	8f 90       	pop	r8
    204a:	7f 90       	pop	r7
    204c:	6f 90       	pop	r6
    204e:	5f 90       	pop	r5
    2050:	4f 90       	pop	r4
    2052:	08 95       	ret
	switch (Speedometer_Mode)
	{
		case SPEEDOMETER_SPEED_MEASUREMENT_MODE:
		{
			//LCD_Nokia_ClearBuffer();									/////////
			DS1307_ReceiveTimeData();
    2054:	0e 94 6f 05 	call	0xade	; 0xade <DS1307_ReceiveTimeData>
			
			//	Out the time
			LCD_Nokia_SetPixelPosition(59, 0);
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	8b e3       	ldi	r24, 0x3B	; 59
    205c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send5Integer(TimeRegPointer->hours);
    2060:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2064:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2068:	62 81       	ldd	r22, Z+2	; 0x02
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <LCD_Nokia_Send5Integer>
			LCD_Nokia_Put5Char(':');
    2074:	8a e3       	ldi	r24, 0x3A	; 58
    2076:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
			LCD_Nokia_Send5Integer(TimeRegPointer->minutes);
    207a:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    207e:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2082:	61 81       	ldd	r22, Z+1	; 0x01
    2084:	70 e0       	ldi	r23, 0x00	; 0
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <LCD_Nokia_Send5Integer>
			
			//	Out the current speed
			TimeRegPointer = &Speedometer_Buffer;
    208e:	8b ef       	ldi	r24, 0xFB	; 251
    2090:	91 e0       	ldi	r25, 0x01	; 1
    2092:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <TimeRegPointer+0x1>
    2096:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimeRegPointer>
			uint32_t temp = TimeRegPointer->Speedometer_Speed;
    209a:	c0 90 06 02 	lds	r12, 0x0206	; 0x800206 <Speedometer_Buffer+0xb>
    209e:	d0 90 07 02 	lds	r13, 0x0207	; 0x800207 <Speedometer_Buffer+0xc>
    20a2:	e0 90 08 02 	lds	r14, 0x0208	; 0x800208 <Speedometer_Buffer+0xd>
    20a6:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <Speedometer_Buffer+0xe>
			LCD_Nokia_SetPixelPosition(0, 12);
    20aa:	6c e0       	ldi	r22, 0x0C	; 12
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			if (temp == 0)
    20b2:	c1 14       	cp	r12, r1
    20b4:	d1 04       	cpc	r13, r1
    20b6:	e1 04       	cpc	r14, r1
    20b8:	f1 04       	cpc	r15, r1
    20ba:	09 f4       	brne	.+2      	; 0x20be <Speedometer_LCD_Nokia_Main+0xd4>
    20bc:	00 c2       	rjmp	.+1024   	; 0x24be <Speedometer_LCD_Nokia_Main+0x4d4>
			{
				LCD_Nokia_Send12CharString_P((int8_t *) PSTR("00"));
			}
			else if (((temp * 36) / 10000) < 10)
    20be:	d7 01       	movw	r26, r14
    20c0:	c6 01       	movw	r24, r12
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	aa 1f       	adc	r26, r26
    20c8:	bb 1f       	adc	r27, r27
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	aa 1f       	adc	r26, r26
    20d0:	bb 1f       	adc	r27, r27
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	aa 1f       	adc	r26, r26
    20d8:	bb 1f       	adc	r27, r27
    20da:	c8 0e       	add	r12, r24
    20dc:	d9 1e       	adc	r13, r25
    20de:	ea 1e       	adc	r14, r26
    20e0:	fb 1e       	adc	r15, r27
    20e2:	cc 0c       	add	r12, r12
    20e4:	dd 1c       	adc	r13, r13
    20e6:	ee 1c       	adc	r14, r14
    20e8:	ff 1c       	adc	r15, r15
    20ea:	cc 0c       	add	r12, r12
    20ec:	dd 1c       	adc	r13, r13
    20ee:	ee 1c       	adc	r14, r14
    20f0:	ff 1c       	adc	r15, r15
    20f2:	20 ea       	ldi	r18, 0xA0	; 160
    20f4:	c2 16       	cp	r12, r18
    20f6:	26 e8       	ldi	r18, 0x86	; 134
    20f8:	d2 06       	cpc	r13, r18
    20fa:	21 e0       	ldi	r18, 0x01	; 1
    20fc:	e2 06       	cpc	r14, r18
    20fe:	f1 04       	cpc	r15, r1
    2100:	08 f0       	brcs	.+2      	; 0x2104 <Speedometer_LCD_Nokia_Main+0x11a>
    2102:	5e c2       	rjmp	.+1212   	; 0x25c0 <Speedometer_LCD_Nokia_Main+0x5d6>
			{
				LCD_Nokia_Put12Char('0');
    2104:	80 e3       	ldi	r24, 0x30	; 48
    2106:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
				LCD_Nokia_Put12Char(((temp * 36) / 10000) + ASCII_NULL);
    210a:	c7 01       	movw	r24, r14
    210c:	b6 01       	movw	r22, r12
    210e:	20 e1       	ldi	r18, 0x10	; 16
    2110:	37 e2       	ldi	r19, 0x27	; 39
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    211a:	80 e3       	ldi	r24, 0x30	; 48
    211c:	82 0f       	add	r24, r18
    211e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
			}
			LCD_Nokia_SetPixelPosition(23, 21);
    2122:	65 e1       	ldi	r22, 0x15	; 21
    2124:	87 e1       	ldi	r24, 0x17	; 23
    2126:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    212a:	8e e2       	ldi	r24, 0x2E	; 46
    212c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(26, 12);
    2130:	6c e0       	ldi	r22, 0x0C	; 12
    2132:	8a e1       	ldi	r24, 0x1A	; 26
    2134:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
    2138:	c7 01       	movw	r24, r14
    213a:	b6 01       	movw	r22, r12
    213c:	20 e1       	ldi	r18, 0x10	; 16
    213e:	37 e2       	ldi	r19, 0x27	; 39
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2148:	6b 01       	movw	r12, r22
    214a:	7c 01       	movw	r14, r24
    214c:	21 e0       	ldi	r18, 0x01	; 1
    214e:	c2 1a       	sub	r12, r18
    2150:	d1 08       	sbc	r13, r1
    2152:	e1 08       	sbc	r14, r1
    2154:	f1 08       	sbc	r15, r1
    2156:	20 ea       	ldi	r18, 0xA0	; 160
    2158:	c2 16       	cp	r12, r18
    215a:	26 e8       	ldi	r18, 0x86	; 134
    215c:	d2 06       	cpc	r13, r18
    215e:	21 e0       	ldi	r18, 0x01	; 1
    2160:	e2 06       	cpc	r14, r18
    2162:	f1 04       	cpc	r15, r1
    2164:	08 f0       	brcs	.+2      	; 0x2168 <Speedometer_LCD_Nokia_Main+0x17e>
    2166:	ba c1       	rjmp	.+884    	; 0x24dc <Speedometer_LCD_Nokia_Main+0x4f2>
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
    2168:	6b 01       	movw	r12, r22
    216a:	7c 01       	movw	r14, r24
    216c:	29 ee       	ldi	r18, 0xE9	; 233
    216e:	c2 1a       	sub	r12, r18
    2170:	23 e0       	ldi	r18, 0x03	; 3
    2172:	d2 0a       	sbc	r13, r18
    2174:	e1 08       	sbc	r14, r1
    2176:	f1 08       	sbc	r15, r1
    2178:	28 e2       	ldi	r18, 0x28	; 40
    217a:	c2 16       	cp	r12, r18
    217c:	23 e2       	ldi	r18, 0x23	; 35
    217e:	d2 06       	cpc	r13, r18
    2180:	e1 04       	cpc	r14, r1
    2182:	f1 04       	cpc	r15, r1
    2184:	08 f4       	brcc	.+2      	; 0x2188 <Speedometer_LCD_Nokia_Main+0x19e>
    2186:	3d c2       	rjmp	.+1146   	; 0x2602 <Speedometer_LCD_Nokia_Main+0x618>
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
    2188:	6b 01       	movw	r12, r22
    218a:	7c 01       	movw	r14, r24
    218c:	25 e6       	ldi	r18, 0x65	; 101
    218e:	c2 1a       	sub	r12, r18
    2190:	d1 08       	sbc	r13, r1
    2192:	e1 08       	sbc	r14, r1
    2194:	f1 08       	sbc	r15, r1
    2196:	24 e8       	ldi	r18, 0x84	; 132
    2198:	c2 16       	cp	r12, r18
    219a:	23 e0       	ldi	r18, 0x03	; 3
    219c:	d2 06       	cpc	r13, r18
    219e:	e1 04       	cpc	r14, r1
    21a0:	f1 04       	cpc	r15, r1
    21a2:	08 f4       	brcc	.+2      	; 0x21a6 <Speedometer_LCD_Nokia_Main+0x1bc>
    21a4:	39 c2       	rjmp	.+1138   	; 0x2618 <Speedometer_LCD_Nokia_Main+0x62e>
			else if ((((temp * 36) % 10000) > 10) && (((temp * 36) % 10000) <= 100))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10) + ASCII_NULL);
    21a6:	6b 01       	movw	r12, r22
    21a8:	7c 01       	movw	r14, r24
    21aa:	2b e0       	ldi	r18, 0x0B	; 11
    21ac:	c2 1a       	sub	r12, r18
    21ae:	d1 08       	sbc	r13, r1
    21b0:	e1 08       	sbc	r14, r1
    21b2:	f1 08       	sbc	r15, r1
    21b4:	2a e5       	ldi	r18, 0x5A	; 90
    21b6:	c2 16       	cp	r12, r18
    21b8:	d1 04       	cpc	r13, r1
    21ba:	e1 04       	cpc	r14, r1
    21bc:	f1 04       	cpc	r15, r1
    21be:	08 f0       	brcs	.+2      	; 0x21c2 <Speedometer_LCD_Nokia_Main+0x1d8>
    21c0:	90 c1       	rjmp	.+800    	; 0x24e2 <Speedometer_LCD_Nokia_Main+0x4f8>
    21c2:	2a e0       	ldi	r18, 0x0A	; 10
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    21ce:	80 e3       	ldi	r24, 0x30	; 48
    21d0:	82 0f       	add	r24, r18
    21d2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    21d6:	85 c1       	rjmp	.+778    	; 0x24e2 <Speedometer_LCD_Nokia_Main+0x4f8>
			break;
		}
		
		case SPEEDOMETER_SCREEN_MODE:
		{
			LCD_Nokia_ClearBuffer();
    21d8:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			
			Buttons_SetButtonState = false;
    21dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <Buttons_SetButtonState>
			while (!Buttons_SetButtonState)
    21e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    21e4:	81 11       	cpse	r24, r1
    21e6:	5b c1       	rjmp	.+694    	; 0x249e <Speedometer_LCD_Nokia_Main+0x4b4>
			{
				LCD_Nokia_SetPixelPosition(0,8);
				LCD_Nokia_Send6CharString_P((int8_t *) odoString);
				LCD_Nokia_Send6Integer(TimeRegPointer->totalDistance / 1000);
    21e8:	88 ee       	ldi	r24, 0xE8	; 232
    21ea:	88 2e       	mov	r8, r24
    21ec:	83 e0       	ldi	r24, 0x03	; 3
    21ee:	98 2e       	mov	r9, r24
    21f0:	a1 2c       	mov	r10, r1
    21f2:	b1 2c       	mov	r11, r1
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_SetPixelPosition(0,16);
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
				if ((TimeRegPointer->totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(TimeRegPointer->totalTime / 3600);
    21f4:	90 e1       	ldi	r25, 0x10	; 16
    21f6:	c9 2e       	mov	r12, r25
    21f8:	9e e0       	ldi	r25, 0x0E	; 14
    21fa:	d9 2e       	mov	r13, r25
    21fc:	e1 2c       	mov	r14, r1
    21fe:	f1 2c       	mov	r15, r1
				LCD_Nokia_Put6Char(':');
				if (((TimeRegPointer->totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((TimeRegPointer->totalTime % 3600) / 60);
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((TimeRegPointer->totalTime % 3600) / 60) + ASCII_NULL);
    2200:	2c e3       	ldi	r18, 0x3C	; 60
    2202:	42 2e       	mov	r4, r18
    2204:	51 2c       	mov	r5, r1
    2206:	61 2c       	mov	r6, r1
    2208:	71 2c       	mov	r7, r1
    220a:	d3 c0       	rjmp	.+422    	; 0x23b2 <Speedometer_LCD_Nokia_Main+0x3c8>
				LCD_Nokia_Send6Integer(TimeRegPointer->totalDistance / 1000);
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_SetPixelPosition(0,16);
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
				if ((TimeRegPointer->totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(TimeRegPointer->totalTime / 3600);
    220c:	63 89       	ldd	r22, Z+19	; 0x13
    220e:	74 89       	ldd	r23, Z+20	; 0x14
    2210:	85 89       	ldd	r24, Z+21	; 0x15
    2212:	96 89       	ldd	r25, Z+22	; 0x16
    2214:	a7 01       	movw	r20, r14
    2216:	96 01       	movw	r18, r12
    2218:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    221c:	ca 01       	movw	r24, r20
    221e:	b9 01       	movw	r22, r18
    2220:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char((TimeRegPointer->totalTime / 3600) + ASCII_NULL);
				}
				LCD_Nokia_Put6Char(':');
    2224:	8a e3       	ldi	r24, 0x3A	; 58
    2226:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
				if (((TimeRegPointer->totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((TimeRegPointer->totalTime % 3600) / 60);
    222a:	c0 91 7c 01 	lds	r28, 0x017C	; 0x80017c <TimeRegPointer>
    222e:	d0 91 7d 01 	lds	r29, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2232:	6b 89       	ldd	r22, Y+19	; 0x13
    2234:	7c 89       	ldd	r23, Y+20	; 0x14
    2236:	8d 89       	ldd	r24, Y+21	; 0x15
    2238:	9e 89       	ldd	r25, Y+22	; 0x16
    223a:	a7 01       	movw	r20, r14
    223c:	96 01       	movw	r18, r12
    223e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2242:	68 35       	cpi	r22, 0x58	; 88
    2244:	72 40       	sbci	r23, 0x02	; 2
    2246:	81 05       	cpc	r24, r1
    2248:	91 05       	cpc	r25, r1
    224a:	08 f4       	brcc	.+2      	; 0x224e <Speedometer_LCD_Nokia_Main+0x264>
    224c:	10 c1       	rjmp	.+544    	; 0x246e <Speedometer_LCD_Nokia_Main+0x484>
    224e:	6b 89       	ldd	r22, Y+19	; 0x13
    2250:	7c 89       	ldd	r23, Y+20	; 0x14
    2252:	8d 89       	ldd	r24, Y+21	; 0x15
    2254:	9e 89       	ldd	r25, Y+22	; 0x16
    2256:	a7 01       	movw	r20, r14
    2258:	96 01       	movw	r18, r12
    225a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    225e:	a3 01       	movw	r20, r6
    2260:	92 01       	movw	r18, r4
    2262:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2266:	ca 01       	movw	r24, r20
    2268:	b9 01       	movw	r22, r18
    226a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				else
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((TimeRegPointer->totalTime % 3600) / 60) + ASCII_NULL);
				}
				LCD_Nokia_Put6Char(':');
    226e:	8a e3       	ldi	r24, 0x3A	; 58
    2270:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
				if (((TimeRegPointer->totalTime % 3600) % 60) > 9)	LCD_Nokia_Send6Integer((TimeRegPointer->totalTime % 3600) % 60);
    2274:	c0 91 7c 01 	lds	r28, 0x017C	; 0x80017c <TimeRegPointer>
    2278:	d0 91 7d 01 	lds	r29, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    227c:	6b 89       	ldd	r22, Y+19	; 0x13
    227e:	7c 89       	ldd	r23, Y+20	; 0x14
    2280:	8d 89       	ldd	r24, Y+21	; 0x15
    2282:	9e 89       	ldd	r25, Y+22	; 0x16
    2284:	a7 01       	movw	r20, r14
    2286:	96 01       	movw	r18, r12
    2288:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    228c:	a3 01       	movw	r20, r6
    228e:	92 01       	movw	r18, r4
    2290:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2294:	6a 30       	cpi	r22, 0x0A	; 10
    2296:	71 05       	cpc	r23, r1
    2298:	81 05       	cpc	r24, r1
    229a:	91 05       	cpc	r25, r1
    229c:	08 f4       	brcc	.+2      	; 0x22a0 <Speedometer_LCD_Nokia_Main+0x2b6>
    229e:	cf c0       	rjmp	.+414    	; 0x243e <Speedometer_LCD_Nokia_Main+0x454>
    22a0:	6b 89       	ldd	r22, Y+19	; 0x13
    22a2:	7c 89       	ldd	r23, Y+20	; 0x14
    22a4:	8d 89       	ldd	r24, Y+21	; 0x15
    22a6:	9e 89       	ldd	r25, Y+22	; 0x16
    22a8:	a7 01       	movw	r20, r14
    22aa:	96 01       	movw	r18, r12
    22ac:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    22b0:	a3 01       	movw	r20, r6
    22b2:	92 01       	movw	r18, r4
    22b4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    22b8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				{
					LCD_Nokia_Put6Char('0');
					LCD_Nokia_Put6Char(((TimeRegPointer->totalTime % 3600) % 60) + ASCII_NULL);
				}
				
				LCD_Nokia_SetPixelPosition(0,24);
    22bc:	68 e1       	ldi	r22, 0x18	; 24
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) averageVelocityString);
    22c4:	89 e2       	ldi	r24, 0x29	; 41
    22c6:	97 e0       	ldi	r25, 0x07	; 7
    22c8:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer((TimeRegPointer->averageVelocity * 3600) / 1000);
    22cc:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    22d0:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    22d4:	27 89       	ldd	r18, Z+23	; 0x17
    22d6:	30 8d       	ldd	r19, Z+24	; 0x18
    22d8:	41 8d       	ldd	r20, Z+25	; 0x19
    22da:	52 8d       	ldd	r21, Z+26	; 0x1a
    22dc:	a0 e1       	ldi	r26, 0x10	; 16
    22de:	be e0       	ldi	r27, 0x0E	; 14
    22e0:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__muluhisi3>
    22e4:	a5 01       	movw	r20, r10
    22e6:	94 01       	movw	r18, r8
    22e8:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    22ec:	ca 01       	movw	r24, r20
    22ee:	b9 01       	movw	r22, r18
    22f0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) kmh);
    22f4:	82 e4       	ldi	r24, 0x42	; 66
    22f6:	97 e0       	ldi	r25, 0x07	; 7
    22f8:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,32);
    22fc:	60 e2       	ldi	r22, 0x20	; 32
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) maxVelocityString);
    2304:	8f e2       	ldi	r24, 0x2F	; 47
    2306:	97 e0       	ldi	r25, 0x07	; 7
    2308:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer((TimeRegPointer->maxVelocity * 3600) / 1000);
    230c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2310:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2314:	23 8d       	ldd	r18, Z+27	; 0x1b
    2316:	34 8d       	ldd	r19, Z+28	; 0x1c
    2318:	45 8d       	ldd	r20, Z+29	; 0x1d
    231a:	56 8d       	ldd	r21, Z+30	; 0x1e
    231c:	a0 e1       	ldi	r26, 0x10	; 16
    231e:	be e0       	ldi	r27, 0x0E	; 14
    2320:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__muluhisi3>
    2324:	a5 01       	movw	r20, r10
    2326:	94 01       	movw	r18, r8
    2328:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    232c:	ca 01       	movw	r24, r20
    232e:	b9 01       	movw	r22, r18
    2330:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) kmh);
    2334:	82 e4       	ldi	r24, 0x42	; 66
    2336:	97 e0       	ldi	r25, 0x07	; 7
    2338:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,40);
    233c:	68 e2       	ldi	r22, 0x28	; 40
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t* ) dstString);
    2344:	83 e2       	ldi	r24, 0x23	; 35
    2346:	97 e0       	ldi	r25, 0x07	; 7
    2348:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer(TimeRegPointer->currentDistance / 1000);
    234c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2350:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2354:	67 8d       	ldd	r22, Z+31	; 0x1f
    2356:	70 a1       	ldd	r23, Z+32	; 0x20
    2358:	81 a1       	ldd	r24, Z+33	; 0x21
    235a:	92 a1       	ldd	r25, Z+34	; 0x22
    235c:	a5 01       	movw	r20, r10
    235e:	94 01       	movw	r18, r8
    2360:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2364:	ca 01       	movw	r24, r20
    2366:	b9 01       	movw	r22, r18
    2368:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				LCD_Nokia_SetPixelPosition(48, 40);
    236c:	68 e2       	ldi	r22, 0x28	; 40
    236e:	80 e3       	ldi	r24, 0x30	; 48
    2370:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Put5Char('.');
    2374:	8e e2       	ldi	r24, 0x2E	; 46
    2376:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
				LCD_Nokia_SetPixelPosition(51, 40);
    237a:	68 e2       	ldi	r22, 0x28	; 40
    237c:	83 e3       	ldi	r24, 0x33	; 51
    237e:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6Integer(TimeRegPointer->currentDistance % 1000);
    2382:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2386:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    238a:	67 8d       	ldd	r22, Z+31	; 0x1f
    238c:	70 a1       	ldd	r23, Z+32	; 0x20
    238e:	81 a1       	ldd	r24, Z+33	; 0x21
    2390:	92 a1       	ldd	r25, Z+34	; 0x22
    2392:	a5 01       	movw	r20, r10
    2394:	94 01       	movw	r18, r8
    2396:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    239a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
    239e:	88 e4       	ldi	r24, 0x48	; 72
    23a0:	97 e0       	ldi	r25, 0x07	; 7
    23a2:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_UpdateFullScreen();
    23a6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
		case SPEEDOMETER_SCREEN_MODE:
		{
			LCD_Nokia_ClearBuffer();
			
			Buttons_SetButtonState = false;
			while (!Buttons_SetButtonState)
    23aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Buttons_SetButtonState>
    23ae:	81 11       	cpse	r24, r1
    23b0:	76 c0       	rjmp	.+236    	; 0x249e <Speedometer_LCD_Nokia_Main+0x4b4>
			{
				LCD_Nokia_SetPixelPosition(0,8);
    23b2:	68 e0       	ldi	r22, 0x08	; 8
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) odoString);
    23ba:	8c e3       	ldi	r24, 0x3C	; 60
    23bc:	97 e0       	ldi	r25, 0x07	; 7
    23be:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				LCD_Nokia_Send6Integer(TimeRegPointer->totalDistance / 1000);
    23c2:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    23c6:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    23ca:	67 85       	ldd	r22, Z+15	; 0x0f
    23cc:	70 89       	ldd	r23, Z+16	; 0x10
    23ce:	81 89       	ldd	r24, Z+17	; 0x11
    23d0:	92 89       	ldd	r25, Z+18	; 0x12
    23d2:	a5 01       	movw	r20, r10
    23d4:	94 01       	movw	r18, r8
    23d6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    23da:	ca 01       	movw	r24, r20
    23dc:	b9 01       	movw	r22, r18
    23de:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
    23e2:	88 e4       	ldi	r24, 0x48	; 72
    23e4:	97 e0       	ldi	r25, 0x07	; 7
    23e6:	0e 94 a6 0b 	call	0x174c	; 0x174c <LCD_Nokia_Send5CharString_P>
				
				LCD_Nokia_SetPixelPosition(0,16);
    23ea:	60 e1       	ldi	r22, 0x10	; 16
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
				LCD_Nokia_Send6CharString_P((int8_t *) timeString);
    23f2:	85 e3       	ldi	r24, 0x35	; 53
    23f4:	97 e0       	ldi	r25, 0x07	; 7
    23f6:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
				if ((TimeRegPointer->totalTime / 3600) > 9)	LCD_Nokia_Send6Integer(TimeRegPointer->totalTime / 3600);
    23fa:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    23fe:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2402:	83 89       	ldd	r24, Z+19	; 0x13
    2404:	94 89       	ldd	r25, Z+20	; 0x14
    2406:	a5 89       	ldd	r26, Z+21	; 0x15
    2408:	b6 89       	ldd	r27, Z+22	; 0x16
    240a:	80 3a       	cpi	r24, 0xA0	; 160
    240c:	9c 48       	sbci	r25, 0x8C	; 140
    240e:	a1 05       	cpc	r26, r1
    2410:	b1 05       	cpc	r27, r1
    2412:	08 f0       	brcs	.+2      	; 0x2416 <Speedometer_LCD_Nokia_Main+0x42c>
    2414:	fb ce       	rjmp	.-522    	; 0x220c <Speedometer_LCD_Nokia_Main+0x222>
				else
				{
					LCD_Nokia_Put6Char('0');
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char((TimeRegPointer->totalTime / 3600) + ASCII_NULL);
    241c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2420:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2424:	63 89       	ldd	r22, Z+19	; 0x13
    2426:	74 89       	ldd	r23, Z+20	; 0x14
    2428:	85 89       	ldd	r24, Z+21	; 0x15
    242a:	96 89       	ldd	r25, Z+22	; 0x16
    242c:	a7 01       	movw	r20, r14
    242e:	96 01       	movw	r18, r12
    2430:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2434:	80 e3       	ldi	r24, 0x30	; 48
    2436:	82 0f       	add	r24, r18
    2438:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
    243c:	f3 ce       	rjmp	.-538    	; 0x2224 <Speedometer_LCD_Nokia_Main+0x23a>
				}
				LCD_Nokia_Put6Char(':');
				if (((TimeRegPointer->totalTime % 3600) % 60) > 9)	LCD_Nokia_Send6Integer((TimeRegPointer->totalTime % 3600) % 60);
				else
				{
					LCD_Nokia_Put6Char('0');
    243e:	80 e3       	ldi	r24, 0x30	; 48
    2440:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char(((TimeRegPointer->totalTime % 3600) % 60) + ASCII_NULL);
    2444:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2448:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    244c:	63 89       	ldd	r22, Z+19	; 0x13
    244e:	74 89       	ldd	r23, Z+20	; 0x14
    2450:	85 89       	ldd	r24, Z+21	; 0x15
    2452:	96 89       	ldd	r25, Z+22	; 0x16
    2454:	a7 01       	movw	r20, r14
    2456:	96 01       	movw	r18, r12
    2458:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    245c:	a3 01       	movw	r20, r6
    245e:	92 01       	movw	r18, r4
    2460:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2464:	80 e3       	ldi	r24, 0x30	; 48
    2466:	86 0f       	add	r24, r22
    2468:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
    246c:	27 cf       	rjmp	.-434    	; 0x22bc <Speedometer_LCD_Nokia_Main+0x2d2>
				}
				LCD_Nokia_Put6Char(':');
				if (((TimeRegPointer->totalTime % 3600) / 60) > 9)	LCD_Nokia_Send6Integer((TimeRegPointer->totalTime % 3600) / 60);
				else
				{
					LCD_Nokia_Put6Char('0');
    246e:	80 e3       	ldi	r24, 0x30	; 48
    2470:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
					LCD_Nokia_Put6Char(((TimeRegPointer->totalTime % 3600) / 60) + ASCII_NULL);
    2474:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2478:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    247c:	63 89       	ldd	r22, Z+19	; 0x13
    247e:	74 89       	ldd	r23, Z+20	; 0x14
    2480:	85 89       	ldd	r24, Z+21	; 0x15
    2482:	96 89       	ldd	r25, Z+22	; 0x16
    2484:	a7 01       	movw	r20, r14
    2486:	96 01       	movw	r18, r12
    2488:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    248c:	a3 01       	movw	r20, r6
    248e:	92 01       	movw	r18, r4
    2490:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2494:	80 e3       	ldi	r24, 0x30	; 48
    2496:	82 0f       	add	r24, r18
    2498:	0e 94 a3 0b 	call	0x1746	; 0x1746 <LCD_Nokia_Put6Char>
    249c:	e8 ce       	rjmp	.-560    	; 0x226e <Speedometer_LCD_Nokia_Main+0x284>
			break;
		}
		
		default:	break;
	}
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	df 90       	pop	r13
    24a8:	cf 90       	pop	r12
    24aa:	bf 90       	pop	r11
    24ac:	af 90       	pop	r10
    24ae:	9f 90       	pop	r9
    24b0:	8f 90       	pop	r8
    24b2:	7f 90       	pop	r7
    24b4:	6f 90       	pop	r6
    24b6:	5f 90       	pop	r5
    24b8:	4f 90       	pop	r4
				LCD_Nokia_Send5CharString_P((int8_t* ) km);
				
				LCD_Nokia_UpdateFullScreen();
			}
			
			LCD_Nokia_ClearBuffer();
    24ba:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <LCD_Nokia_ClearBuffer>
			TimeRegPointer = &Speedometer_Buffer;
			uint32_t temp = TimeRegPointer->Speedometer_Speed;
			LCD_Nokia_SetPixelPosition(0, 12);
			if (temp == 0)
			{
				LCD_Nokia_Send12CharString_P((int8_t *) PSTR("00"));
    24be:	80 e2       	ldi	r24, 0x20	; 32
    24c0:	97 e0       	ldi	r25, 0x07	; 7
    24c2:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <LCD_Nokia_Send12CharString_P>
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
			}
			LCD_Nokia_SetPixelPosition(23, 21);
    24c6:	65 e1       	ldi	r22, 0x15	; 21
    24c8:	87 e1       	ldi	r24, 0x17	; 23
    24ca:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    24ce:	8e e2       	ldi	r24, 0x2E	; 46
    24d0:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(26, 12);
    24d4:	6c e0       	ldi	r22, 0x0C	; 12
    24d6:	8a e1       	ldi	r24, 0x1A	; 26
    24d8:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
    24dc:	80 e3       	ldi	r24, 0x30	; 48
    24de:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 10) && (((temp * 36) % 10000) <= 100))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10) + ASCII_NULL);
			
			LCD_Nokia_SetPixelPosition(43, 21);
    24e2:	65 e1       	ldi	r22, 0x15	; 21
    24e4:	8b e2       	ldi	r24, 0x2B	; 43
    24e6:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) kmh);
    24ea:	82 e4       	ldi	r24, 0x42	; 66
    24ec:	97 e0       	ldi	r25, 0x07	; 7
    24ee:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			
			//	Out another data
			LCD_Nokia_SetPixelPosition(0 , 33);
    24f2:	61 e2       	ldi	r22, 0x21	; 33
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) odoString);
    24fa:	8c e3       	ldi	r24, 0x3C	; 60
    24fc:	97 e0       	ldi	r25, 0x07	; 7
    24fe:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6Integer(TimeRegPointer->totalDistance / 1000);
    2502:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2506:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    250a:	67 85       	ldd	r22, Z+15	; 0x0f
    250c:	70 89       	ldd	r23, Z+16	; 0x10
    250e:	81 89       	ldd	r24, Z+17	; 0x11
    2510:	92 89       	ldd	r25, Z+18	; 0x12
    2512:	38 ee       	ldi	r19, 0xE8	; 232
    2514:	c3 2e       	mov	r12, r19
    2516:	33 e0       	ldi	r19, 0x03	; 3
    2518:	d3 2e       	mov	r13, r19
    251a:	e1 2c       	mov	r14, r1
    251c:	f1 2c       	mov	r15, r1
    251e:	a7 01       	movw	r20, r14
    2520:	96 01       	movw	r18, r12
    2522:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2526:	ca 01       	movw	r24, r20
    2528:	b9 01       	movw	r22, r18
    252a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
    252e:	88 e4       	ldi	r24, 0x48	; 72
    2530:	97 e0       	ldi	r25, 0x07	; 7
    2532:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_SetPixelPosition(0, 41);
    2536:	69 e2       	ldi	r22, 0x29	; 41
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6CharString_P((int8_t* ) dstString);
    253e:	83 e2       	ldi	r24, 0x23	; 35
    2540:	97 e0       	ldi	r25, 0x07	; 7
    2542:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			LCD_Nokia_Send6Integer(TimeRegPointer->currentDistance / 1000);
    2546:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    254a:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    254e:	67 8d       	ldd	r22, Z+31	; 0x1f
    2550:	70 a1       	ldd	r23, Z+32	; 0x20
    2552:	81 a1       	ldd	r24, Z+33	; 0x21
    2554:	92 a1       	ldd	r25, Z+34	; 0x22
    2556:	a7 01       	movw	r20, r14
    2558:	96 01       	movw	r18, r12
    255a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    255e:	ca 01       	movw	r24, r20
    2560:	b9 01       	movw	r22, r18
    2562:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
			LCD_Nokia_SetPixelPosition(48, 41);
    2566:	69 e2       	ldi	r22, 0x29	; 41
    2568:	80 e3       	ldi	r24, 0x30	; 48
    256a:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Put5Char('.');
    256e:	8e e2       	ldi	r24, 0x2E	; 46
    2570:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_Nokia_Put5Char>
			LCD_Nokia_SetPixelPosition(51, 41);
    2574:	69 e2       	ldi	r22, 0x29	; 41
    2576:	83 e3       	ldi	r24, 0x33	; 51
    2578:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_Nokia_SetPixelPosition>
			LCD_Nokia_Send6Integer(TimeRegPointer->currentDistance % 1000);
    257c:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <TimeRegPointer>
    2580:	f0 91 7d 01 	lds	r31, 0x017D	; 0x80017d <TimeRegPointer+0x1>
    2584:	67 8d       	ldd	r22, Z+31	; 0x1f
    2586:	70 a1       	ldd	r23, Z+32	; 0x20
    2588:	81 a1       	ldd	r24, Z+33	; 0x21
    258a:	92 a1       	ldd	r25, Z+34	; 0x22
    258c:	a7 01       	movw	r20, r14
    258e:	96 01       	movw	r18, r12
    2590:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2594:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_Nokia_Send6Integer>
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
    2598:	88 e4       	ldi	r24, 0x48	; 72
    259a:	97 e0       	ldi	r25, 0x07	; 7
    259c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <LCD_Nokia_Send6CharString_P>
			break;
		}
		
		default:	break;
	}
}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	ff 90       	pop	r15
    25a6:	ef 90       	pop	r14
    25a8:	df 90       	pop	r13
    25aa:	cf 90       	pop	r12
    25ac:	bf 90       	pop	r11
    25ae:	af 90       	pop	r10
    25b0:	9f 90       	pop	r9
    25b2:	8f 90       	pop	r8
    25b4:	7f 90       	pop	r7
    25b6:	6f 90       	pop	r6
    25b8:	5f 90       	pop	r5
    25ba:	4f 90       	pop	r4
			LCD_Nokia_Put5Char('.');
			LCD_Nokia_SetPixelPosition(51, 41);
			LCD_Nokia_Send6Integer(TimeRegPointer->currentDistance % 1000);
			LCD_Nokia_Send6CharString_P((int8_t* ) km);
			
			LCD_Nokia_UpdateFullScreen();
    25bc:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <LCD_Nokia_UpdateFullScreen>
				LCD_Nokia_Put12Char('0');
				LCD_Nokia_Put12Char(((temp * 36) / 10000) + ASCII_NULL);
			}
			else
			{
				LCD_Nokia_Put12Char((((temp * 36) / 10000) / 10) + ASCII_NULL);
    25c0:	c7 01       	movw	r24, r14
    25c2:	b6 01       	movw	r22, r12
    25c4:	20 ea       	ldi	r18, 0xA0	; 160
    25c6:	36 e8       	ldi	r19, 0x86	; 134
    25c8:	41 e0       	ldi	r20, 0x01	; 1
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    25d0:	80 e3       	ldi	r24, 0x30	; 48
    25d2:	82 0f       	add	r24, r18
    25d4:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
				LCD_Nokia_Put12Char((((temp * 36) / 10000) % 10) + ASCII_NULL);
    25d8:	c7 01       	movw	r24, r14
    25da:	b6 01       	movw	r22, r12
    25dc:	20 e1       	ldi	r18, 0x10	; 16
    25de:	37 e2       	ldi	r19, 0x27	; 39
    25e0:	40 e0       	ldi	r20, 0x00	; 0
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    25e8:	ca 01       	movw	r24, r20
    25ea:	b9 01       	movw	r22, r18
    25ec:	2a e0       	ldi	r18, 0x0A	; 10
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e0       	ldi	r20, 0x00	; 0
    25f2:	50 e0       	ldi	r21, 0x00	; 0
    25f4:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    25f8:	80 e3       	ldi	r24, 0x30	; 48
    25fa:	86 0f       	add	r24, r22
    25fc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    2600:	90 cd       	rjmp	.-1248   	; 0x2122 <Speedometer_LCD_Nokia_Main+0x138>
			LCD_Nokia_Put5Char('.');
			LCD_Nokia_SetPixelPosition(26, 12);
			
			if ((((temp * 36) % 10000) > 100000) || (((temp * 36) % 10000) == 0))	LCD_Nokia_Put12Char(ASCII_NULL);
			else if ((((temp * 36) % 10000) > 10000) && (((temp * 36) % 10000) <= 100000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 10000) + ASCII_NULL);
			else if ((((temp * 36) % 10000) > 1000) && (((temp * 36) % 10000) <= 10000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 1000) + ASCII_NULL);
    2602:	28 ee       	ldi	r18, 0xE8	; 232
    2604:	33 e0       	ldi	r19, 0x03	; 3
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    260e:	80 e3       	ldi	r24, 0x30	; 48
    2610:	82 0f       	add	r24, r18
    2612:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    2616:	65 cf       	rjmp	.-310    	; 0x24e2 <Speedometer_LCD_Nokia_Main+0x4f8>
			else if ((((temp * 36) % 10000) > 100) && (((temp * 36) % 10000) <= 1000))	LCD_Nokia_Put12Char((((temp * 36) % 10000) / 100) + ASCII_NULL);
    2618:	24 e6       	ldi	r18, 0x64	; 100
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2624:	80 e3       	ldi	r24, 0x30	; 48
    2626:	82 0f       	add	r24, r18
    2628:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_Nokia_Put12Char>
    262c:	5a cf       	rjmp	.-332    	; 0x24e2 <Speedometer_LCD_Nokia_Main+0x4f8>

0000262e <__vector_1>:
//	Update time: 1 second;
//	Stability: Normal;
//	Accuracy: Good;
//	Problems: unstability on velocities > 50 km/h;
ISR (INT0_vect)
{
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25
	TimeRegPointer = &Speedometer_Buffer;
    263c:	8b ef       	ldi	r24, 0xFB	; 251
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <TimeRegPointer+0x1>
    2644:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimeRegPointer>
	if (!Speedometer_IsRunning)
    2648:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <Speedometer_IsRunning>
    264c:	88 23       	and	r24, r24
    264e:	61 f0       	breq	.+24     	; 0x2668 <__vector_1+0x3a>
		OCR1A = 0x03D0;																					//	If F_CPU = 1MHz and prescaler = 1024, T = 1 second
		OCR1B = 0x03D0;//?????????????????????
		TCCR1B |= 1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10;										//	Prescaler = F_CPU / 1024
		TIMSK1 |= 1 << OCIE1A | 1 << OCIE1B;															//	Enable timer interrupts
	}
	else	Speedometer_RevolutionCounter++;
    2650:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <Speedometer_RevolutionCounter>
    2654:	8f 5f       	subi	r24, 0xFF	; 255
    2656:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Speedometer_RevolutionCounter>
}
    265a:	9f 91       	pop	r25
    265c:	8f 91       	pop	r24
    265e:	0f 90       	pop	r0
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	0f 90       	pop	r0
    2664:	1f 90       	pop	r1
    2666:	18 95       	reti
ISR (INT0_vect)
{
	TimeRegPointer = &Speedometer_Buffer;
	if (!Speedometer_IsRunning)
	{
		Speedometer_IsRunning = true;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <Speedometer_IsRunning>
		Speedometer_RevolutionCounter = 1;
    266e:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <Speedometer_RevolutionCounter>
		Speedometer_TimerCounter = 1;
    2672:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Speedometer_TimerCounter>
		
		OCR1A = 0x03D0;																					//	If F_CPU = 1MHz and prescaler = 1024, T = 1 second
    2676:	80 ed       	ldi	r24, 0xD0	; 208
    2678:	93 e0       	ldi	r25, 0x03	; 3
    267a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    267e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		OCR1B = 0x03D0;//?????????????????????
    2682:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    2686:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
		TCCR1B |= 1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10;										//	Prescaler = F_CPU / 1024
    268a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    268e:	8d 60       	ori	r24, 0x0D	; 13
    2690:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		TIMSK1 |= 1 << OCIE1A | 1 << OCIE1B;															//	Enable timer interrupts
    2694:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2698:	86 60       	ori	r24, 0x06	; 6
    269a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	}
	else	Speedometer_RevolutionCounter++;
}
    269e:	9f 91       	pop	r25
    26a0:	8f 91       	pop	r24
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0
    26a8:	1f 90       	pop	r1
    26aa:	18 95       	reti

000026ac <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
    26ac:	1f 92       	push	r1
    26ae:	0f 92       	push	r0
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	0f 92       	push	r0
    26b4:	11 24       	eor	r1, r1
    26b6:	2f 93       	push	r18
    26b8:	3f 93       	push	r19
    26ba:	4f 93       	push	r20
    26bc:	5f 93       	push	r21
    26be:	6f 93       	push	r22
    26c0:	7f 93       	push	r23
    26c2:	8f 93       	push	r24
    26c4:	9f 93       	push	r25
    26c6:	af 93       	push	r26
    26c8:	bf 93       	push	r27
    26ca:	ef 93       	push	r30
    26cc:	ff 93       	push	r31
	TimeRegPointer = &Speedometer_Buffer;
    26ce:	8b ef       	ldi	r24, 0xFB	; 251
    26d0:	91 e0       	ldi	r25, 0x01	; 1
    26d2:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <TimeRegPointer+0x1>
    26d6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimeRegPointer>
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
    26da:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Speedometer_TimerCounter>
	{
		TimeRegPointer->Speedometer_Speed = (TimeRegPointer->Speedometer_WheelLength * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    26de:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <Speedometer_Buffer+0x7>
    26e2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <Speedometer_Buffer+0x8>
    26e6:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <Speedometer_Buffer+0x9>
    26ea:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <Speedometer_Buffer+0xa>
    26ee:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <Speedometer_RevolutionCounter>
    26f2:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <Speedometer_TimerCounter>
    26f6:	0a 2e       	mov	r0, r26
    26f8:	00 0c       	add	r0, r0
    26fa:	bb 0b       	sbc	r27, r27
}

ISR (TIMER1_COMPA_vect)
{
	TimeRegPointer = &Speedometer_Buffer;
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
    26fc:	85 30       	cpi	r24, 0x05	; 5
    26fe:	08 f4       	brcc	.+2      	; 0x2702 <__vector_11+0x56>
    2700:	3f c0       	rjmp	.+126    	; 0x2780 <__vector_11+0xd4>
		TimeRegPointer->Speedometer_Speed = (TimeRegPointer->Speedometer_WheelLength * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
		Speedometer_TimerCounter++;
	}
	else
	{
		TimeRegPointer->Speedometer_Speed = (TimeRegPointer->Speedometer_WheelLength * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    2702:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__mulshisi3>
    2706:	2e 2f       	mov	r18, r30
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2712:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <Speedometer_Buffer+0xb>
    2716:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <Speedometer_Buffer+0xc>
    271a:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <Speedometer_Buffer+0xd>
    271e:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <Speedometer_Buffer+0xe>
		if (TimeRegPointer->Speedometer_Speed == 0)
    2722:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <Speedometer_Buffer+0xb>
    2726:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <Speedometer_Buffer+0xc>
    272a:	a0 91 08 02 	lds	r26, 0x0208	; 0x800208 <Speedometer_Buffer+0xd>
    272e:	b0 91 09 02 	lds	r27, 0x0209	; 0x800209 <Speedometer_Buffer+0xe>
    2732:	89 2b       	or	r24, r25
    2734:	8a 2b       	or	r24, r26
    2736:	8b 2b       	or	r24, r27
    2738:	b1 f0       	breq	.+44     	; 0x2766 <__vector_11+0xba>
			TIMSK1 &= ~(1 << OCIE1A | OCIE1B);
			Speedometer_IsRunning = false;
			
			return;
		}
		Speedometer_RevolutionCounter = 0;
    273a:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <Speedometer_RevolutionCounter>
		Speedometer_TimerCounter = 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Speedometer_TimerCounter>
	}
}
    2744:	ff 91       	pop	r31
    2746:	ef 91       	pop	r30
    2748:	bf 91       	pop	r27
    274a:	af 91       	pop	r26
    274c:	9f 91       	pop	r25
    274e:	8f 91       	pop	r24
    2750:	7f 91       	pop	r23
    2752:	6f 91       	pop	r22
    2754:	5f 91       	pop	r21
    2756:	4f 91       	pop	r20
    2758:	3f 91       	pop	r19
    275a:	2f 91       	pop	r18
    275c:	0f 90       	pop	r0
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	0f 90       	pop	r0
    2762:	1f 90       	pop	r1
    2764:	18 95       	reti
	else
	{
		TimeRegPointer->Speedometer_Speed = (TimeRegPointer->Speedometer_WheelLength * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
		if (TimeRegPointer->Speedometer_Speed == 0)
		{
			TCCR1B &= ~(1 << WGM12 | 1 << CS12 | 0 << CS11 | 1 << CS10);
    2766:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    276a:	82 7f       	andi	r24, 0xF2	; 242
    276c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
			TIMSK1 &= ~(1 << OCIE1A | OCIE1B);
    2770:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    2774:	8d 7f       	andi	r24, 0xFD	; 253
    2776:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
			Speedometer_IsRunning = false;
    277a:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <Speedometer_IsRunning>
			
			return;
    277e:	e2 cf       	rjmp	.-60     	; 0x2744 <__vector_11+0x98>
ISR (TIMER1_COMPA_vect)
{
	TimeRegPointer = &Speedometer_Buffer;
	if (Speedometer_TimerCounter < SPEEDOMETER_GENERAL_SAMPLE_TIME)
	{
		TimeRegPointer->Speedometer_Speed = (TimeRegPointer->Speedometer_WheelLength * Speedometer_RevolutionCounter) / Speedometer_TimerCounter;
    2780:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <__mulshisi3>
    2784:	2e 2f       	mov	r18, r30
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2790:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <Speedometer_Buffer+0xb>
    2794:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <Speedometer_Buffer+0xc>
    2798:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <Speedometer_Buffer+0xd>
    279c:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <Speedometer_Buffer+0xe>
		Speedometer_TimerCounter++;
    27a0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <Speedometer_TimerCounter>
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <Speedometer_TimerCounter>
    27aa:	cc cf       	rjmp	.-104    	; 0x2744 <__vector_11+0x98>

000027ac <__vector_12>:
		Speedometer_TimerCounter = 1;
	}
}

ISR (TIMER1_COMPB_vect)
{
    27ac:	1f 92       	push	r1
    27ae:	0f 92       	push	r0
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	0f 92       	push	r0
    27b4:	11 24       	eor	r1, r1
    27b6:	cf 92       	push	r12
    27b8:	df 92       	push	r13
    27ba:	ef 92       	push	r14
    27bc:	ff 92       	push	r15
    27be:	2f 93       	push	r18
    27c0:	3f 93       	push	r19
    27c2:	4f 93       	push	r20
    27c4:	5f 93       	push	r21
    27c6:	6f 93       	push	r22
    27c8:	7f 93       	push	r23
    27ca:	8f 93       	push	r24
    27cc:	9f 93       	push	r25
    27ce:	af 93       	push	r26
    27d0:	bf 93       	push	r27
    27d2:	ef 93       	push	r30
    27d4:	ff 93       	push	r31
	TimeRegPointer = &Speedometer_Buffer;
    27d6:	8b ef       	ldi	r24, 0xFB	; 251
    27d8:	91 e0       	ldi	r25, 0x01	; 1
    27da:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <TimeRegPointer+0x1>
    27de:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <TimeRegPointer>
	uint32_t currentVelocity = TimeRegPointer->Speedometer_Speed / 1000;
    27e2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <Speedometer_Buffer+0xb>
    27e6:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <Speedometer_Buffer+0xc>
    27ea:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <Speedometer_Buffer+0xd>
    27ee:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <Speedometer_Buffer+0xe>
    27f2:	28 ee       	ldi	r18, 0xE8	; 232
    27f4:	33 e0       	ldi	r19, 0x03	; 3
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	50 e0       	ldi	r21, 0x00	; 0
    27fa:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    27fe:	69 01       	movw	r12, r18
    2800:	7a 01       	movw	r14, r20
	TimeRegPointer->totalDistance += currentVelocity;
    2802:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <Speedometer_Buffer+0xf>
    2806:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <Speedometer_Buffer+0x10>
    280a:	a0 91 0c 02 	lds	r26, 0x020C	; 0x80020c <Speedometer_Buffer+0x11>
    280e:	b0 91 0d 02 	lds	r27, 0x020D	; 0x80020d <Speedometer_Buffer+0x12>
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	a4 1f       	adc	r26, r20
    2818:	b5 1f       	adc	r27, r21
    281a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <Speedometer_Buffer+0xf>
    281e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <Speedometer_Buffer+0x10>
    2822:	a0 93 0c 02 	sts	0x020C, r26	; 0x80020c <Speedometer_Buffer+0x11>
    2826:	b0 93 0d 02 	sts	0x020D, r27	; 0x80020d <Speedometer_Buffer+0x12>
	TimeRegPointer->currentDistance += currentVelocity;
    282a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <Speedometer_Buffer+0x1f>
    282e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <Speedometer_Buffer+0x20>
    2832:	a0 91 1c 02 	lds	r26, 0x021C	; 0x80021c <Speedometer_Buffer+0x21>
    2836:	b0 91 1d 02 	lds	r27, 0x021D	; 0x80021d <Speedometer_Buffer+0x22>
    283a:	82 0f       	add	r24, r18
    283c:	93 1f       	adc	r25, r19
    283e:	a4 1f       	adc	r26, r20
    2840:	b5 1f       	adc	r27, r21
    2842:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <Speedometer_Buffer+0x1f>
    2846:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <Speedometer_Buffer+0x20>
    284a:	a0 93 1c 02 	sts	0x021C, r26	; 0x80021c <Speedometer_Buffer+0x21>
    284e:	b0 93 1d 02 	sts	0x021D, r27	; 0x80021d <Speedometer_Buffer+0x22>
	TimeRegPointer->totalTime++;
    2852:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <Speedometer_Buffer+0x13>
    2856:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <Speedometer_Buffer+0x14>
    285a:	a0 91 10 02 	lds	r26, 0x0210	; 0x800210 <Speedometer_Buffer+0x15>
    285e:	b0 91 11 02 	lds	r27, 0x0211	; 0x800211 <Speedometer_Buffer+0x16>
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	a1 1d       	adc	r26, r1
    2866:	b1 1d       	adc	r27, r1
    2868:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <Speedometer_Buffer+0x13>
    286c:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <Speedometer_Buffer+0x14>
    2870:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <Speedometer_Buffer+0x15>
    2874:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <Speedometer_Buffer+0x16>
	TimeRegPointer->averageVelocity = TimeRegPointer->totalDistance / TimeRegPointer->totalTime;
    2878:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <Speedometer_Buffer+0xf>
    287c:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <Speedometer_Buffer+0x10>
    2880:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <Speedometer_Buffer+0x11>
    2884:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <Speedometer_Buffer+0x12>
    2888:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <Speedometer_Buffer+0x13>
    288c:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <Speedometer_Buffer+0x14>
    2890:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <Speedometer_Buffer+0x15>
    2894:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <Speedometer_Buffer+0x16>
    2898:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    289c:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <Speedometer_Buffer+0x17>
    28a0:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <Speedometer_Buffer+0x18>
    28a4:	40 93 14 02 	sts	0x0214, r20	; 0x800214 <Speedometer_Buffer+0x19>
    28a8:	50 93 15 02 	sts	0x0215, r21	; 0x800215 <Speedometer_Buffer+0x1a>
	if (currentVelocity > TimeRegPointer->maxVelocity)	TimeRegPointer->maxVelocity = currentVelocity;
    28ac:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <Speedometer_Buffer+0x1b>
    28b0:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <Speedometer_Buffer+0x1c>
    28b4:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <Speedometer_Buffer+0x1d>
    28b8:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <Speedometer_Buffer+0x1e>
    28bc:	8c 15       	cp	r24, r12
    28be:	9d 05       	cpc	r25, r13
    28c0:	ae 05       	cpc	r26, r14
    28c2:	bf 05       	cpc	r27, r15
    28c4:	40 f4       	brcc	.+16     	; 0x28d6 <__vector_12+0x12a>
    28c6:	c0 92 16 02 	sts	0x0216, r12	; 0x800216 <Speedometer_Buffer+0x1b>
    28ca:	d0 92 17 02 	sts	0x0217, r13	; 0x800217 <Speedometer_Buffer+0x1c>
    28ce:	e0 92 18 02 	sts	0x0218, r14	; 0x800218 <Speedometer_Buffer+0x1d>
    28d2:	f0 92 19 02 	sts	0x0219, r15	; 0x800219 <Speedometer_Buffer+0x1e>
    28d6:	ff 91       	pop	r31
    28d8:	ef 91       	pop	r30
    28da:	bf 91       	pop	r27
    28dc:	af 91       	pop	r26
    28de:	9f 91       	pop	r25
    28e0:	8f 91       	pop	r24
    28e2:	7f 91       	pop	r23
    28e4:	6f 91       	pop	r22
    28e6:	5f 91       	pop	r21
    28e8:	4f 91       	pop	r20
    28ea:	3f 91       	pop	r19
    28ec:	2f 91       	pop	r18
    28ee:	ff 90       	pop	r15
    28f0:	ef 90       	pop	r14
    28f2:	df 90       	pop	r13
    28f4:	cf 90       	pop	r12
    28f6:	0f 90       	pop	r0
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	0f 90       	pop	r0
    28fc:	1f 90       	pop	r1
    28fe:	18 95       	reti

00002900 <SPI_Master_Init>:
	SPCR0 |= (1 << SPIE);														//	Activate SPI interrupt
 	volatile uint8_t temp = SPSR0;												//	Clear the interrupt flag
 	temp = SPDR0;																//	Clear the interrupt flag
	temp = 0x00;																//	Here assign any "garbage" value to temp
	SPDR0 = temp;																//	and put it in the SPDR to activate the transfer process
}
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	1f 92       	push	r1
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	84 b1       	in	r24, 0x04	; 4
    290c:	8c 62       	ori	r24, 0x2C	; 44
    290e:	84 b9       	out	0x04, r24	; 4
    2910:	24 98       	cbi	0x04, 4	; 4
    2912:	8c b5       	in	r24, 0x2c	; 44
    2914:	80 65       	ori	r24, 0x50	; 80
    2916:	8c bd       	out	0x2c, r24	; 44
    2918:	8d b5       	in	r24, 0x2d	; 45
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	8e b5       	in	r24, 0x2e	; 46
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	0f 90       	pop	r0
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	08 95       	ret

00002928 <SPI_Master_Off>:
    2928:	8c b5       	in	r24, 0x2c	; 44
    292a:	8f 7a       	andi	r24, 0xAF	; 175
    292c:	8c bd       	out	0x2c, r24	; 44
    292e:	08 95       	ret

00002930 <SPI_PutByte>:
    2930:	8e bd       	out	0x2e, r24	; 46
    2932:	0d b4       	in	r0, 0x2d	; 45
    2934:	07 fe       	sbrs	r0, 7
    2936:	fd cf       	rjmp	.-6      	; 0x2932 <SPI_PutByte+0x2>
    2938:	08 95       	ret

0000293a <__vector_17>:

ISR (SPI0_STC_vect)
{
    293a:	1f 92       	push	r1
    293c:	0f 92       	push	r0
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	0f 92       	push	r0
    2942:	11 24       	eor	r1, r1
    2944:	8f 93       	push	r24
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
//	SPI_ReceiveBuffer[SPI_CharacterCounter] = SPDR;								//	Receive byte from the Slave	(for full-duplex communication)
	if (SPI_TransmitBuffer[SPI_CharacterCounter] != 0)							//	If not end of data
    294a:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <SPI_CharacterCounter>
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	e0 5a       	subi	r30, 0xA0	; 160
    2952:	fd 4f       	sbci	r31, 0xFD	; 253
    2954:	80 81       	ld	r24, Z
    2956:	81 11       	cpse	r24, r1
    2958:	10 c0       	rjmp	.+32     	; 0x297a <__vector_17+0x40>
	{
		SPDR0 = SPI_TransmitBuffer[SPI_CharacterCounter++];						//	Put the next byte in the SPI data register
	}
	else
	{
		SPCR0 &= ~(1 << SPIE);													//	Disable SPI interrupt
    295a:	8c b5       	in	r24, 0x2c	; 44
    295c:	8f 77       	andi	r24, 0x7F	; 127
    295e:	8c bd       	out	0x2c, r24	; 44
		SPI_TransmitSuccess = true;												//	Set the success flag
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <SPI_TransmitSuccess>
		SPI_CharacterCounter = 0;												//	Reset character counter
    2966:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <SPI_CharacterCounter>
	}
}
    296a:	ff 91       	pop	r31
    296c:	ef 91       	pop	r30
    296e:	8f 91       	pop	r24
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f 90       	pop	r0
    2976:	1f 90       	pop	r1
    2978:	18 95       	reti
ISR (SPI0_STC_vect)
{
//	SPI_ReceiveBuffer[SPI_CharacterCounter] = SPDR;								//	Receive byte from the Slave	(for full-duplex communication)
	if (SPI_TransmitBuffer[SPI_CharacterCounter] != 0)							//	If not end of data
	{
		SPDR0 = SPI_TransmitBuffer[SPI_CharacterCounter++];						//	Put the next byte in the SPI data register
    297a:	e0 91 f3 01 	lds	r30, 0x01F3	; 0x8001f3 <SPI_CharacterCounter>
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	8e 0f       	add	r24, r30
    2982:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <SPI_CharacterCounter>
    2986:	f0 e0       	ldi	r31, 0x00	; 0
    2988:	e0 5a       	subi	r30, 0xA0	; 160
    298a:	fd 4f       	sbci	r31, 0xFD	; 253
    298c:	80 81       	ld	r24, Z
    298e:	8e bd       	out	0x2e, r24	; 46
	{
		SPCR0 &= ~(1 << SPIE);													//	Disable SPI interrupt
		SPI_TransmitSuccess = true;												//	Set the success flag
		SPI_CharacterCounter = 0;												//	Reset character counter
	}
}
    2990:	ff 91       	pop	r31
    2992:	ef 91       	pop	r30
    2994:	8f 91       	pop	r24
    2996:	0f 90       	pop	r0
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	0f 90       	pop	r0
    299c:	1f 90       	pop	r1
    299e:	18 95       	reti

000029a0 <USART_Init>:
{
	while (USART_RxHead == USART_RxTail);												//	Waiting for reception
	USART_RxHead = (USART_RxHead + 1) & USART_BUFFER_MASK;								//	When the first byte received, increment ReceiverHead
	
	return (USART_ReceiveBuffer[USART_RxHead]);											//	Return byte by the received pointer
}
    29a0:	85 e0       	ldi	r24, 0x05	; 5
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    29a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    29ac:	e1 ec       	ldi	r30, 0xC1	; 193
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	80 81       	ld	r24, Z
    29b2:	88 69       	ori	r24, 0x98	; 152
    29b4:	80 83       	st	Z, r24
    29b6:	e2 ec       	ldi	r30, 0xC2	; 194
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	86 60       	ori	r24, 0x06	; 6
    29be:	80 83       	st	Z, r24
    29c0:	10 92 f7 01 	sts	0x01F7, r1	; 0x8001f7 <USART_TxHead>
    29c4:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <USART_TxTail>
    29c8:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <USART_RxHead>
    29cc:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <USART_RxTail>
    29d0:	08 95       	ret

000029d2 <USART_SendString>:

void USART_SendString (int8_t* data)
{
    29d2:	dc 01       	movw	r26, r24
	for (uint8_t i = 0; data[i] != 0; i++)	USART_PutByte(data[i]);						//	Send by byte, until we detect NULL character (or the end of the line)
    29d4:	2c 91       	ld	r18, X
    29d6:	22 23       	and	r18, r18
    29d8:	d9 f0       	breq	.+54     	; 0x2a10 <USART_SendString+0x3e>
    29da:	30 e0       	ldi	r19, 0x00	; 0
	USART_FlushBuffers();																//	Reset buffers
}

void USART_PutByte (int8_t byte)
{
	uint8_t tempTxTail = (USART_TxTail + 1) & USART_BUFFER_MASK;						//	Creating temporary incremented tail (for interruptions)
    29dc:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <USART_TxTail>
    29e0:	ef 5f       	subi	r30, 0xFF	; 255
    29e2:	ef 73       	andi	r30, 0x3F	; 63
	while(USART_TxHead == tempTxTail);													//	Wait for free space in the buffer
    29e4:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <USART_TxHead>
    29e8:	e9 17       	cp	r30, r25
    29ea:	e1 f3       	breq	.-8      	; 0x29e4 <USART_SendString+0x12>
	USART_TxTail = tempTxTail;															//	Now update tail
    29ec:	e0 93 f6 01 	sts	0x01F6, r30	; 0x8001f6 <USART_TxTail>
	USART_TransmitBuffer[tempTxTail] = byte;											//	And put byte in the Transmit buffer, which will handle the interrupt
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	e0 52       	subi	r30, 0x20	; 32
    29f4:	fd 4f       	sbci	r31, 0xFD	; 253
    29f6:	20 83       	st	Z, r18
	
	UCSR0B |= 1 << UDRIE0;																//	Enable interrupt handler
    29f8:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    29fc:	90 62       	ori	r25, 0x20	; 32
    29fe:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	return (USART_ReceiveBuffer[USART_RxHead]);											//	Return byte by the received pointer
}

void USART_SendString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	USART_PutByte(data[i]);						//	Send by byte, until we detect NULL character (or the end of the line)
    2a02:	3f 5f       	subi	r19, 0xFF	; 255
    2a04:	fd 01       	movw	r30, r26
    2a06:	e3 0f       	add	r30, r19
    2a08:	f1 1d       	adc	r31, r1
    2a0a:	20 81       	ld	r18, Z
    2a0c:	21 11       	cpse	r18, r1
    2a0e:	e6 cf       	rjmp	.-52     	; 0x29dc <USART_SendString+0xa>
    2a10:	08 95       	ret

00002a12 <USART_ReceiveString>:
}

void USART_ReceiveString (int8_t* data)
{
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	ec 01       	movw	r28, r24
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
    2a18:	88 81       	ld	r24, Y
    2a1a:	88 23       	and	r24, r24
    2a1c:	e1 f0       	breq	.+56     	; 0x2a56 <USART_ReceiveString+0x44>
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	de 01       	movw	r26, r28
	UCSR0B |= 1 << UDRIE0;																//	Enable interrupt handler
}

int8_t USART_GetByte (void)
{
	while (USART_RxHead == USART_RxTail);												//	Waiting for reception
    2a22:	20 91 f5 01 	lds	r18, 0x01F5	; 0x8001f5 <USART_RxHead>
    2a26:	90 91 f4 01 	lds	r25, 0x01F4	; 0x8001f4 <USART_RxTail>
    2a2a:	29 17       	cp	r18, r25
    2a2c:	d1 f3       	breq	.-12     	; 0x2a22 <USART_ReceiveString+0x10>
	USART_RxHead = (USART_RxHead + 1) & USART_BUFFER_MASK;								//	When the first byte received, increment ReceiverHead
    2a2e:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USART_RxHead>
    2a32:	9f 5f       	subi	r25, 0xFF	; 255
    2a34:	9f 73       	andi	r25, 0x3F	; 63
    2a36:	90 93 f5 01 	sts	0x01F5, r25	; 0x8001f5 <USART_RxHead>
	
	return (USART_ReceiveBuffer[USART_RxHead]);											//	Return byte by the received pointer
    2a3a:	e0 91 f5 01 	lds	r30, 0x01F5	; 0x8001f5 <USART_RxHead>
    2a3e:	f0 e0       	ldi	r31, 0x00	; 0
    2a40:	e0 56       	subi	r30, 0x60	; 96
    2a42:	fd 4f       	sbci	r31, 0xFD	; 253
    2a44:	90 81       	ld	r25, Z
	for (uint8_t i = 0; data[i] != 0; i++)	USART_PutByte(data[i]);						//	Send by byte, until we detect NULL character (or the end of the line)
}

void USART_ReceiveString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
    2a46:	9c 93       	st	X, r25
    2a48:	3f 5f       	subi	r19, 0xFF	; 255
    2a4a:	de 01       	movw	r26, r28
    2a4c:	a3 0f       	add	r26, r19
    2a4e:	b1 1d       	adc	r27, r1
    2a50:	9c 91       	ld	r25, X
    2a52:	91 11       	cpse	r25, r1
    2a54:	e6 cf       	rjmp	.-52     	; 0x2a22 <USART_ReceiveString+0x10>
}
    2a56:	df 91       	pop	r29
    2a58:	cf 91       	pop	r28
    2a5a:	08 95       	ret

00002a5c <__vector_19>:

ISR (USART0_UDRE_vect)
{
    2a5c:	1f 92       	push	r1
    2a5e:	0f 92       	push	r0
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	0f 92       	push	r0
    2a64:	11 24       	eor	r1, r1
    2a66:	8f 93       	push	r24
    2a68:	9f 93       	push	r25
    2a6a:	ef 93       	push	r30
    2a6c:	ff 93       	push	r31
	if (USART_TxHead != USART_TxTail)													//	If there's a clean place in the buffer
    2a6e:	90 91 f7 01 	lds	r25, 0x01F7	; 0x8001f7 <USART_TxHead>
    2a72:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <USART_TxTail>
    2a76:	98 17       	cp	r25, r24
    2a78:	a9 f0       	breq	.+42     	; 0x2aa4 <__vector_19+0x48>
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
    2a7a:	e0 91 f7 01 	lds	r30, 0x01F7	; 0x8001f7 <USART_TxHead>
    2a7e:	ef 5f       	subi	r30, 0xFF	; 255
    2a80:	ef 73       	andi	r30, 0x3F	; 63
		USART_TxHead = tempTxHead;
    2a82:	e0 93 f7 01 	sts	0x01F7, r30	; 0x8001f7 <USART_TxHead>
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	e0 52       	subi	r30, 0x20	; 32
    2a8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2a8c:	80 81       	ld	r24, Z
    2a8e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
}
    2a92:	ff 91       	pop	r31
    2a94:	ef 91       	pop	r30
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	0f 90       	pop	r0
    2a9c:	0f be       	out	0x3f, r0	; 63
    2a9e:	0f 90       	pop	r0
    2aa0:	1f 90       	pop	r1
    2aa2:	18 95       	reti
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
		USART_TxHead = tempTxHead;
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
    2aa4:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2aa8:	8f 7d       	andi	r24, 0xDF	; 223
    2aaa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
}
    2aae:	f1 cf       	rjmp	.-30     	; 0x2a92 <__vector_19+0x36>

00002ab0 <__vector_18>:

ISR (USART0_RX_vect)
{
    2ab0:	1f 92       	push	r1
    2ab2:	0f 92       	push	r0
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	8f 93       	push	r24
    2abc:	9f 93       	push	r25
    2abe:	ef 93       	push	r30
    2ac0:	ff 93       	push	r31
	int8_t byte = UDR0;																	//	Saving UDR value
    2ac2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uint8_t tempRxTail = (USART_RxTail + 1) & USART_BUFFER_MASK;						//	Increment RxTail value
    2ac6:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <USART_RxTail>
    2aca:	ef 5f       	subi	r30, 0xFF	; 255
    2acc:	ef 73       	andi	r30, 0x3F	; 63
	USART_RxTail = tempRxTail;															//	Saving RxTail value
    2ace:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <USART_RxTail>
	if (USART_RxHead == tempRxTail)																	
    2ad2:	90 91 f5 01 	lds	r25, 0x01F5	; 0x8001f5 <USART_RxHead>
		//	Buffer overflow
		//
		
		//	PORTD |= 0x80;
	}
	USART_ReceiveBuffer[tempRxTail] = byte;												//	Saving UDR value in the receive buffer
    2ad6:	f0 e0       	ldi	r31, 0x00	; 0
    2ad8:	e0 56       	subi	r30, 0x60	; 96
    2ada:	fd 4f       	sbci	r31, 0xFD	; 253
    2adc:	80 83       	st	Z, r24
    2ade:	ff 91       	pop	r31
    2ae0:	ef 91       	pop	r30
    2ae2:	9f 91       	pop	r25
    2ae4:	8f 91       	pop	r24
    2ae6:	0f 90       	pop	r0
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	0f 90       	pop	r0
    2aec:	1f 90       	pop	r1
    2aee:	18 95       	reti

00002af0 <__udivmodsi4>:
    2af0:	a1 e2       	ldi	r26, 0x21	; 33
    2af2:	1a 2e       	mov	r1, r26
    2af4:	aa 1b       	sub	r26, r26
    2af6:	bb 1b       	sub	r27, r27
    2af8:	fd 01       	movw	r30, r26
    2afa:	0d c0       	rjmp	.+26     	; 0x2b16 <__udivmodsi4_ep>

00002afc <__udivmodsi4_loop>:
    2afc:	aa 1f       	adc	r26, r26
    2afe:	bb 1f       	adc	r27, r27
    2b00:	ee 1f       	adc	r30, r30
    2b02:	ff 1f       	adc	r31, r31
    2b04:	a2 17       	cp	r26, r18
    2b06:	b3 07       	cpc	r27, r19
    2b08:	e4 07       	cpc	r30, r20
    2b0a:	f5 07       	cpc	r31, r21
    2b0c:	20 f0       	brcs	.+8      	; 0x2b16 <__udivmodsi4_ep>
    2b0e:	a2 1b       	sub	r26, r18
    2b10:	b3 0b       	sbc	r27, r19
    2b12:	e4 0b       	sbc	r30, r20
    2b14:	f5 0b       	sbc	r31, r21

00002b16 <__udivmodsi4_ep>:
    2b16:	66 1f       	adc	r22, r22
    2b18:	77 1f       	adc	r23, r23
    2b1a:	88 1f       	adc	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	1a 94       	dec	r1
    2b20:	69 f7       	brne	.-38     	; 0x2afc <__udivmodsi4_loop>
    2b22:	60 95       	com	r22
    2b24:	70 95       	com	r23
    2b26:	80 95       	com	r24
    2b28:	90 95       	com	r25
    2b2a:	9b 01       	movw	r18, r22
    2b2c:	ac 01       	movw	r20, r24
    2b2e:	bd 01       	movw	r22, r26
    2b30:	cf 01       	movw	r24, r30
    2b32:	08 95       	ret

00002b34 <__divmodsi4>:
    2b34:	05 2e       	mov	r0, r21
    2b36:	97 fb       	bst	r25, 7
    2b38:	1e f4       	brtc	.+6      	; 0x2b40 <__divmodsi4+0xc>
    2b3a:	00 94       	com	r0
    2b3c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__negsi2>
    2b40:	57 fd       	sbrc	r21, 7
    2b42:	07 d0       	rcall	.+14     	; 0x2b52 <__divmodsi4_neg2>
    2b44:	0e 94 78 15 	call	0x2af0	; 0x2af0 <__udivmodsi4>
    2b48:	07 fc       	sbrc	r0, 7
    2b4a:	03 d0       	rcall	.+6      	; 0x2b52 <__divmodsi4_neg2>
    2b4c:	4e f4       	brtc	.+18     	; 0x2b60 <__divmodsi4_exit>
    2b4e:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__negsi2>

00002b52 <__divmodsi4_neg2>:
    2b52:	50 95       	com	r21
    2b54:	40 95       	com	r20
    2b56:	30 95       	com	r19
    2b58:	21 95       	neg	r18
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b5e:	5f 4f       	sbci	r21, 0xFF	; 255

00002b60 <__divmodsi4_exit>:
    2b60:	08 95       	ret

00002b62 <__negsi2>:
    2b62:	90 95       	com	r25
    2b64:	80 95       	com	r24
    2b66:	70 95       	com	r23
    2b68:	61 95       	neg	r22
    2b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b70:	08 95       	ret

00002b72 <__muluhisi3>:
    2b72:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__umulhisi3>
    2b76:	a5 9f       	mul	r26, r21
    2b78:	90 0d       	add	r25, r0
    2b7a:	b4 9f       	mul	r27, r20
    2b7c:	90 0d       	add	r25, r0
    2b7e:	a4 9f       	mul	r26, r20
    2b80:	80 0d       	add	r24, r0
    2b82:	91 1d       	adc	r25, r1
    2b84:	11 24       	eor	r1, r1
    2b86:	08 95       	ret

00002b88 <__mulshisi3>:
    2b88:	b7 ff       	sbrs	r27, 7
    2b8a:	0c 94 b9 15 	jmp	0x2b72	; 0x2b72 <__muluhisi3>

00002b8e <__mulohisi3>:
    2b8e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <__muluhisi3>
    2b92:	82 1b       	sub	r24, r18
    2b94:	93 0b       	sbc	r25, r19
    2b96:	08 95       	ret

00002b98 <__umulhisi3>:
    2b98:	a2 9f       	mul	r26, r18
    2b9a:	b0 01       	movw	r22, r0
    2b9c:	b3 9f       	mul	r27, r19
    2b9e:	c0 01       	movw	r24, r0
    2ba0:	a3 9f       	mul	r26, r19
    2ba2:	70 0d       	add	r23, r0
    2ba4:	81 1d       	adc	r24, r1
    2ba6:	11 24       	eor	r1, r1
    2ba8:	91 1d       	adc	r25, r1
    2baa:	b2 9f       	mul	r27, r18
    2bac:	70 0d       	add	r23, r0
    2bae:	81 1d       	adc	r24, r1
    2bb0:	11 24       	eor	r1, r1
    2bb2:	91 1d       	adc	r25, r1
    2bb4:	08 95       	ret

00002bb6 <_exit>:
    2bb6:	f8 94       	cli

00002bb8 <__stop_program>:
    2bb8:	ff cf       	rjmp	.-2      	; 0x2bb8 <__stop_program>
